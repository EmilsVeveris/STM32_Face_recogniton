
Kursa_Darbs_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  08010fe0  08010fe0  00020fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c18  08011c18  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  08011c18  08011c18  00021c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c20  08011c20  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c20  08011c20  00021c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c24  08011c24  00021c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08011c28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019700  20000264  08011e8c  00030264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019964  08011e8c  00039964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036b4c  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071d6  00000000  00000000  00066de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026c0  00000000  00000000  0006dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000b387  00000000  00000000  00070678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002f2ea  00000000  00000000  0007b9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e78e5  00000000  00000000  000aace9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001925ce  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000023c0  00000000  00000000  00192628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a844  00000000  00000000  001949e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010fc8 	.word	0x08010fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	08010fc8 	.word	0x08010fc8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ili9325_Init>:
void     LCD_IO_WriteCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size);
void     LCD_IO_ReadCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize);

//-----------------------------------------------------------------------------
void ili9325_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  if((Is_ili9325_Initialized & ILI9325_LCD_INITIALIZED) == 0)
 80004cc:	4b85      	ldr	r3, [pc, #532]	; (80006e4 <ili9325_Init+0x21c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	f040 8103 	bne.w	80006e0 <ili9325_Init+0x218>
  {
    Is_ili9325_Initialized |= ILI9325_LCD_INITIALIZED;
 80004da:	4b82      	ldr	r3, [pc, #520]	; (80006e4 <ili9325_Init+0x21c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b7f      	ldr	r3, [pc, #508]	; (80006e4 <ili9325_Init+0x21c>)
 80004e6:	701a      	strb	r2, [r3, #0]
    if((Is_ili9325_Initialized & ILI9325_IO_INITIALIZED) == 0)
 80004e8:	4b7e      	ldr	r3, [pc, #504]	; (80006e4 <ili9325_Init+0x21c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f003 0302 	and.w	r3, r3, #2
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d101      	bne.n	80004f8 <ili9325_Init+0x30>
      LCD_IO_Init();
 80004f4:	f000 fc34 	bl	8000d60 <LCD_IO_Init>
    Is_ili9325_Initialized |= ILI9325_IO_INITIALIZED;
 80004f8:	4b7a      	ldr	r3, [pc, #488]	; (80006e4 <ili9325_Init+0x21c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b78      	ldr	r3, [pc, #480]	; (80006e4 <ili9325_Init+0x21c>)
 8000504:	701a      	strb	r2, [r3, #0]

    LCD_IO_WriteCmd16(RC(0xF3)); LCD_IO_WriteData16(RC(0x0008));
 8000506:	20f3      	movs	r0, #243	; 0xf3
 8000508:	f000 fc31 	bl	8000d6e <LCD_IO_WriteCmd16>
 800050c:	2008      	movs	r0, #8
 800050e:	f000 fc3d 	bl	8000d8c <LCD_IO_WriteData16>

    LCD_Delay(5);
 8000512:	2005      	movs	r0, #5
 8000514:	f000 fc0e 	bl	8000d34 <LCD_Delay>

    LCD_IO_WriteCmd16(RC(ILI9325_DRIV_OUT_CTRL)); LCD_IO_WriteData16(RC(ILI9325_DRIV_OUT_CTRL_DATA));
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fc28 	bl	8000d6e <LCD_IO_WriteCmd16>
 800051e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000522:	f000 fc33 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DRIV_WAV_CTRL)); LCD_IO_WriteData16(RC(0x0700));
 8000526:	2002      	movs	r0, #2
 8000528:	f000 fc21 	bl	8000d6e <LCD_IO_WriteCmd16>
 800052c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8000530:	f000 fc2c 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_DOWN));
 8000534:	2003      	movs	r0, #3
 8000536:	f000 fc1a 	bl	8000d6e <LCD_IO_WriteCmd16>
 800053a:	f241 0038 	movw	r0, #4152	; 0x1038
 800053e:	f000 fc25 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL2)); LCD_IO_WriteData16(RC(0x0302));
 8000542:	2008      	movs	r0, #8
 8000544:	f000 fc13 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000548:	f240 3002 	movw	r0, #770	; 0x302
 800054c:	f000 fc1e 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL3)); LCD_IO_WriteData16(RC(0x0000));
 8000550:	2009      	movs	r0, #9
 8000552:	f000 fc0c 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fc18 	bl	8000d8c <LCD_IO_WriteData16>
    /*POWER CONTROL REGISTER INITIAL*/
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x0000));
 800055c:	2010      	movs	r0, #16
 800055e:	f000 fc06 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fc12 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0007));
 8000568:	2011      	movs	r0, #17
 800056a:	f000 fc00 	bl	8000d6e <LCD_IO_WriteCmd16>
 800056e:	2007      	movs	r0, #7
 8000570:	f000 fc0c 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x0000));
 8000574:	2012      	movs	r0, #18
 8000576:	f000 fbfa 	bl	8000d6e <LCD_IO_WriteCmd16>
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fc06 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0000));
 8000580:	2013      	movs	r0, #19
 8000582:	f000 fbf4 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fc00 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_Delay(5);
 800058c:	2005      	movs	r0, #5
 800058e:	f000 fbd1 	bl	8000d34 <LCD_Delay>
    /*POWER SUPPPLY STARTUP 1 SETTING*/
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x14B0));
 8000592:	2010      	movs	r0, #16
 8000594:	f000 fbeb 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000598:	f241 40b0 	movw	r0, #5296	; 0x14b0
 800059c:	f000 fbf6 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_Delay(5);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fbc7 	bl	8000d34 <LCD_Delay>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0007));
 80005a6:	2011      	movs	r0, #17
 80005a8:	f000 fbe1 	bl	8000d6e <LCD_IO_WriteCmd16>
 80005ac:	2007      	movs	r0, #7
 80005ae:	f000 fbed 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_Delay(5);
 80005b2:	2005      	movs	r0, #5
 80005b4:	f000 fbbe 	bl	8000d34 <LCD_Delay>
    /*POWER SUPPLY STARTUP 2 SETTING*/
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x008E));
 80005b8:	2012      	movs	r0, #18
 80005ba:	f000 fbd8 	bl	8000d6e <LCD_IO_WriteCmd16>
 80005be:	208e      	movs	r0, #142	; 0x8e
 80005c0:	f000 fbe4 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0C00));
 80005c4:	2013      	movs	r0, #19
 80005c6:	f000 fbd2 	bl	8000d6e <LCD_IO_WriteCmd16>
 80005ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80005ce:	f000 fbdd 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL7)); LCD_IO_WriteData16(RC(0x0015));
 80005d2:	2029      	movs	r0, #41	; 0x29
 80005d4:	f000 fbcb 	bl	8000d6e <LCD_IO_WriteCmd16>
 80005d8:	2015      	movs	r0, #21
 80005da:	f000 fbd7 	bl	8000d8c <LCD_IO_WriteData16>

    LCD_Delay(5);
 80005de:	2005      	movs	r0, #5
 80005e0:	f000 fba8 	bl	8000d34 <LCD_Delay>
    /****GAMMA CLUSTER SETTING****/
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL1)); LCD_IO_WriteData16(RC(0x0000));
 80005e4:	2030      	movs	r0, #48	; 0x30
 80005e6:	f000 fbc2 	bl	8000d6e <LCD_IO_WriteCmd16>
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fbce 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL2)); LCD_IO_WriteData16(RC(0x0107));
 80005f0:	2031      	movs	r0, #49	; 0x31
 80005f2:	f000 fbbc 	bl	8000d6e <LCD_IO_WriteCmd16>
 80005f6:	f240 1007 	movw	r0, #263	; 0x107
 80005fa:	f000 fbc7 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL3)); LCD_IO_WriteData16(RC(0x0000));
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 fbb5 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fbc1 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL4)); LCD_IO_WriteData16(RC(0x0203));
 800060a:	2035      	movs	r0, #53	; 0x35
 800060c:	f000 fbaf 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000610:	f240 2003 	movw	r0, #515	; 0x203
 8000614:	f000 fbba 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL5)); LCD_IO_WriteData16(RC(0x0402));
 8000618:	2036      	movs	r0, #54	; 0x36
 800061a:	f000 fba8 	bl	8000d6e <LCD_IO_WriteCmd16>
 800061e:	f240 4002 	movw	r0, #1026	; 0x402
 8000622:	f000 fbb3 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL6)); LCD_IO_WriteData16(RC(0x0000));
 8000626:	2037      	movs	r0, #55	; 0x37
 8000628:	f000 fba1 	bl	8000d6e <LCD_IO_WriteCmd16>
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fbad 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL7)); LCD_IO_WriteData16(RC(0x0207));
 8000632:	2038      	movs	r0, #56	; 0x38
 8000634:	f000 fb9b 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000638:	f240 2007 	movw	r0, #519	; 0x207
 800063c:	f000 fba6 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL8)); LCD_IO_WriteData16(RC(0x0000));
 8000640:	2039      	movs	r0, #57	; 0x39
 8000642:	f000 fb94 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fba0 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL9)); LCD_IO_WriteData16(RC(0x0203));
 800064c:	203c      	movs	r0, #60	; 0x3c
 800064e:	f000 fb8e 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000652:	f240 2003 	movw	r0, #515	; 0x203
 8000656:	f000 fb99 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GAMMA_CTRL10)); LCD_IO_WriteData16(RC(0x0403));
 800065a:	203d      	movs	r0, #61	; 0x3d
 800065c:	f000 fb87 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000660:	f240 4003 	movw	r0, #1027	; 0x403
 8000664:	f000 fb92 	bl	8000d8c <LCD_IO_WriteData16>
    //-DISPLAY WINDOWS 240*320-
    LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000668:	2050      	movs	r0, #80	; 0x50
 800066a:	f000 fb80 	bl	8000d6e <LCD_IO_WriteCmd16>
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fb8c 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));  // 240 - 1
 8000674:	2051      	movs	r0, #81	; 0x51
 8000676:	f000 fb7a 	bl	8000d6e <LCD_IO_WriteCmd16>
 800067a:	20ef      	movs	r0, #239	; 0xef
 800067c:	f000 fb86 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000680:	2052      	movs	r0, #82	; 0x52
 8000682:	f000 fb74 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fb80 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1)); // 320 - 1
 800068c:	2053      	movs	r0, #83	; 0x53
 800068e:	f000 fb6e 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000692:	f240 103f 	movw	r0, #319	; 0x13f
 8000696:	f000 fb79 	bl	8000d8c <LCD_IO_WriteData16>
    //----FRAME RATE SETTING-----
    LCD_IO_WriteCmd16(RC(ILI9325_GATE_SCAN_CTRL1)); LCD_IO_WriteData16(RC(ILI9325_GATE_SCAN_CTRL1_DATA));
 800069a:	2060      	movs	r0, #96	; 0x60
 800069c:	f000 fb67 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006a0:	f44f 501c 	mov.w	r0, #9984	; 0x2700
 80006a4:	f000 fb72 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_GATE_SCAN_CTRL2)); LCD_IO_WriteData16(RC(0x0003));
 80006a8:	2061      	movs	r0, #97	; 0x61
 80006aa:	f000 fb60 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006ae:	2003      	movs	r0, #3
 80006b0:	f000 fb6c 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_PANEL_IF_CTRL1)); LCD_IO_WriteData16(RC(0x0029)); /* RTNI setting */
 80006b4:	2090      	movs	r0, #144	; 0x90
 80006b6:	f000 fb5a 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006ba:	2029      	movs	r0, #41	; 0x29
 80006bc:	f000 fb66 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_Delay(5);
 80006c0:	2005      	movs	r0, #5
 80006c2:	f000 fb37 	bl	8000d34 <LCD_Delay>

    //------DISPLAY ON------
    LCD_IO_WriteCmd16(RC(ILI9325_FRM_RATE_COL_CTRL)); LCD_IO_WriteData16(RC(0x000E)); // 110Hz, hogy ne vibráljon
 80006c6:	202b      	movs	r0, #43	; 0x2b
 80006c8:	f000 fb51 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006cc:	200e      	movs	r0, #14
 80006ce:	f000 fb5d 	bl	8000d8c <LCD_IO_WriteData16>
    LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL1)); LCD_IO_WriteData16(RC(0x0133));
 80006d2:	2007      	movs	r0, #7
 80006d4:	f000 fb4b 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006d8:	f240 1033 	movw	r0, #307	; 0x133
 80006dc:	f000 fb56 	bl	8000d8c <LCD_IO_WriteData16>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000280 	.word	0x20000280

080006e8 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  ILI9325_LCDMUTEX_PUSH();

  /* Power On sequence -------------------------------------------------------*/
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x0000)); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80006ec:	2010      	movs	r0, #16
 80006ee:	f000 fb3e 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 fb4a 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0000)); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80006f8:	2011      	movs	r0, #17
 80006fa:	f000 fb38 	bl	8000d6e <LCD_IO_WriteCmd16>
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fb44 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x0000)); /* VREG1OUT voltage */
 8000704:	2012      	movs	r0, #18
 8000706:	f000 fb32 	bl	8000d6e <LCD_IO_WriteCmd16>
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fb3e 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0000)); /* VDV[4:0] for VCOM amplitude*/
 8000710:	2013      	movs	r0, #19
 8000712:	f000 fb2c 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fb38 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f000 fb09 	bl	8000d34 <LCD_Delay>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x14B0));
 8000722:	2010      	movs	r0, #16
 8000724:	f000 fb23 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000728:	f241 40b0 	movw	r0, #5296	; 0x14b0
 800072c:	f000 fb2e 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0007));
 8000730:	2011      	movs	r0, #17
 8000732:	f000 fb1c 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000736:	2007      	movs	r0, #7
 8000738:	f000 fb28 	bl	8000d8c <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x008E)); /* VREG1OUT voltage */
 800073c:	2012      	movs	r0, #18
 800073e:	f000 fb16 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000742:	208e      	movs	r0, #142	; 0x8e
 8000744:	f000 fb22 	bl	8000d8c <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0C00));
 8000748:	2013      	movs	r0, #19
 800074a:	f000 fb10 	bl	8000d6e <LCD_IO_WriteCmd16>
 800074e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000752:	f000 fb1b 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL7)); LCD_IO_WriteData16(RC(0x0015));
 8000756:	2029      	movs	r0, #41	; 0x29
 8000758:	f000 fb09 	bl	8000d6e <LCD_IO_WriteCmd16>
 800075c:	2015      	movs	r0, #21
 800075e:	f000 fb15 	bl	8000d8c <LCD_IO_WriteData16>

  /* Display On */
  LCD_IO_WriteCmd16(RC(ILI9325_FRM_RATE_COL_CTRL)); LCD_IO_WriteData16(RC(0x000E)); // 110Hz, hogy ne vibráljon
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f000 fb03 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000768:	200e      	movs	r0, #14
 800076a:	f000 fb0f 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL1)); LCD_IO_WriteData16(RC(0x0133)); /* display ON */
 800076e:	2007      	movs	r0, #7
 8000770:	f000 fafd 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000774:	f240 1033 	movw	r0, #307	; 0x133
 8000778:	f000 fb08 	bl	8000d8c <LCD_IO_WriteData16>

  LCD_IO_Bl_OnOff(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fae4 	bl	8000d4a <LCD_IO_Bl_OnOff>

  ILI9325_LCDMUTEX_POP();
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}

08000786 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  ILI9325_LCDMUTEX_PUSH();

  /* Power Off sequence ------------------------------------------------------*/
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL1)); LCD_IO_WriteData16(RC(0x0000)); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800078a:	2010      	movs	r0, #16
 800078c:	f000 faef 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fafb 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL2)); LCD_IO_WriteData16(RC(0x0000)); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8000796:	2011      	movs	r0, #17
 8000798:	f000 fae9 	bl	8000d6e <LCD_IO_WriteCmd16>
 800079c:	2000      	movs	r0, #0
 800079e:	f000 faf5 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL3)); LCD_IO_WriteData16(RC(0x0000)); /* VREG1OUT voltage */
 80007a2:	2012      	movs	r0, #18
 80007a4:	f000 fae3 	bl	8000d6e <LCD_IO_WriteCmd16>
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 faef 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL4)); LCD_IO_WriteData16(RC(0x0000)); /* VDV[4:0] for VCOM amplitude*/
 80007ae:	2013      	movs	r0, #19
 80007b0:	f000 fadd 	bl	8000d6e <LCD_IO_WriteCmd16>
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fae9 	bl	8000d8c <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_POW_CTRL7)); LCD_IO_WriteData16(RC(0x0000)); /* VCM[4:0] for VCOMH */
 80007ba:	2029      	movs	r0, #41	; 0x29
 80007bc:	f000 fad7 	bl	8000d6e <LCD_IO_WriteCmd16>
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fae3 	bl	8000d8c <LCD_IO_WriteData16>
  
  /* Display Off */
  LCD_IO_WriteCmd16(RC(ILI9325_DISP_CTRL1)); LCD_IO_WriteData16(RC(0x0));
 80007c6:	2007      	movs	r0, #7
 80007c8:	f000 fad1 	bl	8000d6e <LCD_IO_WriteCmd16>
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 fadd 	bl	8000d8c <LCD_IO_WriteData16>

  LCD_IO_Bl_OnOff(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fab9 	bl	8000d4a <LCD_IO_Bl_OnOff>

  ILI9325_LCDMUTEX_POP();
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  #if ((ILI9325_ORIENTATION == 0) || (ILI9325_ORIENTATION == 2))
  return (uint16_t)ILI9325_LCD_PIXEL_WIDTH;
  #else
  return (uint16_t)ILI9325_LCD_PIXEL_HEIGHT;
 80007e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
  #endif
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  #if ((ILI9325_ORIENTATION == 0) || (ILI9325_ORIENTATION == 2))
  return (uint16_t)ILI9325_LCD_PIXEL_HEIGHT;
  #else
  return (uint16_t)ILI9325_LCD_PIXEL_WIDTH;
 80007f2:	23f0      	movs	r3, #240	; 0xf0
  #endif
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID
  */
uint16_t ili9325_ReadID(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  uint16_t ret;
  ILI9325_LCDMUTEX_PUSH();

  if(Is_ili9325_Initialized == 0)
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <ili9325_ReadID+0x28>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <ili9325_ReadID+0x12>
  {
    ili9325_Init();
 800080e:	f7ff fe5b 	bl	80004c8 <ili9325_Init>
  }
  LCD_IO_ReadCmd16MultipleData16(RC(0x00), &ret, 1, 2);
 8000812:	1db9      	adds	r1, r7, #6
 8000814:	2302      	movs	r3, #2
 8000816:	2201      	movs	r2, #1
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fb09 	bl	8000e30 <LCD_IO_ReadCmd16MultipleData16>

  ILI9325_LCDMUTEX_POP();

  return RD(ret);
 800081e:	88fb      	ldrh	r3, [r7, #6]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000280 	.word	0x20000280

0800082c <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	80bb      	strh	r3, [r7, #4]
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 800083c:	2020      	movs	r0, #32
 800083e:	f000 fa96 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 faa1 	bl	8000d8c <LCD_IO_WriteData16>
 800084a:	2021      	movs	r0, #33	; 0x21
 800084c:	f000 fa8f 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fa9a 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	460b      	mov	r3, r1
 800086c:	80bb      	strh	r3, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	807b      	strh	r3, [r7, #2]
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000872:	2020      	movs	r0, #32
 8000874:	f000 fa7b 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fa86 	bl	8000d8c <LCD_IO_WriteData16>
 8000880:	2021      	movs	r0, #33	; 0x21
 8000882:	f000 fa74 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa7f 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_RW_GRAM)); LCD_IO_WriteData16(RGBCode);
 800088e:	2022      	movs	r0, #34	; 0x22
 8000890:	f000 fa6d 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa78 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	80fb      	strh	r3, [r7, #6]
 80008b0:	4613      	mov	r3, r2
 80008b2:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 80008b4:	2020      	movs	r0, #32
 80008b6:	f000 fa5a 	bl	8000d6e <LCD_IO_WriteCmd16>
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa65 	bl	8000d8c <LCD_IO_WriteData16>
 80008c2:	2021      	movs	r0, #33	; 0x21
 80008c4:	f000 fa53 	bl	8000d6e <LCD_IO_WriteCmd16>
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa5e 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_ReadCmd16MultipleData16(RC(ILI9325_RW_GRAM), &ret, 1, 2);
 80008d0:	f107 010e 	add.w	r1, r7, #14
 80008d4:	2302      	movs	r3, #2
 80008d6:	2201      	movs	r2, #1
 80008d8:	2022      	movs	r0, #34	; 0x22
 80008da:	f000 faa9 	bl	8000e30 <LCD_IO_ReadCmd16MultipleData16>
  ILI9325_LCDMUTEX_POP();
  return ret;
 80008de:	89fb      	ldrh	r3, [r7, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4603      	mov	r3, r0
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	807b      	strh	r3, [r7, #2]
 8000902:	4613      	mov	r3, r2
 8000904:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RD(Xpos));
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RD(Xpos + Width - 1));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RD(Ypos));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RD(Ypos + Height - 1));
  #elif (ILI9325_ORIENTATION == 1) || (ILI9325_ORIENTATION == 3)
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RD(Ypos));
 8000906:	2050      	movs	r0, #80	; 0x50
 8000908:	f000 fa31 	bl	8000d6e <LCD_IO_WriteCmd16>
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fa3c 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RD(Ypos + Height - 1));
 8000914:	2051      	movs	r0, #81	; 0x51
 8000916:	f000 fa2a 	bl	8000d6e <LCD_IO_WriteCmd16>
 800091a:	88ba      	ldrh	r2, [r7, #4]
 800091c:	883b      	ldrh	r3, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fa30 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RD(Xpos));
 800092c:	2052      	movs	r0, #82	; 0x52
 800092e:	f000 fa1e 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fa29 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RD(Xpos + Width - 1));
 800093a:	2053      	movs	r0, #83	; 0x53
 800093c:	f000 fa17 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000940:	88fa      	ldrh	r2, [r7, #6]
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fa1d 	bl	8000d8c <LCD_IO_WriteData16>
  #endif

  ILI9325_LCDMUTEX_POP();
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bd90      	pop	{r4, r7, pc}

0800095a <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800095a:	b590      	push	{r4, r7, lr}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	461a      	mov	r2, r3
 8000968:	4623      	mov	r3, r4
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	4603      	mov	r3, r0
 800096e:	80bb      	strh	r3, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000978:	2020      	movs	r0, #32
 800097a:	f000 f9f8 	bl	8000d6e <LCD_IO_WriteCmd16>
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fa03 	bl	8000d8c <LCD_IO_WriteData16>
 8000986:	2021      	movs	r0, #33	; 0x21
 8000988:	f000 f9f1 	bl	8000d6e <LCD_IO_WriteCmd16>
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f9fc 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16DataFill16(RC(ILI9325_RW_GRAM), RGBCode, Length);
 8000994:	883a      	ldrh	r2, [r7, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	4619      	mov	r1, r3
 800099a:	2022      	movs	r0, #34	; 0x22
 800099c:	f000 fa06 	bl	8000dac <LCD_IO_WriteCmd16DataFill16>
  ILI9325_LCDMUTEX_POP();
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	80fb      	strh	r3, [r7, #6]
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_DOWN_THEN_RIGHT));
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 f9d1 	bl	8000d6e <LCD_IO_WriteCmd16>
 80009cc:	f241 0030 	movw	r0, #4144	; 0x1030
 80009d0:	f000 f9dc 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_SETCURSOR(Xpos, Ypos);
 80009d4:	2020      	movs	r0, #32
 80009d6:	f000 f9ca 	bl	8000d6e <LCD_IO_WriteCmd16>
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f9d5 	bl	8000d8c <LCD_IO_WriteData16>
 80009e2:	2021      	movs	r0, #33	; 0x21
 80009e4:	f000 f9c3 	bl	8000d6e <LCD_IO_WriteCmd16>
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f9ce 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16DataFill16(RC(ILI9325_RW_GRAM), RGBCode, Length);
 80009f0:	883a      	ldrh	r2, [r7, #0]
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2022      	movs	r0, #34	; 0x22
 80009f8:	f000 f9d8 	bl	8000dac <LCD_IO_WriteCmd16DataFill16>
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_DOWN));
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f9b6 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a02:	f241 0038 	movw	r0, #4152	; 0x1038
 8000a06:	f000 f9c1 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}

08000a12 <ili9325_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9325_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000a12:	b590      	push	{r4, r7, lr}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4604      	mov	r4, r0
 8000a1a:	4608      	mov	r0, r1
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4623      	mov	r3, r4
 8000a22:	80fb      	strh	r3, [r7, #6]
 8000a24:	4603      	mov	r3, r0
 8000a26:	80bb      	strh	r3, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  ili9325_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000a30:	883b      	ldrh	r3, [r7, #0]
 8000a32:	887a      	ldrh	r2, [r7, #2]
 8000a34:	88b9      	ldrh	r1, [r7, #4]
 8000a36:	88f8      	ldrh	r0, [r7, #6]
 8000a38:	f7ff ff56 	bl	80008e8 <ili9325_SetDisplayWindow>
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f000 f996 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f9a1 	bl	8000d8c <LCD_IO_WriteData16>
 8000a4a:	2021      	movs	r0, #33	; 0x21
 8000a4c:	f000 f98f 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f99a 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16DataFill16(RC(ILI9325_RW_GRAM), RGBCode, Xsize * Ysize);
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	883a      	ldrh	r2, [r7, #0]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	8b3b      	ldrh	r3, [r7, #24]
 8000a64:	4619      	mov	r1, r3
 8000a66:	2022      	movs	r0, #34	; 0x22
 8000a68:	f000 f9a0 	bl	8000dac <LCD_IO_WriteCmd16DataFill16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000a6c:	2050      	movs	r0, #80	; 0x50
 8000a6e:	f000 f97e 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f98a 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
 8000a78:	2051      	movs	r0, #81	; 0x51
 8000a7a:	f000 f978 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a7e:	20ef      	movs	r0, #239	; 0xef
 8000a80:	f000 f984 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000a84:	2052      	movs	r0, #82	; 0x52
 8000a86:	f000 f972 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f97e 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
 8000a90:	2053      	movs	r0, #83	; 0x53
 8000a92:	f000 f96c 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000a96:	f240 103f 	movw	r0, #319	; 0x13f
 8000a9a:	f000 f977 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}

08000aa6 <ili9325_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	603a      	str	r2, [r7, #0]
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3316      	adds	r3, #22
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3317      	adds	r3, #23
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	3b01      	subs	r3, #1
 8000ade:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3304      	adds	r3, #4
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	461a      	mov	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	330a      	adds	r3, #10
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	041b      	lsls	r3, r3, #16
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
  size = (size - index) / 2;
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	085b      	lsrs	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	603b      	str	r3, [r7, #0]

  ILI9325_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_UP));
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f000 f91f 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b30:	f241 0028 	movw	r0, #4136	; 0x1028
 8000b34:	f000 f92a 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f000 f918 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f923 	bl	8000d8c <LCD_IO_WriteData16>
 8000b46:	2021      	movs	r0, #33	; 0x21
 8000b48:	f000 f911 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f91c 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16MultipleData16(RC(ILI9325_RW_GRAM), (uint16_t *)pbmp, size);
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	2022      	movs	r0, #34	; 0x22
 8000b5a:	f000 f947 	bl	8000dec <LCD_IO_WriteCmd16MultipleData16>
  LCD_IO_WriteCmd16(RC(ILI9325_ENTRY_MOD)); LCD_IO_WriteData16(RC(ILI9325_ENTRY_DATA_RIGHT_THEN_DOWN));
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f905 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b64:	f241 0038 	movw	r0, #4152	; 0x1038
 8000b68:	f000 f910 	bl	8000d8c <LCD_IO_WriteData16>

  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000b6c:	2050      	movs	r0, #80	; 0x50
 8000b6e:	f000 f8fe 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f90a 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
 8000b78:	2051      	movs	r0, #81	; 0x51
 8000b7a:	f000 f8f8 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b7e:	20ef      	movs	r0, #239	; 0xef
 8000b80:	f000 f904 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000b84:	2052      	movs	r0, #82	; 0x52
 8000b86:	f000 f8f2 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f8fe 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
 8000b90:	2053      	movs	r0, #83	; 0x53
 8000b92:	f000 f8ec 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000b96:	f240 103f 	movw	r0, #319	; 0x13f
 8000b9a:	f000 f8f7 	bl	8000d8c <LCD_IO_WriteData16>

  ILI9325_LCDMUTEX_POP();
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <ili9325_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4604      	mov	r4, r0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	80fb      	strh	r3, [r7, #6]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80bb      	strh	r3, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	803b      	strh	r3, [r7, #0]
  ILI9325_LCDMUTEX_PUSH();
  ili9325_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000bc4:	883b      	ldrh	r3, [r7, #0]
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	88b9      	ldrh	r1, [r7, #4]
 8000bca:	88f8      	ldrh	r0, [r7, #6]
 8000bcc:	f7ff fe8c 	bl	80008e8 <ili9325_SetDisplayWindow>
  ILI9325_SETCURSOR(Xpos, Ypos);
 8000bd0:	2020      	movs	r0, #32
 8000bd2:	f000 f8cc 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f8d7 	bl	8000d8c <LCD_IO_WriteData16>
 8000bde:	2021      	movs	r0, #33	; 0x21
 8000be0:	f000 f8c5 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f8d0 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16MultipleData16(RC(ILI9325_RW_GRAM), pdata, Xsize * Ysize);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	883a      	ldrh	r2, [r7, #0]
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	69b9      	ldr	r1, [r7, #24]
 8000bf8:	2022      	movs	r0, #34	; 0x22
 8000bfa:	f000 f8f7 	bl	8000dec <LCD_IO_WriteCmd16MultipleData16>

  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
 8000bfe:	2050      	movs	r0, #80	; 0x50
 8000c00:	f000 f8b5 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 f8c1 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
 8000c0a:	2051      	movs	r0, #81	; 0x51
 8000c0c:	f000 f8af 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000c10:	20ef      	movs	r0, #239	; 0xef
 8000c12:	f000 f8bb 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
 8000c16:	2052      	movs	r0, #82	; 0x52
 8000c18:	f000 f8a9 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 f8b5 	bl	8000d8c <LCD_IO_WriteData16>
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
 8000c22:	2053      	movs	r0, #83	; 0x53
 8000c24:	f000 f8a3 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000c28:	f240 103f 	movw	r0, #319	; 0x13f
 8000c2c:	f000 f8ae 	bl	8000d8c <LCD_IO_WriteData16>
  ILI9325_LCDMUTEX_POP();
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <ili9325_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9325_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80bb      	strh	r3, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	807b      	strh	r3, [r7, #2]
 8000c52:	4613      	mov	r3, r2
 8000c54:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_START_AD)); LCD_IO_WriteData16(RC(0));
  LCD_IO_WriteCmd16(RC(ILI9325_HOR_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_WIDTH - 1));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_START_AD)); LCD_IO_WriteData16(RC(0));
  LCD_IO_WriteCmd16(RC(ILI9325_VER_END_AD)); LCD_IO_WriteData16(RC(ILI9325_LCD_PIXEL_HEIGHT - 1));
  #else
  for(uint16_t yp = Ypos; yp < Ypos + Ysize; yp++)
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	e025      	b.n	8000ca8 <ili9325_ReadRGBImage+0x70>
    for(uint16_t xp = Xpos; xp < Xpos + Xsize; xp++)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	81bb      	strh	r3, [r7, #12]
 8000c60:	e019      	b.n	8000c96 <ili9325_ReadRGBImage+0x5e>
    {
      ILI9325_SETCURSOR(xp, yp);
 8000c62:	2020      	movs	r0, #32
 8000c64:	f000 f883 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f88e 	bl	8000d8c <LCD_IO_WriteData16>
 8000c70:	2021      	movs	r0, #33	; 0x21
 8000c72:	f000 f87c 	bl	8000d6e <LCD_IO_WriteCmd16>
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f887 	bl	8000d8c <LCD_IO_WriteData16>
      LCD_IO_ReadCmd16MultipleData16(RC(ILI9325_RW_GRAM), pdata, 1, 2);
 8000c7e:	2302      	movs	r3, #2
 8000c80:	2201      	movs	r2, #1
 8000c82:	6a39      	ldr	r1, [r7, #32]
 8000c84:	2022      	movs	r0, #34	; 0x22
 8000c86:	f000 f8d3 	bl	8000e30 <LCD_IO_ReadCmd16MultipleData16>
      pdata++;
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
    for(uint16_t xp = Xpos; xp < Xpos + Xsize; xp++)
 8000c90:	89bb      	ldrh	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	81bb      	strh	r3, [r7, #12]
 8000c96:	89ba      	ldrh	r2, [r7, #12]
 8000c98:	88f9      	ldrh	r1, [r7, #6]
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbdf      	blt.n	8000c62 <ili9325_ReadRGBImage+0x2a>
  for(uint16_t yp = Ypos; yp < Ypos + Ysize; yp++)
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	81fb      	strh	r3, [r7, #14]
 8000ca8:	89fa      	ldrh	r2, [r7, #14]
 8000caa:	88b9      	ldrh	r1, [r7, #4]
 8000cac:	883b      	ldrh	r3, [r7, #0]
 8000cae:	440b      	add	r3, r1
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbd3      	blt.n	8000c5c <ili9325_ReadRGBImage+0x24>
    }
  #endif
  ILI9325_LCDMUTEX_POP();
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
	...

08000cc0 <ili9325_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9325_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{ /* Only full screen scrolling is possible */
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	80bb      	strh	r3, [r7, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	807b      	strh	r3, [r7, #2]
  static uint16_t scrparam;
  Scroll = (0 - Scroll) % ILI9325_LCD_PIXEL_HEIGHT;
 8000cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd6:	425a      	negs	r2, r3
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <ili9325_Scroll+0x6c>)
 8000cda:	fb83 1302 	smull	r1, r3, r3, r2
 8000cde:	11d9      	asrs	r1, r3, #7
 8000ce0:	17d3      	asrs	r3, r2, #31
 8000ce2:	1ac9      	subs	r1, r1, r3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	019b      	lsls	r3, r3, #6
 8000cec:	1ad1      	subs	r1, r2, r3
 8000cee:	460b      	mov	r3, r1
 8000cf0:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	da04      	bge.n	8000d04 <ili9325_Scroll+0x44>
    Scroll += ILI9325_LCD_PIXEL_HEIGHT;
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	80fb      	strh	r3, [r7, #6]
  if(Scroll != scrparam)
 8000d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <ili9325_Scroll+0x70>)
 8000d0a:	8812      	ldrh	r2, [r2, #0]
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d009      	beq.n	8000d24 <ili9325_Scroll+0x64>
  {
    scrparam = Scroll;
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <ili9325_Scroll+0x70>)
 8000d14:	801a      	strh	r2, [r3, #0]
    ILI9325_LCDMUTEX_PUSH();
    LCD_IO_WriteCmd16DataFill16(ILI9325_GATE_SCAN_CTRL3, scrparam, 1);
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <ili9325_Scroll+0x70>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	206a      	movs	r0, #106	; 0x6a
 8000d20:	f000 f844 	bl	8000dac <LCD_IO_WriteCmd16DataFill16>
    ILI9325_LCDMUTEX_POP();
  }
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	66666667 	.word	0x66666667
 8000d30:	20000282 	.word	0x20000282

08000d34 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 f93d 	bl	8002fbc <HAL_Delay>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  LCD_Delay(1);
  LCD_RST_ON;
  LCD_Delay(1);
  LCD_RST_OFF;
  #endif
  LCD_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff ffe5 	bl	8000d34 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <LCD_IO_WriteCmd16>:
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd16(uint16_t Cmd)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
 8000d78:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	8013      	strh	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <LCD_IO_WriteData16>:
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <LCD_IO_WriteData16+0x1c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	8013      	strh	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	600ffffe 	.word	0x600ffffe

08000dac <LCD_IO_WriteCmd16DataFill16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd16DataFill16(uint16_t Cmd, uint16_t Data, uint32_t Size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	603a      	str	r2, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
 8000db8:	460b      	mov	r3, r1
 8000dba:	80bb      	strh	r3, [r7, #4]
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
 8000dbc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	8013      	strh	r3, [r2, #0]
  uint16_t d = RD(Data);
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	81fb      	strh	r3, [r7, #14]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000dc8:	e002      	b.n	8000dd0 <LCD_IO_WriteCmd16DataFill16+0x24>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <LCD_IO_WriteCmd16DataFill16+0x3c>)
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	1e5a      	subs	r2, r3, #1
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f7      	bne.n	8000dca <LCD_IO_WriteCmd16DataFill16+0x1e>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	600ffffe 	.word	0x600ffffe

08000dec <LCD_IO_WriteCmd16MultipleData16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	81fb      	strh	r3, [r7, #14]
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
 8000dfa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000dfe:	89fb      	ldrh	r3, [r7, #14]
 8000e00:	8013      	strh	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 0
  while(Size--)
 8000e02:	e006      	b.n	8000e12 <LCD_IO_WriteCmd16MultipleData16+0x26>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = RD(*pData);
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <LCD_IO_WriteCmd16MultipleData16+0x40>)
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	8013      	strh	r3, [r2, #0]
    pData++;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f3      	bne.n	8000e04 <LCD_IO_WriteCmd16MultipleData16+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 1);
  #endif
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	600ffffe 	.word	0x600ffffe

08000e30 <LCD_IO_ReadCmd16MultipleData16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd16MultipleData16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	81fb      	strh	r3, [r7, #14]
  #pragma GCC diagnostic pop
  #elif   defined(__CC_ARM)
  uint8_t DummyData;
  #endif

  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
 8000e40:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	8013      	strh	r3, [r2, #0]

  while(DummySize--)
 8000e48:	e002      	b.n	8000e50 <LCD_IO_ReadCmd16MultipleData16+0x20>
    DummyData = *(volatile uint8_t *)LCD_ADDR_DATA;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <LCD_IO_ReadCmd16MultipleData16+0x58>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	75fb      	strb	r3, [r7, #23]
  while(DummySize--)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	603a      	str	r2, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f7      	bne.n	8000e4a <LCD_IO_ReadCmd16MultipleData16+0x1a>

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 0
  while(Size)
 8000e5a:	e00a      	b.n	8000e72 <LCD_IO_ReadCmd16MultipleData16+0x42>
  {
    *pData = RD(*(volatile uint16_t *)LCD_ADDR_DATA);
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <LCD_IO_ReadCmd16MultipleData16+0x58>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	801a      	strh	r2, [r3, #0]
    pData++;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3302      	adds	r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
    Size--;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
  while(Size)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f1      	bne.n	8000e5c <LCD_IO_ReadCmd16MultipleData16+0x2c>
  }

  #else
  LCD_FSMC_DMA(LCD_ADDR_DATA, pData, 0, 1, Size, 1);
  #endif
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	600ffffe 	.word	0x600ffffe

08000e8c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <BSP_LCD_Init+0x34>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <BSP_LCD_Init+0x38>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <BSP_LCD_Init+0x38>)
 8000ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eaa:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <BSP_LCD_Init+0x38>)
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <BSP_LCD_Init+0x3c>)
 8000eb0:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000054 	.word	0x20000054
 8000ec4:	20017d38 	.word	0x20017d38
 8000ec8:	20000008 	.word	0x20000008

08000ecc <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <BSP_LCD_GetXSize+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	4798      	blx	r3
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000054 	.word	0x20000054

08000ee4 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <BSP_LCD_GetYSize+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	4798      	blx	r3
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000054 	.word	0x20000054

08000efc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <BSP_LCD_SetTextColor+0x1c>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	20017d38 	.word	0x20017d38

08000f1c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <BSP_LCD_SetBackColor+0x1c>)
 8000f2a:	6053      	str	r3, [r2, #4]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20017d38 	.word	0x20017d38

08000f3c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <BSP_LCD_SetFont+0x1c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6093      	str	r3, [r2, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20017d38 	.word	0x20017d38

08000f5c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <BSP_LCD_Clear+0x38>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000f6c:	f7ff ffae 	bl	8000ecc <BSP_LCD_GetXSize>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461d      	mov	r5, r3
 8000f74:	f7ff ffb6 	bl	8000ee4 <BSP_LCD_GetYSize>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	462a      	mov	r2, r5
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	47a0      	blx	r4
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000054 	.word	0x20000054

08000f98 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	80bb      	strh	r3, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <BSP_LCD_DisplayChar+0x50>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <BSP_LCD_DisplayChar+0x50>)
 8000fb6:	6889      	ldr	r1, [r1, #8]
 8000fb8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8000fba:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <BSP_LCD_DisplayChar+0x50>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	889b      	ldrh	r3, [r3, #4]
 8000fc4:	3307      	adds	r3, #7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da00      	bge.n	8000fcc <BSP_LCD_DisplayChar+0x34>
 8000fca:	3307      	adds	r3, #7
 8000fcc:	10db      	asrs	r3, r3, #3
 8000fce:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8000fd2:	441a      	add	r2, r3
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9d9 	bl	8001390 <DrawChar>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20017d38 	.word	0x20017d38

08000fec <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	81bb      	strh	r3, [r7, #12]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001002:	2301      	movs	r3, #1
 8001004:	83fb      	strh	r3, [r7, #30]
 8001006:	2300      	movs	r3, #0
 8001008:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001016:	e002      	b.n	800101e <BSP_LCD_DisplayStringAt+0x32>
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	3301      	adds	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	617a      	str	r2, [r7, #20]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f6      	bne.n	8001018 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800102a:	f7ff ff4f 	bl	8000ecc <BSP_LCD_GetXSize>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <BSP_LCD_DisplayStringAt+0x118>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d013      	beq.n	800106e <BSP_LCD_DisplayStringAt+0x82>
 8001046:	2b03      	cmp	r3, #3
 8001048:	dc20      	bgt.n	800108c <BSP_LCD_DisplayStringAt+0xa0>
 800104a:	2b01      	cmp	r3, #1
 800104c:	d002      	beq.n	8001054 <BSP_LCD_DisplayStringAt+0x68>
 800104e:	2b02      	cmp	r3, #2
 8001050:	d010      	beq.n	8001074 <BSP_LCD_DisplayStringAt+0x88>
 8001052:	e01b      	b.n	800108c <BSP_LCD_DisplayStringAt+0xa0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos - (size * DrawProp.pFont->Width) / 2;
 8001054:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <BSP_LCD_DisplayStringAt+0x118>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	461a      	mov	r2, r3
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fb03 f302 	mul.w	r3, r3, r2
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	89fa      	ldrh	r2, [r7, #14]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	83fb      	strh	r3, [r7, #30]
      break;
 800106c:	e011      	b.n	8001092 <BSP_LCD_DisplayStringAt+0xa6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	83fb      	strh	r3, [r7, #30]
      break;
 8001072:	e00e      	b.n	8001092 <BSP_LCD_DisplayStringAt+0xa6>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + (size * DrawProp.pFont->Width);
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <BSP_LCD_DisplayStringAt+0x118>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	889a      	ldrh	r2, [r3, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	b29b      	uxth	r3, r3
 800107e:	fb12 f303 	smulbb	r3, r2, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	83fb      	strh	r3, [r7, #30]
      break;
 800108a:	e002      	b.n	8001092 <BSP_LCD_DisplayStringAt+0xa6>
    }    
  default:
    {
      refcolumn = Xpos;
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	83fb      	strh	r3, [r7, #30]
      break;
 8001090:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001092:	e012      	b.n	80010ba <BSP_LCD_DisplayStringAt+0xce>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	89b9      	ldrh	r1, [r7, #12]
 800109a:	8bfb      	ldrh	r3, [r7, #30]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff7b 	bl	8000f98 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <BSP_LCD_DisplayStringAt+0x118>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	889a      	ldrh	r2, [r3, #4]
 80010a8:	8bfb      	ldrh	r3, [r7, #30]
 80010aa:	4413      	add	r3, r2
 80010ac:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
    i++;
 80010b4:	8bbb      	ldrh	r3, [r7, #28]
 80010b6:	3301      	adds	r3, #1
 80010b8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2dc      	uxtb	r4, r3
 80010c8:	f7ff ff00 	bl	8000ecc <BSP_LCD_GetXSize>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4619      	mov	r1, r3
 80010d0:	8bbb      	ldrh	r3, [r7, #28]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <BSP_LCD_DisplayStringAt+0x118>)
 80010d4:	6892      	ldr	r2, [r2, #8]
 80010d6:	8892      	ldrh	r2, [r2, #4]
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	1acb      	subs	r3, r1, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4a08      	ldr	r2, [pc, #32]	; (8001104 <BSP_LCD_DisplayStringAt+0x118>)
 80010e2:	6892      	ldr	r2, [r2, #8]
 80010e4:	8892      	ldrh	r2, [r2, #4]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	bfac      	ite	ge
 80010ea:	2301      	movge	r3, #1
 80010ec:	2300      	movlt	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4023      	ands	r3, r4
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1cd      	bne.n	8001094 <BSP_LCD_DisplayStringAt+0xa8>
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	20017d38 	.word	0x20017d38

08001108 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	460b      	mov	r3, r1
 8001114:	80bb      	strh	r3, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <BSP_LCD_DrawPixel+0x34>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <BSP_LCD_DrawPixel+0x34>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	88b9      	ldrh	r1, [r7, #4]
 800112e:	88f8      	ldrh	r0, [r7, #6]
 8001130:	4798      	blx	r3
  }
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000054 	.word	0x20000054

08001140 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	80bb      	strh	r3, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <BSP_LCD_DrawHLine+0x6c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00a      	beq.n	8001176 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <BSP_LCD_DrawHLine+0x6c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a1c      	ldr	r4, [r3, #32]
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <BSP_LCD_DrawHLine+0x70>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b298      	uxth	r0, r3
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	88ba      	ldrh	r2, [r7, #4]
 8001170:	88f9      	ldrh	r1, [r7, #6]
 8001172:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8001174:	e015      	b.n	80011a2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e00e      	b.n	800119a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b29a      	uxth	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4413      	add	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <BSP_LCD_DrawHLine+0x70>)
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	b292      	uxth	r2, r2
 800118c:	88b9      	ldrh	r1, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffba 	bl	8001108 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3ec      	bcc.n	800117c <BSP_LCD_DrawHLine+0x3c>
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000054 	.word	0x20000054
 80011b0:	20017d38 	.word	0x20017d38

080011b4 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
 80011be:	460b      	mov	r3, r1
 80011c0:	80bb      	strh	r3, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <BSP_LCD_DrawVLine+0x6c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00a      	beq.n	80011ea <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <BSP_LCD_DrawVLine+0x6c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <BSP_LCD_DrawVLine+0x70>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b298      	uxth	r0, r3
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	88ba      	ldrh	r2, [r7, #4]
 80011e4:	88f9      	ldrh	r1, [r7, #6]
 80011e6:	47a0      	blx	r4
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);

    }
  }
}
 80011e8:	e015      	b.n	8001216 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e00e      	b.n	800120e <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	b299      	uxth	r1, r3
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <BSP_LCD_DrawVLine+0x70>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff80 	bl	8001108 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	429a      	cmp	r2, r3
 8001214:	d3ec      	bcc.n	80011f0 <BSP_LCD_DrawVLine+0x3c>
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	20000054 	.word	0x20000054
 8001224:	20017d38 	.word	0x20017d38

08001228 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	4603      	mov	r3, r0
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
 8001242:	4613      	mov	r3, r2
 8001244:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	88b9      	ldrh	r1, [r7, #4]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff77 	bl	8001140 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 8001252:	88ba      	ldrh	r2, [r7, #4]
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	b299      	uxth	r1, r3
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff6c 	bl	8001140 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001268:	883a      	ldrh	r2, [r7, #0]
 800126a:	88b9      	ldrh	r1, [r7, #4]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffa0 	bl	80011b4 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8001274:	88fa      	ldrh	r2, [r7, #6]
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	4413      	add	r3, r2
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29b      	uxth	r3, r3
 8001280:	883a      	ldrh	r2, [r7, #0]
 8001282:	88b9      	ldrh	r1, [r7, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff95 	bl	80011b4 <BSP_LCD_DrawVLine>
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
	...

08001294 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	603a      	str	r2, [r7, #0]
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	460b      	mov	r3, r1
 80012a2:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3312      	adds	r3, #18
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3313      	adds	r3, #19
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	441a      	add	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3314      	adds	r3, #20
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	441a      	add	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3315      	adds	r3, #21
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	061b      	lsls	r3, r3, #24
 80012d0:	4413      	add	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3316      	adds	r3, #22
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3317      	adds	r3, #23
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	441a      	add	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	3318      	adds	r3, #24
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	441a      	add	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3319      	adds	r3, #25
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	061b      	lsls	r3, r3, #24
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	b29b      	uxth	r3, r3
 8001304:	88b9      	ldrh	r1, [r7, #4]
 8001306:	88f8      	ldrh	r0, [r7, #6]
 8001308:	f000 f934 	bl	8001574 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <BSP_LCD_DrawBitmap+0xb0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <BSP_LCD_DrawBitmap+0xb0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001324:	f7ff fdd2 	bl	8000ecc <BSP_LCD_GetXSize>
 8001328:	4603      	mov	r3, r0
 800132a:	461c      	mov	r4, r3
 800132c:	f7ff fdda 	bl	8000ee4 <BSP_LCD_GetYSize>
 8001330:	4603      	mov	r3, r0
 8001332:	4622      	mov	r2, r4
 8001334:	2100      	movs	r1, #0
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f91c 	bl	8001574 <SetDisplayWindow>
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	20000054 	.word	0x20000054

08001348 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	80fb      	strh	r3, [r7, #6]
 800135a:	4603      	mov	r3, r0
 800135c:	80bb      	strh	r3, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	807b      	strh	r3, [r7, #2]
 8001362:	4613      	mov	r3, r2
 8001364:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <BSP_LCD_FillRect+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <BSP_LCD_FillRect+0x44>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	883d      	ldrh	r5, [r7, #0]
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	88b9      	ldrh	r1, [r7, #4]
 8001378:	88f8      	ldrh	r0, [r7, #6]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	462b      	mov	r3, r5
 800137e:	47a0      	blx	r4
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	20000054 	.word	0x20000054
 800138c:	20017d38 	.word	0x20017d38

08001390 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	80fb      	strh	r3, [r7, #6]
 800139c:	460b      	mov	r3, r1
 800139e:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	82fb      	strh	r3, [r7, #22]
 80013b0:	2300      	movs	r3, #0
 80013b2:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 80013c0:	4b63      	ldr	r3, [pc, #396]	; (8001550 <DrawChar+0x1c0>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	88db      	ldrh	r3, [r3, #6]
 80013c6:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <DrawChar+0x1c0>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80013d0:	8afa      	ldrh	r2, [r7, #22]
 80013d2:	8abb      	ldrh	r3, [r7, #20]
 80013d4:	fb12 f303 	smulbb	r3, r2, r3
 80013d8:	b29b      	uxth	r3, r3
 80013da:	331b      	adds	r3, #27
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4a5d      	ldr	r2, [pc, #372]	; (8001554 <DrawChar+0x1c4>)
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	8aba      	ldrh	r2, [r7, #20]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	331b      	adds	r3, #27
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	141a      	asrs	r2, r3, #16
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <DrawChar+0x1c8>)
 80013f6:	b292      	uxth	r2, r2
 80013f8:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80013fa:	4b58      	ldr	r3, [pc, #352]	; (800155c <DrawChar+0x1cc>)
 80013fc:	2236      	movs	r2, #54	; 0x36
 80013fe:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <DrawChar+0x1d0>)
 8001402:	8abb      	ldrh	r3, [r7, #20]
 8001404:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8001406:	8abb      	ldrh	r3, [r7, #20]
 8001408:	141a      	asrs	r2, r3, #16
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <DrawChar+0x1d4>)
 800140c:	b292      	uxth	r2, r2
 800140e:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <DrawChar+0x1d8>)
 8001412:	8afb      	ldrh	r3, [r7, #22]
 8001414:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8001416:	8afb      	ldrh	r3, [r7, #22]
 8001418:	141a      	asrs	r2, r3, #16
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <DrawChar+0x1dc>)
 800141c:	b292      	uxth	r2, r2
 800141e:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8001420:	8abb      	ldrh	r3, [r7, #20]
 8001422:	3307      	adds	r3, #7
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <DrawChar+0x9a>
 8001428:	3307      	adds	r3, #7
 800142a:	10db      	asrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	8abb      	ldrh	r3, [r7, #20]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	e078      	b.n	8001532 <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8001440:	8abb      	ldrh	r3, [r7, #20]
 8001442:	3307      	adds	r3, #7
 8001444:	2b00      	cmp	r3, #0
 8001446:	da00      	bge.n	800144a <DrawChar+0xba>
 8001448:	3307      	adds	r3, #7
 800144a:	10db      	asrs	r3, r3, #3
 800144c:	461a      	mov	r2, r3
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	fb03 f302 	mul.w	r3, r3, r2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 800145a:	8abb      	ldrh	r3, [r7, #20]
 800145c:	3b11      	subs	r3, #17
 800145e:	2b07      	cmp	r3, #7
 8001460:	d80c      	bhi.n	800147c <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	041a      	lsls	r2, r3, #16
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	4313      	orrs	r3, r2
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	3202      	adds	r2, #2
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	4313      	orrs	r3, r2
 800147a:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 800147c:	8abb      	ldrh	r3, [r7, #20]
 800147e:	3b09      	subs	r3, #9
 8001480:	2b07      	cmp	r3, #7
 8001482:	d807      	bhi.n	8001494 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	3201      	adds	r2, #1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8001494:	8abb      	ldrh	r3, [r7, #20]
 8001496:	3b01      	subs	r3, #1
 8001498:	2b07      	cmp	r3, #7
 800149a:	d802      	bhi.n	80014a2 <DrawChar+0x112>
    {
      line =  pchar[0];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	e03d      	b.n	8001524 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 80014a8:	8afa      	ldrh	r2, [r7, #22]
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	8aba      	ldrh	r2, [r7, #20]
 80014b2:	fb02 f203 	mul.w	r2, r2, r3
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	4413      	add	r3, r2
 80014ba:	331b      	adds	r3, #27
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80014c0:	8aba      	ldrh	r2, [r7, #20]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	1ad2      	subs	r2, r2, r3
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	4413      	add	r3, r2
 80014ca:	3b01      	subs	r3, #1
 80014cc:	2201      	movs	r2, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d010      	beq.n	80014fe <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <DrawChar+0x1c0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <DrawChar+0x1e0>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <DrawChar+0x1c0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0a1a      	lsrs	r2, r3, #8
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2d1      	uxtb	r1, r2
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <DrawChar+0x1e0>)
 80014fa:	54d1      	strb	r1, [r2, r3]
 80014fc:	e00f      	b.n	800151e <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <DrawChar+0x1c0>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	b2d9      	uxtb	r1, r3
 8001504:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <DrawChar+0x1e0>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4413      	add	r3, r2
 800150a:	460a      	mov	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <DrawChar+0x1c0>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0a1a      	lsrs	r2, r3, #8
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	3301      	adds	r3, #1
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <DrawChar+0x1e0>)
 800151c:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	3301      	adds	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	8abb      	ldrh	r3, [r7, #20]
 8001526:	6a3a      	ldr	r2, [r7, #32]
 8001528:	429a      	cmp	r2, r3
 800152a:	d3bd      	bcc.n	80014a8 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	3301      	adds	r3, #1
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	8afb      	ldrh	r3, [r7, #22]
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	429a      	cmp	r2, r3
 8001538:	d382      	bcc.n	8001440 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800153a:	88b9      	ldrh	r1, [r7, #4]
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <DrawChar+0x1e0>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fea7 	bl	8001294 <BSP_LCD_DrawBitmap>
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20017d38 	.word	0x20017d38
 8001554:	20000286 	.word	0x20000286
 8001558:	20000288 	.word	0x20000288
 800155c:	2000028e 	.word	0x2000028e
 8001560:	20000296 	.word	0x20000296
 8001564:	20000298 	.word	0x20000298
 8001568:	2000029a 	.word	0x2000029a
 800156c:	2000029c 	.word	0x2000029c
 8001570:	20000284 	.word	0x20000284

08001574 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4603      	mov	r3, r0
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
 800158e:	4613      	mov	r3, r2
 8001590:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <SetDisplayWindow+0x40>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SetDisplayWindow+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69dc      	ldr	r4, [r3, #28]
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	88b9      	ldrh	r1, [r7, #4]
 80015a8:	88f8      	ldrh	r0, [r7, #6]
 80015aa:	47a0      	blx	r4
  }  
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	20000054 	.word	0x20000054

080015b8 <BSP_LCD_DrawRGB16Image>:
  * @param  Height: image height
  * @param  *pData: image data pointer
  * @retval None
  */
void BSP_LCD_DrawRGB16Image(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
 80015be:	4604      	mov	r4, r0
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4623      	mov	r3, r4
 80015c8:	80fb      	strh	r3, [r7, #6]
 80015ca:	4603      	mov	r3, r0
 80015cc:	80bb      	strh	r3, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	807b      	strh	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	803b      	strh	r3, [r7, #0]
  lcd_drv->DrawRGBImage(Xpos, Ypos, Xsize, Ysize, pData);
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <BSP_LCD_DrawRGB16Image+0x3c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80015dc:	883d      	ldrh	r5, [r7, #0]
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	88b9      	ldrh	r1, [r7, #4]
 80015e2:	88f8      	ldrh	r0, [r7, #6]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	462b      	mov	r3, r5
 80015ea:	47a0      	blx	r4
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	20000054 	.word	0x20000054

080015f8 <ADS7843_SendCmd>:
SPI_HandleTypeDef *spi;

/**
 * \brief Send a command to the ADS7843 touch controller.
 */
uint32_t ADS7843_SendCmd(uint8_t cmd, uint16_t *retVal){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
	uint8_t bufferRX[2] = {0};
 8001608:	2300      	movs	r3, #0
 800160a:	81bb      	strh	r3, [r7, #12]
	uint8_t bufferTX[2] = {0};
 800160c:	2300      	movs	r3, #0
 800160e:	813b      	strh	r3, [r7, #8]

	bufferTX[0] = cmd;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <ADS7843_SendCmd+0xdc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <ADS7843_SendCmd+0xe0>)
 800161a:	8811      	ldrh	r1, [r2, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fede 	bl	80053e0 <HAL_GPIO_WritePin>

 	ret = HAL_SPI_Transmit(spi, bufferTX, 1, 10);
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <ADS7843_SendCmd+0xe4>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	230a      	movs	r3, #10
 800162e:	2201      	movs	r2, #1
 8001630:	f006 fd23 	bl	800807a <HAL_SPI_Transmit>
 8001634:	4603      	mov	r3, r0
 8001636:	617b      	str	r3, [r7, #20]

	if(ret != HAL_OK){
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <ADS7843_SendCmd+0x4a>
		return ret;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	e043      	b.n	80016ca <ADS7843_SendCmd+0xd2>
	}

	while(HAL_SPI_GetState(spi) == HAL_SPI_STATE_BUSY);
 8001642:	bf00      	nop
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <ADS7843_SendCmd+0xe4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f007 f905 	bl	8008858 <HAL_SPI_GetState>
 800164e:	4603      	mov	r3, r0
 8001650:	2b02      	cmp	r3, #2
 8001652:	d0f7      	beq.n	8001644 <ADS7843_SendCmd+0x4c>

	for(uint8_t i = 0; i < 2; i++){
 8001654:	2300      	movs	r3, #0
 8001656:	74fb      	strb	r3, [r7, #19]
 8001658:	e01c      	b.n	8001694 <ADS7843_SendCmd+0x9c>
		ret = HAL_SPI_Receive(spi, &bufferRX[i], 1, 10);
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <ADS7843_SendCmd+0xe4>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	7cfb      	ldrb	r3, [r7, #19]
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	18d1      	adds	r1, r2, r3
 8001666:	230a      	movs	r3, #10
 8001668:	2201      	movs	r2, #1
 800166a:	f006 fe42 	bl	80082f2 <HAL_SPI_Receive>
 800166e:	4603      	mov	r3, r0
 8001670:	617b      	str	r3, [r7, #20]

		if(ret != HAL_OK){
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <ADS7843_SendCmd+0x84>
			return ret;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	e026      	b.n	80016ca <ADS7843_SendCmd+0xd2>
		}

		while(HAL_SPI_GetState(spi) == HAL_SPI_STATE_BUSY);
 800167c:	bf00      	nop
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <ADS7843_SendCmd+0xe4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f007 f8e8 	bl	8008858 <HAL_SPI_GetState>
 8001688:	4603      	mov	r3, r0
 800168a:	2b02      	cmp	r3, #2
 800168c:	d0f7      	beq.n	800167e <ADS7843_SendCmd+0x86>
	for(uint8_t i = 0; i < 2; i++){
 800168e:	7cfb      	ldrb	r3, [r7, #19]
 8001690:	3301      	adds	r3, #1
 8001692:	74fb      	strb	r3, [r7, #19]
 8001694:	7cfb      	ldrb	r3, [r7, #19]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d9df      	bls.n	800165a <ADS7843_SendCmd+0x62>
	}

	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <ADS7843_SendCmd+0xdc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <ADS7843_SendCmd+0xe0>)
 80016a0:	8811      	ldrh	r1, [r2, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fe9b 	bl	80053e0 <HAL_GPIO_WritePin>

	uint16_t temp;
	temp = bufferRX[0] << 8;
 80016aa:	7b3b      	ldrb	r3, [r7, #12]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	823b      	strh	r3, [r7, #16]
	temp |= bufferRX[1];
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	8a3b      	ldrh	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	823b      	strh	r3, [r7, #16]
	temp = temp >> 4;
 80016bc:	8a3b      	ldrh	r3, [r7, #16]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	823b      	strh	r3, [r7, #16]

	*retVal = temp;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	8a3a      	ldrh	r2, [r7, #16]
 80016c6:	801a      	strh	r2, [r3, #0]

	return ret;
 80016c8:	697b      	ldr	r3, [r7, #20]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000058 	.word	0x20000058
 80016d8:	2000005c 	.word	0x2000005c
 80016dc:	20017d44 	.word	0x20017d44

080016e0 <ADS7843_Init>:
	*cordX = x;
	*cordY = y;

}

uint32_t ADS7843_Init(SPI_HandleTypeDef *spiPointer, uint16_t dispWidth, uint16_t dispHeight){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	803b      	strh	r3, [r7, #0]
	uint16_t trowAway;
	uint32_t ret;

	calibrated = 1;
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <ADS7843_Init+0xb8>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]

	//width = dispWidth;
	//height = dispHeight;

	if(calibX[1] > calibX[0]){
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <ADS7843_Init+0xbc>)
 80016f8:	885a      	ldrh	r2, [r3, #2]
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <ADS7843_Init+0xbc>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90d      	bls.n	800171e <ADS7843_Init+0x3e>
		calibX[2] = (calibX[1] - calibX[0]) / width;
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <ADS7843_Init+0xbc>)
 8001704:	885b      	ldrh	r3, [r3, #2]
 8001706:	461a      	mov	r2, r3
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <ADS7843_Init+0xbc>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <ADS7843_Init+0xc0>)
 8001710:	8812      	ldrh	r2, [r2, #0]
 8001712:	fb93 f3f2 	sdiv	r3, r3, r2
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <ADS7843_Init+0xbc>)
 800171a:	809a      	strh	r2, [r3, #4]
 800171c:	e00c      	b.n	8001738 <ADS7843_Init+0x58>
	}else{
		calibX[2] = (calibX[0] - calibX[1]) / width;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <ADS7843_Init+0xbc>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <ADS7843_Init+0xbc>)
 8001726:	885b      	ldrh	r3, [r3, #2]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <ADS7843_Init+0xc0>)
 800172c:	8812      	ldrh	r2, [r2, #0]
 800172e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <ADS7843_Init+0xbc>)
 8001736:	809a      	strh	r2, [r3, #4]
	}

	if(calibY[1] > calibY[0]){
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <ADS7843_Init+0xc4>)
 800173a:	885a      	ldrh	r2, [r3, #2]
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <ADS7843_Init+0xc4>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d90d      	bls.n	8001760 <ADS7843_Init+0x80>
		calibY[2] = (calibY[1] - calibY[0]) / height;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <ADS7843_Init+0xc4>)
 8001746:	885b      	ldrh	r3, [r3, #2]
 8001748:	461a      	mov	r2, r3
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <ADS7843_Init+0xc4>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <ADS7843_Init+0xc8>)
 8001752:	8812      	ldrh	r2, [r2, #0]
 8001754:	fb93 f3f2 	sdiv	r3, r3, r2
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <ADS7843_Init+0xc4>)
 800175c:	809a      	strh	r2, [r3, #4]
 800175e:	e00c      	b.n	800177a <ADS7843_Init+0x9a>
	}else{
		calibY[2] = (calibY[0] - calibY[1]) / height;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <ADS7843_Init+0xc4>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <ADS7843_Init+0xc4>)
 8001768:	885b      	ldrh	r3, [r3, #2]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <ADS7843_Init+0xc8>)
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	fb93 f3f2 	sdiv	r3, r3, r2
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <ADS7843_Init+0xc4>)
 8001778:	809a      	strh	r2, [r3, #4]
	}



	spi = spiPointer;
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <ADS7843_Init+0xcc>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6013      	str	r3, [r2, #0]
	ret = ADS7843_SendCmd(CMD_ENABLE_PENIRQ, &trowAway);
 8001780:	f107 030a 	add.w	r3, r7, #10
 8001784:	4619      	mov	r1, r3
 8001786:	2090      	movs	r0, #144	; 0x90
 8001788:	f7ff ff36 	bl	80015f8 <ADS7843_SendCmd>
 800178c:	60f8      	str	r0, [r7, #12]

	return ret;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000072 	.word	0x20000072
 800179c:	20000064 	.word	0x20000064
 80017a0:	2000005e 	.word	0x2000005e
 80017a4:	2000006c 	.word	0x2000006c
 80017a8:	20000060 	.word	0x20000060
 80017ac:	20017d44 	.word	0x20017d44

080017b0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d013      	beq.n	80017fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80017de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017e6:	e000      	b.n	80017ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80017e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f9      	beq.n	80017e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80017f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ffd1 	bl	80017be <ITM_SendChar>
	return(ch);
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182e:	f001 fb83 	bl	8002f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001832:	f000 f91b 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001836:	f000 fab5 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 800183a:	f000 fa93 	bl	8001d64 <MX_DMA_Init>
  MX_FSMC_Init();
 800183e:	f000 fb87 	bl	8001f50 <MX_FSMC_Init>
  MX_DCMI_Init();
 8001842:	f000 f97d 	bl	8001b40 <MX_DCMI_Init>
  MX_I2C1_Init();
 8001846:	f000 f9a3 	bl	8001b90 <MX_I2C1_Init>
  MX_TIM2_Init();
 800184a:	f000 fa33 	bl	8001cb4 <MX_TIM2_Init>
  MX_I2C2_Init();
 800184e:	f000 f9cd 	bl	8001bec <MX_I2C2_Init>
  MX_SPI2_Init();
 8001852:	f000 f9f9 	bl	8001c48 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001856:	f00e f991 	bl	800fb7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800185a:	2100      	movs	r1, #0
 800185c:	4863      	ldr	r0, [pc, #396]	; (80019ec <main+0x1c4>)
 800185e:	f007 fa97 	bl	8008d90 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	4862      	ldr	r0, [pc, #392]	; (80019f0 <main+0x1c8>)
 8001868:	f003 fdba 	bl	80053e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BCKL_GPIO_Port, LCD_BCKL_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2110      	movs	r1, #16
 8001870:	485f      	ldr	r0, [pc, #380]	; (80019f0 <main+0x1c8>)
 8001872:	f003 fdb5 	bl	80053e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CMR_RST_GPIO_Port, CMR_RST_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	485e      	ldr	r0, [pc, #376]	; (80019f4 <main+0x1cc>)
 800187c:	f003 fdb0 	bl	80053e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CMR_SHDW_GPIO_Port, CMR_SHDW_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2102      	movs	r1, #2
 8001884:	485b      	ldr	r0, [pc, #364]	; (80019f4 <main+0x1cc>)
 8001886:	f003 fdab 	bl	80053e0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f001 fb96 	bl	8002fbc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	2120      	movs	r1, #32
 8001894:	4856      	ldr	r0, [pc, #344]	; (80019f0 <main+0x1c8>)
 8001896:	f003 fda3 	bl	80053e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BCKL_GPIO_Port, LCD_BCKL_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2110      	movs	r1, #16
 800189e:	4854      	ldr	r0, [pc, #336]	; (80019f0 <main+0x1c8>)
 80018a0:	f003 fd9e 	bl	80053e0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(CMR_RST_GPIO_Port, CMR_RST_Pin, GPIO_PIN_RESET);	// ACTIVE HIGH
 80018a4:	2200      	movs	r2, #0
 80018a6:	2101      	movs	r1, #1
 80018a8:	4852      	ldr	r0, [pc, #328]	; (80019f4 <main+0x1cc>)
 80018aa:	f003 fd99 	bl	80053e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CMR_SHDW_GPIO_Port, CMR_SHDW_Pin, GPIO_PIN_RESET);	// ACTIVE HIGH    FUU
 80018ae:	2200      	movs	r2, #0
 80018b0:	2102      	movs	r1, #2
 80018b2:	4850      	ldr	r0, [pc, #320]	; (80019f4 <main+0x1cc>)
 80018b4:	f003 fd94 	bl	80053e0 <HAL_GPIO_WritePin>

  BSP_LCD_Init();
 80018b8:	f7ff fae8 	bl	8000e8c <BSP_LCD_Init>

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018c0:	f7ff fb4c 	bl	8000f5c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80018c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018c8:	f7ff fb28 	bl	8000f1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80018cc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80018d0:	f7ff fb14 	bl	8000efc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 80018d4:	4848      	ldr	r0, [pc, #288]	; (80019f8 <main+0x1d0>)
 80018d6:	f7ff fb31 	bl	8000f3c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"testing", LEFT_MODE);
 80018da:	2303      	movs	r3, #3
 80018dc:	4a47      	ldr	r2, [pc, #284]	; (80019fc <main+0x1d4>)
 80018de:	210a      	movs	r1, #10
 80018e0:	200a      	movs	r0, #10
 80018e2:	f7ff fb83 	bl	8000fec <BSP_LCD_DisplayStringAt>
  BSP_LCD_FillRect(0, 0, 50, 50);
 80018e6:	2332      	movs	r3, #50	; 0x32
 80018e8:	2232      	movs	r2, #50	; 0x32
 80018ea:	2100      	movs	r1, #0
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fd2b 	bl	8001348 <BSP_LCD_FillRect>


  cameraCtx.ReadReg = &cameraReadReg;
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <main+0x1d8>)
 80018f4:	4a43      	ldr	r2, [pc, #268]	; (8001a04 <main+0x1dc>)
 80018f6:	605a      	str	r2, [r3, #4]
  cameraCtx.WriteReg = &cameraWriteReg;
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <main+0x1d8>)
 80018fa:	4a43      	ldr	r2, [pc, #268]	; (8001a08 <main+0x1e0>)
 80018fc:	601a      	str	r2, [r3, #0]
  cameraObject.Ctx = cameraCtx;
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <main+0x1e4>)
 8001900:	4a3f      	ldr	r2, [pc, #252]	; (8001a00 <main+0x1d8>)
 8001902:	3318      	adds	r3, #24
 8001904:	ca07      	ldmia	r2, {r0, r1, r2}
 8001906:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  int32_t retInit = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  retInit = OV9655_Init(&cameraObject, OV9655_R160x120, OV9655_RGB565);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	483e      	ldr	r0, [pc, #248]	; (8001a0c <main+0x1e4>)
 8001914:	f001 f905 	bl	8002b22 <OV9655_Init>
 8001918:	60f8      	str	r0, [r7, #12]
  if(retInit != 0){
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <main+0x106>
	  BSP_LCD_DisplayStringAt(100, 100, (uint8_t *)"testing", LEFT_MODE);
 8001920:	2303      	movs	r3, #3
 8001922:	4a36      	ldr	r2, [pc, #216]	; (80019fc <main+0x1d4>)
 8001924:	2164      	movs	r1, #100	; 0x64
 8001926:	2064      	movs	r0, #100	; 0x64
 8001928:	f7ff fb60 	bl	8000fec <BSP_LCD_DisplayStringAt>
	  while(1);
 800192c:	e7fe      	b.n	800192c <main+0x104>
  }

  //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)imgBuf, 19200/2);

  ADS7843_Init(&hspi2, 320, 240);
 800192e:	22f0      	movs	r2, #240	; 0xf0
 8001930:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001934:	4836      	ldr	r0, [pc, #216]	; (8001a10 <main+0x1e8>)
 8001936:	f7ff fed3 	bl	80016e0 <ADS7843_Init>

  tid = osThreadNew(StartShowPicture, NULL, NULL);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	4835      	ldr	r0, [pc, #212]	; (8001a14 <main+0x1ec>)
 8001940:	f00b f8f6 	bl	800cb30 <osThreadNew>
 8001944:	4603      	mov	r3, r0
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <main+0x1f0>)
 8001948:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800194a:	f00b f8a7 	bl	800ca9c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Coordinates */
  CoordinatesHandle = osMessageQueueNew (9, sizeof(uint8_t), &Coordinates_attributes);
 800194e:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <main+0x1f4>)
 8001950:	2101      	movs	r1, #1
 8001952:	2009      	movs	r0, #9
 8001954:	f00b f9e7 	bl	800cd26 <osMessageQueueNew>
 8001958:	4603      	mov	r3, r0
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <main+0x1f8>)
 800195c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  const size_t xStreamBufferSizeBytes = 100, xTriggerLevel = 10;
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	230a      	movs	r3, #10
 8001964:	607b      	str	r3, [r7, #4]
  	size_t xBytesSent;

  	const TickType_t x100ms = pdMS_TO_TICKS( 100 );
 8001966:	2364      	movs	r3, #100	; 0x64
 8001968:	603b      	str	r3, [r7, #0]
  	printf("Starting to create buffer \n");
 800196a:	482e      	ldr	r0, [pc, #184]	; (8001a24 <main+0x1fc>)
 800196c:	f00e fed4 	bl	8010718 <puts>
  	    xStreamBuffer = xStreamBufferCreate( xStreamBufferSizeBytes, xTriggerLevel );
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f00c f857 	bl	800da28 <xStreamBufferGenericCreate>
 800197a:	4603      	mov	r3, r0
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <main+0x200>)
 800197e:	6013      	str	r3, [r2, #0]

  	    if( xStreamBuffer == NULL )
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <main+0x200>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <main+0x168>
  	    {
  	    	printf(" Error !!!  creating stream buffer \n");
 8001988:	4828      	ldr	r0, [pc, #160]	; (8001a2c <main+0x204>)
 800198a:	f00e fec5 	bl	8010718 <puts>
 800198e:	e002      	b.n	8001996 <main+0x16e>
  	    }
  	    else
  	    {

  			  printf("Succesfully created stream buffer \n");
 8001990:	4827      	ldr	r0, [pc, #156]	; (8001a30 <main+0x208>)
 8001992:	f00e fec1 	bl	8010718 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001996:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <main+0x20c>)
 8001998:	2100      	movs	r1, #0
 800199a:	4827      	ldr	r0, [pc, #156]	; (8001a38 <main+0x210>)
 800199c:	f00b f8c8 	bl	800cb30 <osThreadNew>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <main+0x214>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* creation of getPicFromCam */
  getPicFromCamHandle = osThreadNew(StartGetPictureFromCamera, NULL, &getPicFromCam_attributes);
 80019a6:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <main+0x218>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4826      	ldr	r0, [pc, #152]	; (8001a44 <main+0x21c>)
 80019ac:	f00b f8c0 	bl	800cb30 <osThreadNew>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <main+0x220>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* creation of sendPicToPy */
  sendPicToPyHandle = osThreadNew(StartSendPictureToPy, NULL, &sendPicToPy_attributes);
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <main+0x224>)
 80019b8:	2100      	movs	r1, #0
 80019ba:	4825      	ldr	r0, [pc, #148]	; (8001a50 <main+0x228>)
 80019bc:	f00b f8b8 	bl	800cb30 <osThreadNew>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <main+0x22c>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* creation of getCoordFromPy */
  getCoordFromPyHandle = osThreadNew(StartGetCoordFromPy, NULL, &getCoordFromPy_attributes);
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <main+0x230>)
 80019c8:	2100      	movs	r1, #0
 80019ca:	4824      	ldr	r0, [pc, #144]	; (8001a5c <main+0x234>)
 80019cc:	f00b f8b0 	bl	800cb30 <osThreadNew>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <main+0x238>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* creation of showPicture */
  showPictureHandle = osThreadNew(StartShowPicture, NULL, &showPicture_attributes);
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <main+0x23c>)
 80019d8:	2100      	movs	r1, #0
 80019da:	480e      	ldr	r0, [pc, #56]	; (8001a14 <main+0x1ec>)
 80019dc:	f00b f8a8 	bl	800cb30 <osThreadNew>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <main+0x240>)
 80019e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019e6:	f00b f87d 	bl	800cae4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80019ea:	e7fe      	b.n	80019ea <main+0x1c2>
 80019ec:	20017fa0 	.word	0x20017fa0
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40021000 	.word	0x40021000
 80019f8:	20000000 	.word	0x20000000
 80019fc:	08011030 	.word	0x08011030
 8001a00:	20017f8c 	.word	0x20017f8c
 8001a04:	08002081 	.word	0x08002081
 8001a08:	08002011 	.word	0x08002011
 8001a0c:	20017f1c 	.word	0x20017f1c
 8001a10:	20017d50 	.word	0x20017d50
 8001a14:	08002201 	.word	0x08002201
 8001a18:	20017f48 	.word	0x20017f48
 8001a1c:	0801191c 	.word	0x0801191c
 8001a20:	20017fec 	.word	0x20017fec
 8001a24:	08011038 	.word	0x08011038
 8001a28:	20017d48 	.word	0x20017d48
 8001a2c:	08011054 	.word	0x08011054
 8001a30:	08011078 	.word	0x08011078
 8001a34:	08011868 	.word	0x08011868
 8001a38:	08002149 	.word	0x08002149
 8001a3c:	20017d4c 	.word	0x20017d4c
 8001a40:	0801188c 	.word	0x0801188c
 8001a44:	08002159 	.word	0x08002159
 8001a48:	20017f44 	.word	0x20017f44
 8001a4c:	080118b0 	.word	0x080118b0
 8001a50:	08002185 	.word	0x08002185
 8001a54:	20017ec8 	.word	0x20017ec8
 8001a58:	080118d4 	.word	0x080118d4
 8001a5c:	080021f5 	.word	0x080021f5
 8001a60:	20017f98 	.word	0x20017f98
 8001a64:	080118f8 	.word	0x080118f8
 8001a68:	20017f9c 	.word	0x20017f9c

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	; 0x50
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2230      	movs	r2, #48	; 0x30
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00e fdd6 	bl	801062c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <SystemClock_Config+0xcc>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <SystemClock_Config+0xcc>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <SystemClock_Config+0xcc>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <SystemClock_Config+0xd0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <SystemClock_Config+0xd0>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <SystemClock_Config+0xd0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001adc:	2304      	movs	r3, #4
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ae0:	23a8      	movs	r3, #168	; 0xa8
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fda7 	bl	8007644 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001afc:	f000 fbde 	bl	80022bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f006 f808 	bl	8007b34 <HAL_RCC_ClockConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b2a:	f000 fbc7 	bl	80022bc <Error_Handler>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3750      	adds	r7, #80	; 0x50
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40007000 	.word	0x40007000

08001b40 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b46:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <MX_DCMI_Init+0x4c>)
 8001b48:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b52:	2220      	movs	r2, #32
 8001b54:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_DCMI_Init+0x48>)
 8001b76:	f001 fd0f 	bl	8003598 <HAL_DCMI_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8001b80:	f000 fb9c 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20017f4c 	.word	0x20017f4c
 8001b8c:	50050000 	.word	0x50050000

08001b90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_I2C1_Init+0x54>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_I2C1_Init+0x58>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C1_Init+0x50>)
 8001bce:	f003 fc21 	bl	8005414 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 fb70 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20017dc0 	.word	0x20017dc0
 8001be4:	40005400 	.word	0x40005400
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <MX_I2C2_Init+0x54>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_I2C2_Init+0x58>)
 8001bfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_I2C2_Init+0x50>)
 8001c2a:	f003 fbf3 	bl	8005414 <HAL_I2C_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c34:	f000 fb42 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20017e14 	.word	0x20017e14
 8001c40:	40005800 	.word	0x40005800
 8001c44:	000186a0 	.word	0x000186a0

08001c48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <MX_SPI2_Init+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c94:	220a      	movs	r2, #10
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_SPI2_Init+0x64>)
 8001c9a:	f006 f965 	bl	8007f68 <HAL_SPI_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ca4:	f000 fb0a 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20017d50 	.word	0x20017d50
 8001cb0:	40003800 	.word	0x40003800

08001cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001cec:	2202      	movs	r2, #2
 8001cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cfc:	4818      	ldr	r0, [pc, #96]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001cfe:	f006 fff7 	bl	8008cf0 <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001d08:	f000 fad8 	bl	80022bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4811      	ldr	r0, [pc, #68]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001d1c:	f007 fd64 	bl	80097e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001d26:	f000 fac9 	bl	80022bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2a:	2360      	movs	r3, #96	; 0x60
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001d42:	f007 f9f5 	bl	8009130 <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d4c:	f000 fab6 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <MX_TIM2_Init+0xac>)
 8001d52:	f000 fce1 	bl	8002718 <HAL_TIM_MspPostInit>

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20017fa0 	.word	0x20017fa0

08001d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_DMA_Init+0x3c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <MX_DMA_Init+0x3c>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_DMA_Init+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2039      	movs	r0, #57	; 0x39
 8001d8c:	f001 f9f2 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d90:	2039      	movs	r0, #57	; 0x39
 8001d92:	f001 fa0b 	bl	80031ac <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a5d      	ldr	r2, [pc, #372]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a41      	ldr	r2, [pc, #260]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <MX_GPIO_Init+0x194>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MEMS_CS_Pin|CMR_RST_Pin|CMR_SHDW_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	210b      	movs	r1, #11
 8001e66:	4835      	ldr	r0, [pc, #212]	; (8001f3c <MX_GPIO_Init+0x198>)
 8001e68:	f003 faba 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2102      	movs	r1, #2
 8001e70:	4833      	ldr	r0, [pc, #204]	; (8001f40 <MX_GPIO_Init+0x19c>)
 8001e72:	f003 fab5 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4831      	ldr	r0, [pc, #196]	; (8001f44 <MX_GPIO_Init+0x1a0>)
 8001e7e:	f003 faaf 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BCKL_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2130      	movs	r1, #48	; 0x30
 8001e86:	4830      	ldr	r0, [pc, #192]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001e88:	f003 faaa 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MEMS_CS_Pin CMR_RST_Pin CMR_SHDW_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin|CMR_RST_Pin|CMR_SHDW_Pin;
 8001e8c:	230b      	movs	r3, #11
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4826      	ldr	r0, [pc, #152]	; (8001f3c <MX_GPIO_Init+0x198>)
 8001ea4:	f003 f900 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_IRQ_Pin */
  GPIO_InitStruct.Pin = TC_IRQ_Pin;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <MX_GPIO_Init+0x1a8>)
 8001eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4821      	ldr	r0, [pc, #132]	; (8001f40 <MX_GPIO_Init+0x19c>)
 8001ebc:	f003 f8f4 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	481a      	ldr	r0, [pc, #104]	; (8001f40 <MX_GPIO_Init+0x19c>)
 8001ed8:	f003 f8e6 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001edc:	2304      	movs	r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4816      	ldr	r0, [pc, #88]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001ef0:	f003 f8da 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_GPIO_Init+0x1a0>)
 8001f0e:	f003 f8cb 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BCKL_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BCKL_Pin|LCD_RST_Pin;
 8001f12:	2330      	movs	r3, #48	; 0x30
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001f2a:	f003 f8bd 	bl	80050a8 <HAL_GPIO_Init>

}
 8001f2e:	bf00      	nop
 8001f30:	3730      	adds	r7, #48	; 0x30
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	10110000 	.word	0x10110000

08001f50 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f6a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001f6e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <MX_FSMC_Init+0xbc>)
 8001f74:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001fcc:	230f      	movs	r3, #15
 8001fce:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001fd4:	23ff      	movs	r3, #255	; 0xff
 8001fd6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001fd8:	230f      	movs	r3, #15
 8001fda:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001fe0:	2311      	movs	r3, #17
 8001fe2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <MX_FSMC_Init+0xb8>)
 8001ff0:	f006 fd70 	bl	8008ad4 <HAL_SRAM_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001ffa:	f000 f95f 	bl	80022bc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ffe:	bf00      	nop
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20017ecc 	.word	0x20017ecc
 800200c:	a0000104 	.word	0xa0000104

08002010 <cameraWriteReg>:

/* USER CODE BEGIN 4 */

int32_t cameraWriteReg(void *ctx, uint16_t reg, uint8_t *pdata, uint16_t length){
 8002010:	b580      	push	{r7, lr}
 8002012:	b090      	sub	sp, #64	; 0x40
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	460b      	mov	r3, r1
 800201e:	817b      	strh	r3, [r7, #10]
 8002020:	4613      	mov	r3, r2
 8002022:	813b      	strh	r3, [r7, #8]
	int32_t ret = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t temp[32] = {0};
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	615a      	str	r2, [r3, #20]
 800203e:	619a      	str	r2, [r3, #24]
	memcpy(temp + 1, pdata, length);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	3301      	adds	r3, #1
 8002046:	893a      	ldrh	r2, [r7, #8]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	f00e fae0 	bl	8010610 <memcpy>
	temp[0] = reg & 0xff;
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	753b      	strb	r3, [r7, #20]

	ret = HAL_I2C_Master_Transmit(&hi2c1, OV9655_ADD, temp, length + 1, 10000);
 8002056:	893b      	ldrh	r3, [r7, #8]
 8002058:	3301      	adds	r3, #1
 800205a:	b29b      	uxth	r3, r3
 800205c:	f107 0214 	add.w	r2, r7, #20
 8002060:	f242 7110 	movw	r1, #10000	; 0x2710
 8002064:	9100      	str	r1, [sp, #0]
 8002066:	2160      	movs	r1, #96	; 0x60
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <cameraWriteReg+0x6c>)
 800206a:	f003 fb17 	bl	800569c <HAL_I2C_Master_Transmit>
 800206e:	4603      	mov	r3, r0
 8002070:	637b      	str	r3, [r7, #52]	; 0x34


	return ret;
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002074:	4618      	mov	r0, r3
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20017dc0 	.word	0x20017dc0

08002080 <cameraReadReg>:

int32_t cameraReadReg(void *ctx, uint16_t reg, uint8_t *pdata, uint16_t length){
 8002080:	b580      	push	{r7, lr}
 8002082:	b090      	sub	sp, #64	; 0x40
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	461a      	mov	r2, r3
 800208c:	460b      	mov	r3, r1
 800208e:	817b      	strh	r3, [r7, #10]
 8002090:	4613      	mov	r3, r2
 8002092:	813b      	strh	r3, [r7, #8]
	int32_t ret = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t temp[32] = {0};
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]
	temp[0] = reg & 0xff;
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	753b      	strb	r3, [r7, #20]

	ret = HAL_I2C_Master_Transmit(&hi2c1, OV9655_ADD, temp, 1, 100);
 80020b6:	f107 0214 	add.w	r2, r7, #20
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	2160      	movs	r1, #96	; 0x60
 80020c2:	480a      	ldr	r0, [pc, #40]	; (80020ec <cameraReadReg+0x6c>)
 80020c4:	f003 faea 	bl	800569c <HAL_I2C_Master_Transmit>
 80020c8:	4603      	mov	r3, r0
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
	ret = HAL_I2C_Master_Receive(&hi2c1, OV9655_ADD, pdata, length, 100);
 80020cc:	893b      	ldrh	r3, [r7, #8]
 80020ce:	2264      	movs	r2, #100	; 0x64
 80020d0:	9200      	str	r2, [sp, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	2160      	movs	r1, #96	; 0x60
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <cameraReadReg+0x6c>)
 80020d8:	f003 fbde 	bl	8005898 <HAL_I2C_Master_Receive>
 80020dc:	4603      	mov	r3, r0
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
	return ret;
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3738      	adds	r7, #56	; 0x38
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20017dc0 	.word	0x20017dc0

080020f0 <HAL_DCMI_FrameEventCallback>:


//(ctx->handle, reg, data, length)
//HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, *imgBuf, 160*120);

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi){
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
	frameDone = 1;
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_DCMI_FrameEventCallback+0x1c>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	200131f0 	.word	0x200131f0

08002110 <CDC_Recive_Callback>:
void HAL_DCMI_VsyncCallback(DCMI_HandleTypeDef *hdcmi){
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
}

void CDC_Recive_Callback(uint8_t *buf, uint32_t len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	tempReciveBuf = buf;
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <CDC_Recive_Callback+0x2c>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6013      	str	r3, [r2, #0]
	recivedData = 1;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <CDC_Recive_Callback+0x30>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
	osThreadFlagsSet(tid, 0x0002U);
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <CDC_Recive_Callback+0x34>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f00a fd91 	bl	800cc54 <osThreadFlagsSet>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20017fe8 	.word	0x20017fe8
 8002140:	200131f1 	.word	0x200131f1
 8002144:	20017f48 	.word	0x20017f48

08002148 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002150:	2001      	movs	r0, #1
 8002152:	f00a fdcd 	bl	800ccf0 <osDelay>
 8002156:	e7fb      	b.n	8002150 <StartDefaultTask+0x8>

08002158 <StartGetPictureFromCamera>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetPictureFromCamera */
void StartGetPictureFromCamera(void *argument)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetPictureFromCamera */

  /* Infinite loop */
  for(;;)
  {
	  if(frameDone == 0)
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <StartGetPictureFromCamera+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1fb      	bne.n	8002160 <StartGetPictureFromCamera+0x8>
	  {
		  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)imgBuf, 19200);
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <StartGetPictureFromCamera+0x24>)
 800216a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800216e:	2102      	movs	r1, #2
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <StartGetPictureFromCamera+0x28>)
 8002172:	f001 f829 	bl	80031c8 <HAL_DCMI_Start_DMA>
	  if(frameDone == 0)
 8002176:	e7f3      	b.n	8002160 <StartGetPictureFromCamera+0x8>
 8002178:	200131f0 	.word	0x200131f0
 800217c:	200005ec 	.word	0x200005ec
 8002180:	20017f4c 	.word	0x20017f4c

08002184 <StartSendPictureToPy>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendPictureToPy */
void StartSendPictureToPy(void *argument)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendPictureToPy */
  /* Infinite loop */
  for(;;)
  {
	  if(frameDone == 1){
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <StartSendPictureToPy+0x60>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d1fb      	bne.n	800218c <StartSendPictureToPy+0x8>
		//  taskENTER_CRITICAL();
		  CDC_Transmit_FS(syncBuf, sizeof(syncBuf));
 8002194:	2106      	movs	r1, #6
 8002196:	4814      	ldr	r0, [pc, #80]	; (80021e8 <StartSendPictureToPy+0x64>)
 8002198:	f00d fdb4 	bl	800fd04 <CDC_Transmit_FS>
	 	//  HAL_Delay(100);
	 	  for(uint16_t i = 0; i < 19200; i++){            // vcom shit
 800219c:	2300      	movs	r3, #0
 800219e:	81fb      	strh	r3, [r7, #14]
 80021a0:	e017      	b.n	80021d2 <StartSendPictureToPy+0x4e>
	 	  ret = 1;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <StartSendPictureToPy+0x68>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
	 	  while(ret){                                    // make sure it is transmitted
 80021a8:	e00c      	b.n	80021c4 <StartSendPictureToPy+0x40>
	 	  ret = CDC_Transmit_FS(((uint8_t *)imgBuf) + (i * 2), 2);    // send iamge over USB vcom
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <StartSendPictureToPy+0x6c>)
 80021b2:	4413      	add	r3, r2
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00d fda4 	bl	800fd04 <CDC_Transmit_FS>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <StartSendPictureToPy+0x68>)
 80021c2:	701a      	strb	r2, [r3, #0]
	 	  while(ret){                                    // make sure it is transmitted
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <StartSendPictureToPy+0x68>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ee      	bne.n	80021aa <StartSendPictureToPy+0x26>
	 	  for(uint16_t i = 0; i < 19200; i++){            // vcom shit
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	3301      	adds	r3, #1
 80021d0:	81fb      	strh	r3, [r7, #14]
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80021d8:	d3e3      	bcc.n	80021a2 <StartSendPictureToPy+0x1e>
	 	  }
	 	  }
	 	  frameDone = 0;
 80021da:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <StartSendPictureToPy+0x60>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
	  if(frameDone == 1){
 80021e0:	e7d4      	b.n	800218c <StartSendPictureToPy+0x8>
 80021e2:	bf00      	nop
 80021e4:	200131f0 	.word	0x200131f0
 80021e8:	20000074 	.word	0x20000074
 80021ec:	200131f2 	.word	0x200131f2
 80021f0:	200005ec 	.word	0x200005ec

080021f4 <StartGetCoordFromPy>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetCoordFromPy */
void StartGetCoordFromPy(void *argument)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetCoordFromPy */
  /* Infinite loop */
  for(;;)
 80021fc:	e7fe      	b.n	80021fc <StartGetCoordFromPy+0x8>
	...

08002200 <StartShowPicture>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowPicture */
void StartShowPicture(void *argument)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowPicture */
	uint8_t count = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  BSP_LCD_DrawRGB16Image(160, 120, 160, 120, (uint16_t *)imgBuf);
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <StartShowPicture+0x8c>)
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2378      	movs	r3, #120	; 0x78
 8002212:	22a0      	movs	r2, #160	; 0xa0
 8002214:	2178      	movs	r1, #120	; 0x78
 8002216:	20a0      	movs	r0, #160	; 0xa0
 8002218:	f7ff f9ce 	bl	80015b8 <BSP_LCD_DrawRGB16Image>
	 // osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
	  	  if(recivedData == 1)
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <StartShowPicture+0x90>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d1f3      	bne.n	800220c <StartShowPicture+0xc>
	  	  {
	  		  BSP_LCD_DrawRect(160+tempReciveBuf[0], 120+tempReciveBuf[3], tempReciveBuf[1] - tempReciveBuf[3], tempReciveBuf[2] - tempReciveBuf[0]);
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <StartShowPicture+0x94>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	33a0      	adds	r3, #160	; 0xa0
 800222e:	b298      	uxth	r0, r3
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <StartShowPicture+0x94>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3303      	adds	r3, #3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	3378      	adds	r3, #120	; 0x78
 800223c:	b299      	uxth	r1, r3
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <StartShowPicture+0x94>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <StartShowPicture+0x94>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3303      	adds	r3, #3
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	b29c      	uxth	r4, r3
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <StartShowPicture+0x94>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3302      	adds	r3, #2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <StartShowPicture+0x94>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	4622      	mov	r2, r4
 800226e:	f7fe ffdb 	bl	8001228 <BSP_LCD_DrawRect>
	  		  count = count +1;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3301      	adds	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
	  	  	  if (count == 3)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d1c6      	bne.n	800220c <StartShowPicture+0xc>
	  	  	  {
	  	  		  recivedData = 0;
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <StartShowPicture+0x90>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
	  		  	  count = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
	  BSP_LCD_DrawRGB16Image(160, 120, 160, 120, (uint16_t *)imgBuf);
 8002288:	e7c0      	b.n	800220c <StartShowPicture+0xc>
 800228a:	bf00      	nop
 800228c:	200005ec 	.word	0x200005ec
 8002290:	200131f1 	.word	0x200131f1
 8002294:	20017fe8 	.word	0x20017fe8

08002298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022aa:	f000 fe67 	bl	8002f7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40001000 	.word	0x40001000

080022bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c0:	b672      	cpsid	i
}
 80022c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <Error_Handler+0x8>
	...

080022c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_MspInit+0x54>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_MspInit+0x54>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_MspInit+0x54>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_MspInit+0x54>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_MspInit+0x54>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_MspInit+0x54>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	210f      	movs	r1, #15
 800230a:	f06f 0001 	mvn.w	r0, #1
 800230e:	f000 ff31 	bl	8003174 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_DCMI_MspInit+0x1cc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	f040 80d0 	bne.w	80024e4 <HAL_DCMI_MspInit+0x1c4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	4b69      	ldr	r3, [pc, #420]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6353      	str	r3, [r2, #52]	; 0x34
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 800236a:	f043 0310 	orr.w	r3, r3, #16
 800236e:	6313      	str	r3, [r2, #48]	; 0x30
 8002370:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a53      	ldr	r2, [pc, #332]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	6313      	str	r3, [r2, #48]	; 0x30
 80023c4:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_DCMI_MspInit+0x1d0>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80023d0:	2370      	movs	r3, #112	; 0x70
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023e0:	230d      	movs	r3, #13
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	4619      	mov	r1, r3
 80023ea:	4842      	ldr	r0, [pc, #264]	; (80024f4 <HAL_DCMI_MspInit+0x1d4>)
 80023ec:	f002 fe5c 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023f0:	2310      	movs	r3, #16
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002400:	230d      	movs	r3, #13
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	483b      	ldr	r0, [pc, #236]	; (80024f8 <HAL_DCMI_MspInit+0x1d8>)
 800240c:	f002 fe4c 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002418:	2301      	movs	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002420:	230d      	movs	r3, #13
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	4833      	ldr	r0, [pc, #204]	; (80024f8 <HAL_DCMI_MspInit+0x1d8>)
 800242c:	f002 fe3c 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002430:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002442:	230d      	movs	r3, #13
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	482b      	ldr	r0, [pc, #172]	; (80024fc <HAL_DCMI_MspInit+0x1dc>)
 800244e:	f002 fe2b 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002452:	23c0      	movs	r3, #192	; 0xc0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002462:	230d      	movs	r3, #13
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	4619      	mov	r1, r3
 800246c:	4824      	ldr	r0, [pc, #144]	; (8002500 <HAL_DCMI_MspInit+0x1e0>)
 800246e:	f002 fe1b 	bl	80050a8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 8002474:	4a24      	ldr	r2, [pc, #144]	; (8002508 <HAL_DCMI_MspInit+0x1e8>)
 8002476:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 800247a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 800248e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002492:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 8002496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800249a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 800249e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 80024a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024aa:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80024b8:	4812      	ldr	r0, [pc, #72]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 80024ba:	f001 f8db 	bl	8003674 <HAL_DMA_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_DCMI_MspInit+0x1a8>
    {
      Error_Handler();
 80024c4:	f7ff fefa 	bl	80022bc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
 80024ce:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <HAL_DCMI_MspInit+0x1e4>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2105      	movs	r1, #5
 80024d8:	204e      	movs	r0, #78	; 0x4e
 80024da:	f000 fe4b 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80024de:	204e      	movs	r0, #78	; 0x4e
 80024e0:	f000 fe64 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80024e4:	bf00      	nop
 80024e6:	3730      	adds	r7, #48	; 0x30
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	50050000 	.word	0x50050000
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020400 	.word	0x40020400
 8002504:	20017e68 	.word	0x20017e68
 8002508:	40026428 	.word	0x40026428

0800250c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	; 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <HAL_I2C_MspInit+0xec>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12d      	bne.n	800258a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a31      	ldr	r2, [pc, #196]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800254a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002550:	2312      	movs	r3, #18
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002554:	2301      	movs	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800255c:	2304      	movs	r3, #4
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	4826      	ldr	r0, [pc, #152]	; (8002600 <HAL_I2C_MspInit+0xf4>)
 8002568:	f002 fd9e 	bl	80050a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a21      	ldr	r2, [pc, #132]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 8002576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002588:	e031      	b.n	80025ee <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_I2C_MspInit+0xf8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d12c      	bne.n	80025ee <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	6313      	str	r3, [r2, #48]	; 0x30
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b6:	2312      	movs	r3, #18
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025c2:	2304      	movs	r3, #4
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_I2C_MspInit+0xf4>)
 80025ce:	f002 fd6b 	bl	80050a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 80025dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_I2C_MspInit+0xf0>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	; 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40005400 	.word	0x40005400
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020400 	.word	0x40020400
 8002604:	40005800 	.word	0x40005800

08002608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <HAL_SPI_MspInit+0xc0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d14a      	bne.n	80026c0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_SPI_MspInit+0xc4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800267e:	230c      	movs	r3, #12
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268e:	2305      	movs	r3, #5
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <HAL_SPI_MspInit+0xc8>)
 800269a:	f002 fd05 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800269e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b0:	2305      	movs	r3, #5
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4806      	ldr	r0, [pc, #24]	; (80026d4 <HAL_SPI_MspInit+0xcc>)
 80026bc:	f002 fcf4 	bl	80050a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40003800 	.word	0x40003800
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020400 	.word	0x40020400

080026d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d10d      	bne.n	8002706 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_TIM_PWM_MspInit+0x3c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_TIM_PWM_MspInit+0x3c>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_TIM_PWM_MspInit+0x3c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d11e      	bne.n	8002778 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_TIM_MspPostInit+0x68>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <HAL_TIM_MspPostInit+0x68>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_TIM_MspPostInit+0x68>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = CMR_XCLK_Pin;
 8002756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002764:	2301      	movs	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002768:	2301      	movs	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CMR_XCLK_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	4619      	mov	r1, r3
 8002772:	4804      	ldr	r0, [pc, #16]	; (8002784 <HAL_TIM_MspPostInit+0x6c>)
 8002774:	f002 fc98 	bl	80050a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002778:	bf00      	nop
 800277a:	3720      	adds	r7, #32
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000

08002788 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_FSMC_MspInit+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d131      	bne.n	8002808 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_FSMC_MspInit+0x88>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_FSMC_MspInit+0x8c>)
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_FSMC_MspInit+0x8c>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6393      	str	r3, [r2, #56]	; 0x38
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_FSMC_MspInit+0x8c>)
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80027c6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80027ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80027d8:	230c      	movs	r3, #12
 80027da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <HAL_FSMC_MspInit+0x90>)
 80027e2:	f002 fc61 	bl	80050a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80027e6:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80027ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80027f8:	230c      	movs	r3, #12
 80027fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4806      	ldr	r0, [pc, #24]	; (800281c <HAL_FSMC_MspInit+0x94>)
 8002802:	f002 fc51 	bl	80050a8 <HAL_GPIO_Init>
 8002806:	e000      	b.n	800280a <HAL_FSMC_MspInit+0x82>
    return;
 8002808:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200131f4 	.word	0x200131f4
 8002814:	40023800 	.word	0x40023800
 8002818:	40021000 	.word	0x40021000
 800281c:	40020c00 	.word	0x40020c00

08002820 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002828:	f7ff ffae 	bl	8002788 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	2036      	movs	r0, #54	; 0x36
 800284a:	f000 fc93 	bl	8003174 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800284e:	2036      	movs	r0, #54	; 0x36
 8002850:	f000 fcac 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <HAL_InitTick+0xa4>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_InitTick+0xa4>)
 800285e:	f043 0310 	orr.w	r3, r3, #16
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_InitTick+0xa4>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002870:	f107 0210 	add.w	r2, r7, #16
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f005 fb42 	bl	8007f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002880:	f005 fb2c 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 8002884:	4603      	mov	r3, r0
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_InitTick+0xa8>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3b01      	subs	r3, #1
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_InitTick+0xac>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_InitTick+0xb0>)
 800289c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_InitTick+0xac>)
 80028a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_InitTick+0xac>)
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_InitTick+0xac>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_InitTick+0xac>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <HAL_InitTick+0xac>)
 80028ba:	f006 f94f 	bl	8008b5c <HAL_TIM_Base_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <HAL_InitTick+0xac>)
 80028c6:	f006 f9a3 	bl	8008c10 <HAL_TIM_Base_Start_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3730      	adds	r7, #48	; 0x30
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	431bde83 	.word	0x431bde83
 80028e0:	20017ff0 	.word	0x20017ff0
 80028e4:	40001000 	.word	0x40001000

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <MemManage_Handler+0x4>

080028fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x4>

08002906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM6_DAC_IRQHandler+0x10>)
 800291a:	f006 fb01 	bl	8008f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20017ff0 	.word	0x20017ff0

08002928 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <DMA2_Stream1_IRQHandler+0x10>)
 800292e:	f000 ffc9 	bl	80038c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20017e68 	.word	0x20017e68

0800293c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <OTG_FS_IRQHandler+0x10>)
 8002942:	f003 fe4c 	bl	80065de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2001954c 	.word	0x2001954c

08002950 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <DCMI_IRQHandler+0x10>)
 8002956:	f000 fcd7 	bl	8003308 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20017f4c 	.word	0x20017f4c

08002964 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e00a      	b.n	800298c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002976:	f3af 8000 	nop.w
 800297a:	4601      	mov	r1, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	b2ca      	uxtb	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf0      	blt.n	8002976 <_read+0x12>
	}

return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e009      	b.n	80029c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	60ba      	str	r2, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe ff27 	bl	800180c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbf1      	blt.n	80029b0 <_write+0x12>
	}
	return len;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_close>:

int _close(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	return -1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_isatty>:

int _isatty(int file)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	return 1;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <_sbrk+0x5c>)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <_sbrk+0x60>)
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_sbrk+0x64>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <_sbrk+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a70:	f00d fda4 	bl	80105bc <__errno>
 8002a74:	4603      	mov	r3, r0
 8002a76:	220c      	movs	r2, #12
 8002a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e009      	b.n	8002a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <_sbrk+0x64>)
 8002a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20020000 	.word	0x20020000
 8002aa0:	00000400 	.word	0x00000400
 8002aa4:	200131f8 	.word	0x200131f8
 8002aa8:	20019968 	.word	0x20019968

08002aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <SystemInit+0x20>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <SystemInit+0x20>)
 8002ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad4:	480d      	ldr	r0, [pc, #52]	; (8002b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ad6:	490e      	ldr	r1, [pc, #56]	; (8002b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aec:	4c0b      	ldr	r4, [pc, #44]	; (8002b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002afa:	f7ff ffd7 	bl	8002aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002afe:	f00d fd63 	bl	80105c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7fe fe91 	bl	8001828 <main>
  bx  lr    
 8002b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002b14:	08011c28 	.word	0x08011c28
  ldr r2, =_sbss
 8002b18:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002b1c:	20019964 	.word	0x20019964

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>

08002b22 <OV9655_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV9655_Init(OV9655_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  int32_t ret = OV9655_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint8_t tmp;

  if(pObj->IsInitialized == 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d13c      	bne.n	8002bb6 <OV9655_Init+0x94>
  {
    /* Check if resolution is supported */
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d805      	bhi.n	8002b4e <OV9655_Init+0x2c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <OV9655_Init+0x34>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d003      	beq.n	8002b56 <OV9655_Init+0x34>
    {
      ret = OV9655_ERROR;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e02f      	b.n	8002bb6 <OV9655_Init+0x94>
    }
    else
    {
      tmp = 0x80U;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	74fb      	strb	r3, [r7, #19]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f103 0018 	add.w	r0, r3, #24
 8002b60:	f107 0213 	add.w	r2, r7, #19
 8002b64:	2301      	movs	r3, #1
 8002b66:	2112      	movs	r1, #18
 8002b68:	f000 f9ce 	bl	8002f08 <ov9655_write_reg>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <OV9655_Init+0x58>
      {
        ret = OV9655_ERROR;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e01d      	b.n	8002bb6 <OV9655_Init+0x94>
      }

      else
      {
        OV9655_Delay(pObj, 200);
 8002b7a:	21c8      	movs	r1, #200	; 0xc8
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f99f 	bl	8002ec0 <OV9655_Delay>
        /* Set specific parameters for each resolution */
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f897 	bl	8002cb8 <OV9655_SetResolution>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <OV9655_Init+0x76>
        {
          ret = OV9655_ERROR;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e00e      	b.n	8002bb6 <OV9655_Init+0x94>
        }/* Set specific parameters for each pixel format */
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f810 	bl	8002bc0 <OV9655_SetPixelFormat>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <OV9655_Init+0x8c>
        {
          ret = OV9655_ERROR;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e003      	b.n	8002bb6 <OV9655_Init+0x94>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8002bb6:	697b      	ldr	r3, [r7, #20]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <OV9655_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV9655_SetPixelFormat(OV9655_Object_t *pObj, uint32_t PixelFormat)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Check if PixelFormat is supported */
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <OV9655_SetPixelFormat+0x22>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <OV9655_SetPixelFormat+0x22>
  {
    /* Pixel format not supported */
    ret = OV9655_ERROR;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e064      	b.n	8002cac <OV9655_SetPixelFormat+0xec>
  }
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f103 0018 	add.w	r0, r3, #24
 8002be8:	f107 020b 	add.w	r2, r7, #11
 8002bec:	2301      	movs	r3, #1
 8002bee:	2112      	movs	r1, #18
 8002bf0:	f000 f973 	bl	8002eda <ov9655_read_reg>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <OV9655_SetPixelFormat+0x42>
  {
    ret = OV9655_ERROR;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e054      	b.n	8002cac <OV9655_SetPixelFormat+0xec>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d114      	bne.n	8002c32 <OV9655_SetPixelFormat+0x72>
    {
    case OV9655_YUV422:
      tmp |= 0x02U;
 8002c08:	7afb      	ldrb	r3, [r7, #11]
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	72fb      	strb	r3, [r7, #11]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f103 0018 	add.w	r0, r3, #24
 8002c18:	f107 020b 	add.w	r2, r7, #11
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	2112      	movs	r1, #18
 8002c20:	f000 f972 	bl	8002f08 <ov9655_write_reg>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d03d      	beq.n	8002ca6 <OV9655_SetPixelFormat+0xe6>
      {
        ret = OV9655_ERROR;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002c30:	e039      	b.n	8002ca6 <OV9655_SetPixelFormat+0xe6>
    case OV9655_RGB565:
    default:
      tmp |= 0x03U;
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	f043 0303 	orr.w	r3, r3, #3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	72fb      	strb	r3, [r7, #11]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0018 	add.w	r0, r3, #24
 8002c42:	f107 020b 	add.w	r2, r7, #11
 8002c46:	2301      	movs	r3, #1
 8002c48:	2112      	movs	r1, #18
 8002c4a:	f000 f95d 	bl	8002f08 <ov9655_write_reg>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <OV9655_SetPixelFormat+0x9c>
      {
        ret = OV9655_ERROR;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	60fb      	str	r3, [r7, #12]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
        {
          ret = OV9655_ERROR;
        }
      }
      break;
 8002c5a:	e026      	b.n	8002caa <OV9655_SetPixelFormat+0xea>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f103 0018 	add.w	r0, r3, #24
 8002c62:	f107 020b 	add.w	r2, r7, #11
 8002c66:	2301      	movs	r3, #1
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	f000 f936 	bl	8002eda <ov9655_read_reg>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <OV9655_SetPixelFormat+0xbc>
        ret = OV9655_ERROR;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	60fb      	str	r3, [r7, #12]
      break;
 8002c7a:	e016      	b.n	8002caa <OV9655_SetPixelFormat+0xea>
        tmp |= 0x10U;
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	f043 0310 	orr.w	r3, r3, #16
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	72fb      	strb	r3, [r7, #11]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f103 0018 	add.w	r0, r3, #24
 8002c8c:	f107 020b 	add.w	r2, r7, #11
 8002c90:	2301      	movs	r3, #1
 8002c92:	2140      	movs	r1, #64	; 0x40
 8002c94:	f000 f938 	bl	8002f08 <ov9655_write_reg>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <OV9655_SetPixelFormat+0xea>
          ret = OV9655_ERROR;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	60fb      	str	r3, [r7, #12]
      break;
 8002ca4:	e001      	b.n	8002caa <OV9655_SetPixelFormat+0xea>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <OV9655_SetPixelFormat+0xec>
      break;
 8002caa:	bf00      	nop
    }
  }

  return ret;
 8002cac:	68fb      	ldr	r3, [r7, #12]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <OV9655_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV9655_SetResolution(OV9655_Object_t *pObj, uint32_t Resolution)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
    {0x73, 0x02},
    {0xc7, 0x82},
  };

  /* Check if resolution is supported */
  if (Resolution > OV9655_R640x480)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d903      	bls.n	8002cd4 <OV9655_SetResolution+0x1c>
  {
    ret = OV9655_ERROR;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e0e7      	b.n	8002ea4 <OV9655_SetResolution+0x1ec>
  }
  else
  {
    /* Initialize OV9655 */
    switch (Resolution)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	f200 80e0 	bhi.w	8002e9c <OV9655_SetResolution+0x1e4>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	f080 80b1 	bcs.w	8002e46 <OV9655_SetResolution+0x18e>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <OV9655_SetResolution+0x3a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d055      	beq.n	8002d9c <OV9655_SetResolution+0xe4>
 8002cf0:	e0d4      	b.n	8002e9c <OV9655_SetResolution+0x1e4>
    {
    case OV9655_R160x120:
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e023      	b.n	8002d40 <OV9655_SetResolution+0x88>
      {
        if(ret != OV9655_ERROR)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d01c      	beq.n	8002d3a <OV9655_SetResolution+0x82>
        {
          tmp = OV9655_QVGA_QQVGA[index][1];
 8002d00:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <OV9655_SetResolution+0x1f8>)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f103 0018 	add.w	r0, r3, #24
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <OV9655_SetResolution+0x1f8>)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002d1a:	b299      	uxth	r1, r3
 8002d1c:	f107 020f 	add.w	r2, r7, #15
 8002d20:	2301      	movs	r3, #1
 8002d22:	f000 f8f1 	bl	8002f08 <ov9655_write_reg>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <OV9655_SetResolution+0x7a>
          {
            ret = OV9655_ERROR;
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8002d32:	2102      	movs	r1, #2
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8c3 	bl	8002ec0 <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b8f      	cmp	r3, #143	; 0x8f
 8002d44:	d9d8      	bls.n	8002cf8 <OV9655_SetResolution+0x40>
        }
      }
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e023      	b.n	8002d94 <OV9655_SetResolution+0xdc>
      {
        if(ret != OV9655_ERROR)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d01c      	beq.n	8002d8e <OV9655_SetResolution+0xd6>
        {
          tmp = OV9655_QQVGA[index][1];
 8002d54:	4a57      	ldr	r2, [pc, #348]	; (8002eb4 <OV9655_SetResolution+0x1fc>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 0018 	add.w	r0, r3, #24
 8002d66:	4a53      	ldr	r2, [pc, #332]	; (8002eb4 <OV9655_SetResolution+0x1fc>)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002d6e:	b299      	uxth	r1, r3
 8002d70:	f107 020f 	add.w	r2, r7, #15
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 f8c7 	bl	8002f08 <ov9655_write_reg>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <OV9655_SetResolution+0xce>
          {
            ret = OV9655_ERROR;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8002d86:	2102      	movs	r1, #2
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f899 	bl	8002ec0 <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	3301      	adds	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d9d8      	bls.n	8002d4c <OV9655_SetResolution+0x94>
        }
      }
      break;
 8002d9a:	e083      	b.n	8002ea4 <OV9655_SetResolution+0x1ec>
    case OV9655_R320x240:
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e023      	b.n	8002dea <OV9655_SetResolution+0x132>
      {
        if(ret != OV9655_ERROR)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d01c      	beq.n	8002de4 <OV9655_SetResolution+0x12c>
        {
          tmp = OV9655_QVGA_QQVGA[index][1];
 8002daa:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <OV9655_SetResolution+0x1f8>)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f103 0018 	add.w	r0, r3, #24
 8002dbc:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <OV9655_SetResolution+0x1f8>)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002dc4:	b299      	uxth	r1, r3
 8002dc6:	f107 020f 	add.w	r2, r7, #15
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f000 f89c 	bl	8002f08 <ov9655_write_reg>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <OV9655_SetResolution+0x124>
          {
            ret = OV9655_ERROR;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8002ddc:	2102      	movs	r1, #2
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f86e 	bl	8002ec0 <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	3301      	adds	r3, #1
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b8f      	cmp	r3, #143	; 0x8f
 8002dee:	d9d8      	bls.n	8002da2 <OV9655_SetResolution+0xea>
        }
      }
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e023      	b.n	8002e3e <OV9655_SetResolution+0x186>
      {
        if(ret != OV9655_ERROR)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d01c      	beq.n	8002e38 <OV9655_SetResolution+0x180>
        {
          tmp = OV9655_QVGA[index][1];
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <OV9655_SetResolution+0x200>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	785b      	ldrb	r3, [r3, #1]
 8002e08:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f103 0018 	add.w	r0, r3, #24
 8002e10:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <OV9655_SetResolution+0x200>)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	f107 020f 	add.w	r2, r7, #15
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f000 f872 	bl	8002f08 <ov9655_write_reg>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <OV9655_SetResolution+0x178>
          {
            ret = OV9655_ERROR;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8002e30:	2102      	movs	r1, #2
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f844 	bl	8002ec0 <OV9655_Delay>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d9d8      	bls.n	8002df6 <OV9655_SetResolution+0x13e>
        }
      }
      break;
 8002e44:	e02e      	b.n	8002ea4 <OV9655_SetResolution+0x1ec>
    case OV9655_R480x272:
    case OV9655_R640x480:
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e023      	b.n	8002e94 <OV9655_SetResolution+0x1dc>
      {
        if(ret != OV9655_ERROR)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d01c      	beq.n	8002e8e <OV9655_SetResolution+0x1d6>
        {
          tmp = OV9655_VGA[index][1];
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <OV9655_SetResolution+0x204>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f103 0018 	add.w	r0, r3, #24
 8002e66:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <OV9655_SetResolution+0x204>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002e6e:	b299      	uxth	r1, r3
 8002e70:	f107 020f 	add.w	r2, r7, #15
 8002e74:	2301      	movs	r3, #1
 8002e76:	f000 f847 	bl	8002f08 <ov9655_write_reg>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <OV9655_SetResolution+0x1ce>
          {
            ret = OV9655_ERROR;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8002e86:	2102      	movs	r1, #2
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f819 	bl	8002ec0 <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	3301      	adds	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b92      	cmp	r3, #146	; 0x92
 8002e98:	d9d8      	bls.n	8002e4c <OV9655_SetResolution+0x194>
        }
      }
      break;
 8002e9a:	e003      	b.n	8002ea4 <OV9655_SetResolution+0x1ec>
    default:
      ret = OV9655_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	617b      	str	r3, [r7, #20]
      break;
 8002ea2:	bf00      	nop
    }
  }

  return ret;
 8002ea4:	697b      	ldr	r3, [r7, #20]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0801194c 	.word	0x0801194c
 8002eb4:	08011a6c 	.word	0x08011a6c
 8002eb8:	08011a78 	.word	0x08011a78
 8002ebc:	08011a84 	.word	0x08011a84

08002ec0 <OV9655_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV9655_OK
  */
static int32_t OV9655_Delay(OV9655_Object_t *pObj, uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  /*uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
  while((pObj->IO.GetTick() - tickstart) < Delay)
  {
  }*/
	HAL_Delay(Delay);
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	f000 f876 	bl	8002fbc <HAL_Delay>
  return OV9655_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002eda:	b590      	push	{r4, r7, lr}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	4613      	mov	r3, r2
 8002eec:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685c      	ldr	r4, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6898      	ldr	r0, [r3, #8]
 8002ef6:	893b      	ldrh	r3, [r7, #8]
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	47a0      	blx	r4
 8002efe:	4603      	mov	r3, r0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	817b      	strh	r3, [r7, #10]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6898      	ldr	r0, [r3, #8]
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	8979      	ldrh	r1, [r7, #10]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	47a0      	blx	r4
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
	...

08002f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_Init+0x40>)
 8002f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_Init+0x40>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <HAL_Init+0x40>)
 8002f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_Init+0x40>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_Init+0x40>)
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f60:	2003      	movs	r0, #3
 8002f62:	f000 f8fc 	bl	800315e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7ff fc64 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6c:	f7ff f9ac 	bl	80022c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023c00 	.word	0x40023c00

08002f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_IncTick+0x20>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x24>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_IncTick+0x24>)
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000084 	.word	0x20000084
 8002fa0:	20018038 	.word	0x20018038

08002fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_GetTick+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20018038 	.word	0x20018038

08002fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff ffee 	bl	8002fa4 <HAL_GetTick>
 8002fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d005      	beq.n	8002fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_Delay+0x44>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fe2:	bf00      	nop
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d8f7      	bhi.n	8002fe4 <HAL_Delay+0x28>
  {
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000084 	.word	0x20000084

08003004 <__NVIC_SetPriorityGrouping>:
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ff4c 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003186:	f7ff ff61 	bl	800304c <__NVIC_GetPriorityGrouping>
 800318a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f7ff ffb1 	bl	80030f8 <NVIC_EncodePriority>
 8003196:	4602      	mov	r2, r0
 8003198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff80 	bl	80030a4 <__NVIC_SetPriority>
}
 80031a4:	bf00      	nop
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff54 	bl	8003068 <__NVIC_EnableIRQ>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_DCMI_Start_DMA+0x20>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e086      	b.n	80032f6 <HAL_DCMI_Start_DMA+0x12e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003206:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0202 	bic.w	r2, r2, #2
 8003216:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	4a34      	ldr	r2, [pc, #208]	; (8003300 <HAL_DCMI_Start_DMA+0x138>)
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	4a33      	ldr	r2, [pc, #204]	; (8003304 <HAL_DCMI_Start_DMA+0x13c>)
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	2200      	movs	r2, #0
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d20a      	bcs.n	800326a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3328      	adds	r3, #40	; 0x28
 800325e:	4619      	mov	r1, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	f000 fab4 	bl	80037d0 <HAL_DMA_Start_IT>
 8003268:	e038      	b.n	80032dc <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_DCMI_Start_DMA+0x138>)
 8003270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8003284:	e009      	b.n	800329a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	085a      	lsrs	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d2f0      	bcs.n	8003286 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	1e9a      	subs	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3328      	adds	r3, #40	; 0x28
 80032cc:	4619      	mov	r1, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	f000 fd5e 	bl	8003d98 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	08003441 	.word	0x08003441
 8003304:	0800356b 	.word	0x0800356b

08003308 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2204      	movs	r2, #4
 800333a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <HAL_DCMI_IRQHandler+0xf8>)
 8003344:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fa98 	bl	8003880 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2202      	movs	r2, #2
 8003360:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_DCMI_IRQHandler+0xf8>)
 800337c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fa7c 	bl	8003880 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d006      	beq.n	80033a0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2210      	movs	r2, #16
 8003398:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f83c 	bl	8003418 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2208      	movs	r2, #8
 80033b0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f83a 	bl	800342c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d019      	beq.n	80033f6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 021e 	bic.w	r2, r2, #30
 80033de:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fe fe7d 	bl	80020f0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	0800356b 	.word	0x0800356b

08003404 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d043      	beq.n	80034e2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003466:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <DCMI_DMAXferCplt+0x66>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d015      	beq.n	80034a6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	00da      	lsls	r2, r3, #3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	2200      	movs	r2, #0
 8003494:	4619      	mov	r1, r3
 8003496:	f001 fdc7 	bl	8005028 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
 80034a4:	e044      	b.n	8003530 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d13c      	bne.n	8003530 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	00da      	lsls	r2, r3, #3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	2201      	movs	r2, #1
 80034d0:	4619      	mov	r1, r3
 80034d2:	f001 fda9 	bl	8005028 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
 80034e0:	e026      	b.n	8003530 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e017      	b.n	8003530 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10f      	bne.n	8003530 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	0099      	lsls	r1, r3, #2
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	440a      	add	r2, r1
 8003526:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	429a      	cmp	r2, r3
 800353a:	d112      	bne.n	8003562 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d103      	bne.n	8003562 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	2b02      	cmp	r3, #2
 8003580:	d003      	beq.n	800358a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ff3a 	bl	8003404 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e05f      	b.n	800366a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe feae 	bl	8002320 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fe feab 	bl	8002320 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80035e0:	f023 0308 	bic.w	r3, r3, #8
 80035e4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80035fa:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003606:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003612:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b10      	cmp	r3, #16
 8003622:	d112      	bne.n	800364a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7f1b      	ldrb	r3, [r3, #28]
 8003628:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7f5b      	ldrb	r3, [r3, #29]
 800362e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003630:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7f9b      	ldrb	r3, [r3, #30]
 8003636:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003638:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7fdb      	ldrb	r3, [r3, #31]
 8003640:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003646:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003648:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 021e 	orr.w	r2, r2, #30
 8003658:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fc90 	bl	8002fa4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e099      	b.n	80037c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b0:	e00f      	b.n	80036d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b2:	f7ff fc77 	bl	8002fa4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d908      	bls.n	80036d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e078      	b.n	80037c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e8      	bne.n	80036b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <HAL_DMA_Init+0x158>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2b04      	cmp	r3, #4
 800372a:	d107      	bne.n	800373c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	4313      	orrs	r3, r2
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b04      	cmp	r3, #4
 8003764:	d117      	bne.n	8003796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa91 	bl	8003ca0 <DMA_CheckFifoParam>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003792:	2301      	movs	r3, #1
 8003794:	e016      	b.n	80037c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa48 	bl	8003c34 <DMA_CalcBaseAndBitshift>
 80037a4:	4603      	mov	r3, r0
 80037a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	f010803f 	.word	0xf010803f

080037d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_Start_IT+0x26>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e040      	b.n	8003878 <HAL_DMA_Start_IT+0xa8>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d12f      	bne.n	800386a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f9da 	bl	8003bd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	223f      	movs	r2, #63	; 0x3f
 800382a:	409a      	lsls	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0216 	orr.w	r2, r2, #22
 800383e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0208 	orr.w	r2, r2, #8
 8003856:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e005      	b.n	8003876 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d004      	beq.n	800389e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e00c      	b.n	80038b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2205      	movs	r2, #5
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038d0:	4b92      	ldr	r3, [pc, #584]	; (8003b1c <HAL_DMA_IRQHandler+0x258>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a92      	ldr	r2, [pc, #584]	; (8003b20 <HAL_DMA_IRQHandler+0x25c>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	0a9b      	lsrs	r3, r3, #10
 80038dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2208      	movs	r2, #8
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01a      	beq.n	8003930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	2208      	movs	r2, #8
 800391e:	409a      	lsls	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2201      	movs	r2, #1
 8003954:	409a      	lsls	r2, r3
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f043 0202 	orr.w	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	2204      	movs	r2, #4
 800396c:	409a      	lsls	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2204      	movs	r2, #4
 800398a:	409a      	lsls	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2210      	movs	r2, #16
 80039a2:	409a      	lsls	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d043      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d03c      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	2210      	movs	r2, #16
 80039c0:	409a      	lsls	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d018      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d024      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
 80039f2:	e01f      	b.n	8003a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01b      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
 8003a04:	e016      	b.n	8003a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0208 	bic.w	r2, r2, #8
 8003a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2220      	movs	r2, #32
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 808e 	beq.w	8003b62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8086 	beq.w	8003b62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d136      	bne.n	8003adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0216 	bic.w	r2, r2, #22
 8003a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x1da>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0208 	bic.w	r2, r2, #8
 8003aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	223f      	movs	r2, #63	; 0x3f
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d07d      	beq.n	8003bce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
        }
        return;
 8003ada:	e078      	b.n	8003bce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01c      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d030      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	e02b      	b.n	8003b62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
 8003b1a:	e022      	b.n	8003b62 <HAL_DMA_IRQHandler+0x29e>
 8003b1c:	2000007c 	.word	0x2000007c
 8003b20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0210 	bic.w	r2, r2, #16
 8003b40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d032      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d022      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2205      	movs	r2, #5
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d307      	bcc.n	8003baa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f2      	bne.n	8003b8e <HAL_DMA_IRQHandler+0x2ca>
 8003ba8:	e000      	b.n	8003bac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003baa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bce:	bf00      	nop
    }
  }
}
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop

08003bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d108      	bne.n	8003c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c16:	e007      	b.n	8003c28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3b10      	subs	r3, #16
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <DMA_CalcBaseAndBitshift+0x64>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c4e:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <DMA_CalcBaseAndBitshift+0x68>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d909      	bls.n	8003c76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	659a      	str	r2, [r3, #88]	; 0x58
 8003c74:	e007      	b.n	8003c86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	aaaaaaab 	.word	0xaaaaaaab
 8003c9c:	08011bac 	.word	0x08011bac

08003ca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11f      	bne.n	8003cfa <DMA_CheckFifoParam+0x5a>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d856      	bhi.n	8003d6e <DMA_CheckFifoParam+0xce>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <DMA_CheckFifoParam+0x28>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ceb 	.word	0x08003ceb
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	08003d6f 	.word	0x08003d6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d046      	beq.n	8003d72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce8:	e043      	b.n	8003d72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf2:	d140      	bne.n	8003d76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e03d      	b.n	8003d76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d121      	bne.n	8003d48 <DMA_CheckFifoParam+0xa8>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d837      	bhi.n	8003d7a <DMA_CheckFifoParam+0xda>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <DMA_CheckFifoParam+0x70>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d27 	.word	0x08003d27
 8003d18:	08003d21 	.word	0x08003d21
 8003d1c:	08003d39 	.word	0x08003d39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      break;
 8003d24:	e030      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d025      	beq.n	8003d7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d36:	e022      	b.n	8003d7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d40:	d11f      	bne.n	8003d82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d46:	e01c      	b.n	8003d82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d903      	bls.n	8003d56 <DMA_CheckFifoParam+0xb6>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d003      	beq.n	8003d5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d54:	e018      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5a:	e015      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6c:	e00b      	b.n	8003d86 <DMA_CheckFifoParam+0xe6>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e00a      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
 8003d74:	e008      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e006      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e004      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
    }
  } 
  
  return status; 
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop

08003d98 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d106      	bne.n	8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f001 b913 	b.w	8004fe6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f001 b901 	b.w	8004fe6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d102      	bne.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8003dee:	2302      	movs	r3, #2
 8003df0:	f001 b8f9 	b.w	8004fe6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f041 80e7 	bne.w	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e26:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f001 f910 	bl	800505c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b99      	ldr	r3, [pc, #612]	; (80040a8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d960      	bls.n	8003f0a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a97      	ldr	r2, [pc, #604]	; (80040ac <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d057      	beq.n	8003f02 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a96      	ldr	r2, [pc, #600]	; (80040b0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d050      	beq.n	8003efe <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a94      	ldr	r2, [pc, #592]	; (80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d049      	beq.n	8003efa <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a93      	ldr	r2, [pc, #588]	; (80040b8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d042      	beq.n	8003ef6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a91      	ldr	r2, [pc, #580]	; (80040bc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03a      	beq.n	8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a90      	ldr	r2, [pc, #576]	; (80040c0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d032      	beq.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8e      	ldr	r2, [pc, #568]	; (80040c4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02a      	beq.n	8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a8d      	ldr	r2, [pc, #564]	; (80040c8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a8b      	ldr	r2, [pc, #556]	; (80040cc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01a      	beq.n	8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a8a      	ldr	r2, [pc, #552]	; (80040d0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d012      	beq.n	8003ed2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a88      	ldr	r2, [pc, #544]	; (80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00a      	beq.n	8003ecc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a87      	ldr	r2, [pc, #540]	; (80040d8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d102      	bne.n	8003ec6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ec4:	e01e      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ec6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eca:	e01b      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ed0:	e018      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ed2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ed6:	e015      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003edc:	e012      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee2:	e00f      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee8:	e00c      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eee:	e009      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef4:	e006      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	e004      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003efa:	2320      	movs	r3, #32
 8003efc:	e002      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003efe:	2320      	movs	r3, #32
 8003f00:	e000      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003f02:	2320      	movs	r3, #32
 8003f04:	4a75      	ldr	r2, [pc, #468]	; (80040dc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003f06:	60d3      	str	r3, [r2, #12]
 8003f08:	e150      	b.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d960      	bls.n	8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a64      	ldr	r2, [pc, #400]	; (80040ac <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d057      	beq.n	8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a62      	ldr	r2, [pc, #392]	; (80040b0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d050      	beq.n	8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a61      	ldr	r2, [pc, #388]	; (80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d049      	beq.n	8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5f      	ldr	r2, [pc, #380]	; (80040b8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d042      	beq.n	8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a5e      	ldr	r2, [pc, #376]	; (80040bc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d03a      	beq.n	8003fbe <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5c      	ldr	r2, [pc, #368]	; (80040c0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d032      	beq.n	8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5b      	ldr	r2, [pc, #364]	; (80040c4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02a      	beq.n	8003fb2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a59      	ldr	r2, [pc, #356]	; (80040c8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a58      	ldr	r2, [pc, #352]	; (80040cc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01a      	beq.n	8003fa6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d012      	beq.n	8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00a      	beq.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a53      	ldr	r2, [pc, #332]	; (80040d8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d102      	bne.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003f8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f92:	e01e      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f98:	e01b      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003f9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f9e:	e018      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fa4:	e015      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003faa:	e012      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fb0:	e00f      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fb6:	e00c      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fbc:	e009      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fc2:	e006      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e004      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e002      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fcc:	2320      	movs	r3, #32
 8003fce:	e000      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	4a42      	ldr	r2, [pc, #264]	; (80040dc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003fd4:	6093      	str	r3, [r2, #8]
 8003fd6:	e0e9      	b.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f240 8083 	bls.w	80040ec <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a30      	ldr	r2, [pc, #192]	; (80040ac <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d057      	beq.n	80040a0 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d050      	beq.n	800409c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	; (80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d049      	beq.n	8004098 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2b      	ldr	r2, [pc, #172]	; (80040b8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d042      	beq.n	8004094 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d03a      	beq.n	800408e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d032      	beq.n	8004088 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d02a      	beq.n	8004082 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a24      	ldr	r2, [pc, #144]	; (80040cc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01a      	beq.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d012      	beq.n	8004070 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00a      	beq.n	800406a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d102      	bne.n	8004064 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800405e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004062:	e01e      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004068:	e01b      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800406a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800406e:	e018      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004074:	e015      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004076:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800407a:	e012      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800407c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004080:	e00f      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004086:	e00c      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800408c:	e009      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800408e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004092:	e006      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004094:	2320      	movs	r3, #32
 8004096:	e004      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8004098:	2320      	movs	r3, #32
 800409a:	e002      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800409c:	2320      	movs	r3, #32
 800409e:	e000      	b.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80040a0:	2320      	movs	r3, #32
 80040a2:	4a11      	ldr	r2, [pc, #68]	; (80040e8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 80040a4:	60d3      	str	r3, [r2, #12]
 80040a6:	e081      	b.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80040a8:	40026458 	.word	0x40026458
 80040ac:	40026010 	.word	0x40026010
 80040b0:	40026410 	.word	0x40026410
 80040b4:	40026070 	.word	0x40026070
 80040b8:	40026470 	.word	0x40026470
 80040bc:	40026028 	.word	0x40026028
 80040c0:	40026428 	.word	0x40026428
 80040c4:	40026088 	.word	0x40026088
 80040c8:	40026488 	.word	0x40026488
 80040cc:	40026040 	.word	0x40026040
 80040d0:	40026440 	.word	0x40026440
 80040d4:	400260a0 	.word	0x400260a0
 80040d8:	400264a0 	.word	0x400264a0
 80040dc:	40026400 	.word	0x40026400
 80040e0:	400260b8 	.word	0x400260b8
 80040e4:	40026058 	.word	0x40026058
 80040e8:	40026000 	.word	0x40026000
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a96      	ldr	r2, [pc, #600]	; (800434c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d057      	beq.n	80041a6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a95      	ldr	r2, [pc, #596]	; (8004350 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d050      	beq.n	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a93      	ldr	r2, [pc, #588]	; (8004354 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d049      	beq.n	800419e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a92      	ldr	r2, [pc, #584]	; (8004358 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d042      	beq.n	800419a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a90      	ldr	r2, [pc, #576]	; (800435c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03a      	beq.n	8004194 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a8f      	ldr	r2, [pc, #572]	; (8004360 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d032      	beq.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a8d      	ldr	r2, [pc, #564]	; (8004364 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02a      	beq.n	8004188 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a8c      	ldr	r2, [pc, #560]	; (8004368 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a8a      	ldr	r2, [pc, #552]	; (800436c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01a      	beq.n	800417c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a89      	ldr	r2, [pc, #548]	; (8004370 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d012      	beq.n	8004176 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a87      	ldr	r2, [pc, #540]	; (8004374 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00a      	beq.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a86      	ldr	r2, [pc, #536]	; (8004378 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d102      	bne.n	800416a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8004164:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004168:	e01e      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800416a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800416e:	e01b      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8004170:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004174:	e018      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8004176:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800417a:	e015      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800417c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004180:	e012      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8004182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004186:	e00f      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8004188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800418c:	e00c      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800418e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004192:	e009      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8004194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004198:	e006      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800419a:	2320      	movs	r3, #32
 800419c:	e004      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800419e:	2320      	movs	r3, #32
 80041a0:	e002      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80041a2:	2320      	movs	r3, #32
 80041a4:	e000      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80041a6:	2320      	movs	r3, #32
 80041a8:	4a74      	ldr	r2, [pc, #464]	; (800437c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 80041aa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b73      	ldr	r3, [pc, #460]	; (8004380 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d960      	bls.n	800427a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a63      	ldr	r2, [pc, #396]	; (800434c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d057      	beq.n	8004272 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a62      	ldr	r2, [pc, #392]	; (8004350 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d050      	beq.n	800426e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a60      	ldr	r2, [pc, #384]	; (8004354 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d049      	beq.n	800426a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5f      	ldr	r2, [pc, #380]	; (8004358 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d042      	beq.n	8004266 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5d      	ldr	r2, [pc, #372]	; (800435c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d03a      	beq.n	8004260 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5c      	ldr	r2, [pc, #368]	; (8004360 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d032      	beq.n	800425a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a5a      	ldr	r2, [pc, #360]	; (8004364 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02a      	beq.n	8004254 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a59      	ldr	r2, [pc, #356]	; (8004368 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a57      	ldr	r2, [pc, #348]	; (800436c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01a      	beq.n	8004248 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a56      	ldr	r2, [pc, #344]	; (8004370 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d012      	beq.n	8004242 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a54      	ldr	r2, [pc, #336]	; (8004374 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00a      	beq.n	800423c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a53      	ldr	r2, [pc, #332]	; (8004378 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d102      	bne.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8004230:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004234:	e01e      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800423a:	e01b      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800423c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004240:	e018      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004242:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004246:	e015      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004248:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800424c:	e012      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800424e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004252:	e00f      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004258:	e00c      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800425a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800425e:	e009      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004264:	e006      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004266:	2310      	movs	r3, #16
 8004268:	e004      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800426a:	2310      	movs	r3, #16
 800426c:	e002      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800426e:	2310      	movs	r3, #16
 8004270:	e000      	b.n	8004274 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8004272:	2310      	movs	r3, #16
 8004274:	4a43      	ldr	r2, [pc, #268]	; (8004384 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8004276:	60d3      	str	r3, [r2, #12]
 8004278:	e14f      	b.n	800451a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8004282:	429a      	cmp	r2, r3
 8004284:	f240 8082 	bls.w	800438c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d057      	beq.n	8004342 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d050      	beq.n	800433e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d049      	beq.n	800433a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d042      	beq.n	8004336 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d03a      	beq.n	8004330 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a28      	ldr	r2, [pc, #160]	; (8004360 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d032      	beq.n	800432a <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02a      	beq.n	8004324 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a25      	ldr	r2, [pc, #148]	; (8004368 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d022      	beq.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01a      	beq.n	8004318 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d012      	beq.n	8004312 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00a      	beq.n	800430c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d102      	bne.n	8004306 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8004300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004304:	e01e      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800430a:	e01b      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800430c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004310:	e018      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004312:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004316:	e015      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004318:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800431c:	e012      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800431e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004322:	e00f      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004328:	e00c      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800432a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432e:	e009      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004334:	e006      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004336:	2310      	movs	r3, #16
 8004338:	e004      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800433a:	2310      	movs	r3, #16
 800433c:	e002      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800433e:	2310      	movs	r3, #16
 8004340:	e000      	b.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8004342:	2310      	movs	r3, #16
 8004344:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e0e7      	b.n	800451a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800434a:	bf00      	nop
 800434c:	40026010 	.word	0x40026010
 8004350:	40026410 	.word	0x40026410
 8004354:	40026070 	.word	0x40026070
 8004358:	40026470 	.word	0x40026470
 800435c:	40026028 	.word	0x40026028
 8004360:	40026428 	.word	0x40026428
 8004364:	40026088 	.word	0x40026088
 8004368:	40026488 	.word	0x40026488
 800436c:	40026040 	.word	0x40026040
 8004370:	40026440 	.word	0x40026440
 8004374:	400260a0 	.word	0x400260a0
 8004378:	400264a0 	.word	0x400264a0
 800437c:	40026000 	.word	0x40026000
 8004380:	40026458 	.word	0x40026458
 8004384:	40026400 	.word	0x40026400
 8004388:	400260b8 	.word	0x400260b8
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	4b96      	ldr	r3, [pc, #600]	; (80045ec <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004394:	429a      	cmp	r2, r3
 8004396:	d960      	bls.n	800445a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a94      	ldr	r2, [pc, #592]	; (80045f0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d057      	beq.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a93      	ldr	r2, [pc, #588]	; (80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d050      	beq.n	800444e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a91      	ldr	r2, [pc, #580]	; (80045f8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d049      	beq.n	800444a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a90      	ldr	r2, [pc, #576]	; (80045fc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d042      	beq.n	8004446 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a8e      	ldr	r2, [pc, #568]	; (8004600 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d03a      	beq.n	8004440 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a8d      	ldr	r2, [pc, #564]	; (8004604 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d032      	beq.n	800443a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a8b      	ldr	r2, [pc, #556]	; (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d02a      	beq.n	8004434 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a8a      	ldr	r2, [pc, #552]	; (800460c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a88      	ldr	r2, [pc, #544]	; (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01a      	beq.n	8004428 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a87      	ldr	r2, [pc, #540]	; (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d012      	beq.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a85      	ldr	r2, [pc, #532]	; (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00a      	beq.n	800441c <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a84      	ldr	r2, [pc, #528]	; (800461c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d102      	bne.n	8004416 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004414:	e01e      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004416:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800441a:	e01b      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800441c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004420:	e018      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004426:	e015      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004428:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800442c:	e012      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800442e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004432:	e00f      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004438:	e00c      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800443a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800443e:	e009      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004444:	e006      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004446:	2310      	movs	r3, #16
 8004448:	e004      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800444a:	2310      	movs	r3, #16
 800444c:	e002      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800444e:	2310      	movs	r3, #16
 8004450:	e000      	b.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8004452:	2310      	movs	r3, #16
 8004454:	4a72      	ldr	r2, [pc, #456]	; (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8004456:	60d3      	str	r3, [r2, #12]
 8004458:	e05f      	b.n	800451a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a64      	ldr	r2, [pc, #400]	; (80045f0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d057      	beq.n	8004514 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a62      	ldr	r2, [pc, #392]	; (80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d050      	beq.n	8004510 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a61      	ldr	r2, [pc, #388]	; (80045f8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d049      	beq.n	800450c <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5f      	ldr	r2, [pc, #380]	; (80045fc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d042      	beq.n	8004508 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5e      	ldr	r2, [pc, #376]	; (8004600 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03a      	beq.n	8004502 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5c      	ldr	r2, [pc, #368]	; (8004604 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d032      	beq.n	80044fc <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a5b      	ldr	r2, [pc, #364]	; (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d02a      	beq.n	80044f6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a59      	ldr	r2, [pc, #356]	; (800460c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01a      	beq.n	80044ea <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a56      	ldr	r2, [pc, #344]	; (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d012      	beq.n	80044e4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a55      	ldr	r2, [pc, #340]	; (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00a      	beq.n	80044de <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a53      	ldr	r2, [pc, #332]	; (800461c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d102      	bne.n	80044d8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80044d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044d6:	e01e      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044dc:	e01b      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044e2:	e018      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044e8:	e015      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044ee:	e012      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f4:	e00f      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044fa:	e00c      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80044fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004500:	e009      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004506:	e006      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004508:	2310      	movs	r3, #16
 800450a:	e004      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800450c:	2310      	movs	r3, #16
 800450e:	e002      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004510:	2310      	movs	r3, #16
 8004512:	e000      	b.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004514:	2310      	movs	r3, #16
 8004516:	4a42      	ldr	r2, [pc, #264]	; (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8004518:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	4b40      	ldr	r3, [pc, #256]	; (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8004522:	429a      	cmp	r2, r3
 8004524:	f240 8082 	bls.w	800462c <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d057      	beq.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d050      	beq.n	80045de <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d049      	beq.n	80045da <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2c      	ldr	r2, [pc, #176]	; (80045fc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d042      	beq.n	80045d6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d03a      	beq.n	80045d0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d032      	beq.n	80045ca <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02a      	beq.n	80045c4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a26      	ldr	r2, [pc, #152]	; (800460c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01a      	beq.n	80045b8 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a23      	ldr	r2, [pc, #140]	; (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d012      	beq.n	80045b2 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a21      	ldr	r2, [pc, #132]	; (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00a      	beq.n	80045ac <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a20      	ldr	r2, [pc, #128]	; (800461c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d102      	bne.n	80045a6 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80045a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80045a4:	e01e      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045aa:	e01b      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80045b0:	e018      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80045b6:	e015      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80045bc:	e012      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c2:	e00f      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c8:	e00c      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ce:	e009      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d4:	e006      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045d6:	2308      	movs	r3, #8
 80045d8:	e004      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045da:	2308      	movs	r3, #8
 80045dc:	e002      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045de:	2308      	movs	r3, #8
 80045e0:	e000      	b.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80045e2:	2308      	movs	r3, #8
 80045e4:	4a10      	ldr	r2, [pc, #64]	; (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80045e6:	60d3      	str	r3, [r2, #12]
 80045e8:	e16f      	b.n	80048ca <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80045ea:	bf00      	nop
 80045ec:	40026058 	.word	0x40026058
 80045f0:	40026010 	.word	0x40026010
 80045f4:	40026410 	.word	0x40026410
 80045f8:	40026070 	.word	0x40026070
 80045fc:	40026470 	.word	0x40026470
 8004600:	40026028 	.word	0x40026028
 8004604:	40026428 	.word	0x40026428
 8004608:	40026088 	.word	0x40026088
 800460c:	40026488 	.word	0x40026488
 8004610:	40026040 	.word	0x40026040
 8004614:	40026440 	.word	0x40026440
 8004618:	400260a0 	.word	0x400260a0
 800461c:	400264a0 	.word	0x400264a0
 8004620:	40026000 	.word	0x40026000
 8004624:	40026458 	.word	0x40026458
 8004628:	40026400 	.word	0x40026400
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	4b94      	ldr	r3, [pc, #592]	; (8004884 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d960      	bls.n	80046fa <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a92      	ldr	r2, [pc, #584]	; (8004888 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d057      	beq.n	80046f2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a91      	ldr	r2, [pc, #580]	; (800488c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d050      	beq.n	80046ee <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a8f      	ldr	r2, [pc, #572]	; (8004890 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d049      	beq.n	80046ea <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a8e      	ldr	r2, [pc, #568]	; (8004894 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d042      	beq.n	80046e6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a8c      	ldr	r2, [pc, #560]	; (8004898 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03a      	beq.n	80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a8b      	ldr	r2, [pc, #556]	; (800489c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d032      	beq.n	80046da <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a89      	ldr	r2, [pc, #548]	; (80048a0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d02a      	beq.n	80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a88      	ldr	r2, [pc, #544]	; (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a86      	ldr	r2, [pc, #536]	; (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01a      	beq.n	80046c8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a85      	ldr	r2, [pc, #532]	; (80048ac <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d012      	beq.n	80046c2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a83      	ldr	r2, [pc, #524]	; (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00a      	beq.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0x924>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a82      	ldr	r2, [pc, #520]	; (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d102      	bne.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80046b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046b4:	e01e      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ba:	e01b      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046c0:	e018      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046c6:	e015      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046cc:	e012      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d2:	e00f      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d8:	e00c      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046de:	e009      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e4:	e006      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046e6:	2308      	movs	r3, #8
 80046e8:	e004      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046ea:	2308      	movs	r3, #8
 80046ec:	e002      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046ee:	2308      	movs	r3, #8
 80046f0:	e000      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80046f2:	2308      	movs	r3, #8
 80046f4:	4a70      	ldr	r2, [pc, #448]	; (80048b8 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	e0e7      	b.n	80048ca <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	4b6e      	ldr	r3, [pc, #440]	; (80048bc <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8004702:	429a      	cmp	r2, r3
 8004704:	d960      	bls.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a5f      	ldr	r2, [pc, #380]	; (8004888 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d057      	beq.n	80047c0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5d      	ldr	r2, [pc, #372]	; (800488c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d050      	beq.n	80047bc <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a5c      	ldr	r2, [pc, #368]	; (8004890 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d049      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a5a      	ldr	r2, [pc, #360]	; (8004894 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d042      	beq.n	80047b4 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a59      	ldr	r2, [pc, #356]	; (8004898 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d03a      	beq.n	80047ae <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a57      	ldr	r2, [pc, #348]	; (800489c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d032      	beq.n	80047a8 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a56      	ldr	r2, [pc, #344]	; (80048a0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d02a      	beq.n	80047a2 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d01a      	beq.n	8004796 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a51      	ldr	r2, [pc, #324]	; (80048ac <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d012      	beq.n	8004790 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a50      	ldr	r2, [pc, #320]	; (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00a      	beq.n	800478a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d102      	bne.n	8004784 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800477e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004782:	e01e      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004788:	e01b      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800478a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800478e:	e018      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004794:	e015      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004796:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800479a:	e012      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800479c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a0:	e00f      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a6:	e00c      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ac:	e009      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b2:	e006      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047b4:	2308      	movs	r3, #8
 80047b6:	e004      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047b8:	2308      	movs	r3, #8
 80047ba:	e002      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047bc:	2308      	movs	r3, #8
 80047be:	e000      	b.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80047c0:	2308      	movs	r3, #8
 80047c2:	4a3f      	ldr	r2, [pc, #252]	; (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80047c4:	60d3      	str	r3, [r2, #12]
 80047c6:	e080      	b.n	80048ca <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2e      	ldr	r2, [pc, #184]	; (8004888 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d078      	beq.n	80048c4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2d      	ldr	r2, [pc, #180]	; (800488c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d050      	beq.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	; (8004890 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d049      	beq.n	800487a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d042      	beq.n	8004876 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a28      	ldr	r2, [pc, #160]	; (8004898 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d03a      	beq.n	8004870 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a27      	ldr	r2, [pc, #156]	; (800489c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d032      	beq.n	800486a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02a      	beq.n	8004864 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01a      	beq.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d012      	beq.n	8004852 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00a      	beq.n	800484c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d102      	bne.n	8004846 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8004840:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004844:	e03f      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800484a:	e03c      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800484c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004850:	e039      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004852:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004856:	e036      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004858:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800485c:	e033      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800485e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004862:	e030      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004868:	e02d      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800486a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800486e:	e02a      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004874:	e027      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004876:	2308      	movs	r3, #8
 8004878:	e025      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800487a:	2308      	movs	r3, #8
 800487c:	e023      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800487e:	2308      	movs	r3, #8
 8004880:	e021      	b.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004882:	bf00      	nop
 8004884:	400260b8 	.word	0x400260b8
 8004888:	40026010 	.word	0x40026010
 800488c:	40026410 	.word	0x40026410
 8004890:	40026070 	.word	0x40026070
 8004894:	40026470 	.word	0x40026470
 8004898:	40026028 	.word	0x40026028
 800489c:	40026428 	.word	0x40026428
 80048a0:	40026088 	.word	0x40026088
 80048a4:	40026488 	.word	0x40026488
 80048a8:	40026040 	.word	0x40026040
 80048ac:	40026440 	.word	0x40026440
 80048b0:	400260a0 	.word	0x400260a0
 80048b4:	400264a0 	.word	0x400264a0
 80048b8:	40026400 	.word	0x40026400
 80048bc:	40026058 	.word	0x40026058
 80048c0:	40026000 	.word	0x40026000
 80048c4:	2308      	movs	r3, #8
 80048c6:	4a9a      	ldr	r2, [pc, #616]	; (8004b30 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80048c8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b98      	ldr	r3, [pc, #608]	; (8004b34 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d960      	bls.n	8004998 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a97      	ldr	r2, [pc, #604]	; (8004b38 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d057      	beq.n	8004990 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a95      	ldr	r2, [pc, #596]	; (8004b3c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d050      	beq.n	800498c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a94      	ldr	r2, [pc, #592]	; (8004b40 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d049      	beq.n	8004988 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a92      	ldr	r2, [pc, #584]	; (8004b44 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d042      	beq.n	8004984 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a91      	ldr	r2, [pc, #580]	; (8004b48 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d03a      	beq.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a8f      	ldr	r2, [pc, #572]	; (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d032      	beq.n	8004978 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a8e      	ldr	r2, [pc, #568]	; (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d02a      	beq.n	8004972 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a8c      	ldr	r2, [pc, #560]	; (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a8b      	ldr	r2, [pc, #556]	; (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01a      	beq.n	8004966 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a89      	ldr	r2, [pc, #548]	; (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d012      	beq.n	8004960 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a88      	ldr	r2, [pc, #544]	; (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00a      	beq.n	800495a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a86      	ldr	r2, [pc, #536]	; (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d102      	bne.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800494e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004952:	e01e      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004958:	e01b      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800495a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800495e:	e018      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004964:	e015      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004966:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800496a:	e012      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800496c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004970:	e00f      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004976:	e00c      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800497c:	e009      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800497e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004982:	e006      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004984:	2304      	movs	r3, #4
 8004986:	e004      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004988:	2304      	movs	r3, #4
 800498a:	e002      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800498c:	2304      	movs	r3, #4
 800498e:	e000      	b.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004990:	2304      	movs	r3, #4
 8004992:	4a75      	ldr	r2, [pc, #468]	; (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8004994:	60d3      	str	r3, [r2, #12]
 8004996:	e151      	b.n	8004c3c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d960      	bls.n	8004a66 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a63      	ldr	r2, [pc, #396]	; (8004b38 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d057      	beq.n	8004a5e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a62      	ldr	r2, [pc, #392]	; (8004b3c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d050      	beq.n	8004a5a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a60      	ldr	r2, [pc, #384]	; (8004b40 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d049      	beq.n	8004a56 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a5f      	ldr	r2, [pc, #380]	; (8004b44 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d042      	beq.n	8004a52 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5d      	ldr	r2, [pc, #372]	; (8004b48 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d03a      	beq.n	8004a4c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a5c      	ldr	r2, [pc, #368]	; (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d032      	beq.n	8004a46 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a5a      	ldr	r2, [pc, #360]	; (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02a      	beq.n	8004a40 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a59      	ldr	r2, [pc, #356]	; (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a57      	ldr	r2, [pc, #348]	; (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01a      	beq.n	8004a34 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a56      	ldr	r2, [pc, #344]	; (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d012      	beq.n	8004a2e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a54      	ldr	r2, [pc, #336]	; (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00a      	beq.n	8004a28 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a53      	ldr	r2, [pc, #332]	; (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d102      	bne.n	8004a22 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8004a1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a20:	e01e      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a26:	e01b      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a2c:	e018      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a32:	e015      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a38:	e012      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a3e:	e00f      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a44:	e00c      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4a:	e009      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a50:	e006      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a52:	2304      	movs	r3, #4
 8004a54:	e004      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a56:	2304      	movs	r3, #4
 8004a58:	e002      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	e000      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004a5e:	2304      	movs	r3, #4
 8004a60:	4a41      	ldr	r2, [pc, #260]	; (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8004a62:	6093      	str	r3, [r2, #8]
 8004a64:	e0ea      	b.n	8004c3c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4b40      	ldr	r3, [pc, #256]	; (8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	f240 8084 	bls.w	8004b7c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2f      	ldr	r2, [pc, #188]	; (8004b38 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d07a      	beq.n	8004b74 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2e      	ldr	r2, [pc, #184]	; (8004b3c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d050      	beq.n	8004b2a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2c      	ldr	r2, [pc, #176]	; (8004b40 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d049      	beq.n	8004b26 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2b      	ldr	r2, [pc, #172]	; (8004b44 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d042      	beq.n	8004b22 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	; (8004b48 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d03a      	beq.n	8004b1c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a28      	ldr	r2, [pc, #160]	; (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d032      	beq.n	8004b16 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02a      	beq.n	8004b10 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a25      	ldr	r2, [pc, #148]	; (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01a      	beq.n	8004b04 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d012      	beq.n	8004afe <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00a      	beq.n	8004af8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d102      	bne.n	8004af2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8004aec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004af0:	e041      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af6:	e03e      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004af8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004afc:	e03b      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004afe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b02:	e038      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b08:	e035      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b0e:	e032      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b14:	e02f      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b1a:	e02c      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b20:	e029      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b22:	2304      	movs	r3, #4
 8004b24:	e027      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b26:	2304      	movs	r3, #4
 8004b28:	e025      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	e023      	b.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004b2e:	bf00      	nop
 8004b30:	40026000 	.word	0x40026000
 8004b34:	40026458 	.word	0x40026458
 8004b38:	40026010 	.word	0x40026010
 8004b3c:	40026410 	.word	0x40026410
 8004b40:	40026070 	.word	0x40026070
 8004b44:	40026470 	.word	0x40026470
 8004b48:	40026028 	.word	0x40026028
 8004b4c:	40026428 	.word	0x40026428
 8004b50:	40026088 	.word	0x40026088
 8004b54:	40026488 	.word	0x40026488
 8004b58:	40026040 	.word	0x40026040
 8004b5c:	40026440 	.word	0x40026440
 8004b60:	400260a0 	.word	0x400260a0
 8004b64:	400264a0 	.word	0x400264a0
 8004b68:	40026400 	.word	0x40026400
 8004b6c:	400260b8 	.word	0x400260b8
 8004b70:	40026058 	.word	0x40026058
 8004b74:	2304      	movs	r3, #4
 8004b76:	4a94      	ldr	r2, [pc, #592]	; (8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004b78:	60d3      	str	r3, [r2, #12]
 8004b7a:	e05f      	b.n	8004c3c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a92      	ldr	r2, [pc, #584]	; (8004dcc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d057      	beq.n	8004c36 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a91      	ldr	r2, [pc, #580]	; (8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d050      	beq.n	8004c32 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a8f      	ldr	r2, [pc, #572]	; (8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d049      	beq.n	8004c2e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a8e      	ldr	r2, [pc, #568]	; (8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d042      	beq.n	8004c2a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a8c      	ldr	r2, [pc, #560]	; (8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03a      	beq.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a8b      	ldr	r2, [pc, #556]	; (8004de0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d032      	beq.n	8004c1e <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a89      	ldr	r2, [pc, #548]	; (8004de4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02a      	beq.n	8004c18 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a88      	ldr	r2, [pc, #544]	; (8004de8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d022      	beq.n	8004c12 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a86      	ldr	r2, [pc, #536]	; (8004dec <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01a      	beq.n	8004c0c <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a85      	ldr	r2, [pc, #532]	; (8004df0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d012      	beq.n	8004c06 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a83      	ldr	r2, [pc, #524]	; (8004df4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00a      	beq.n	8004c00 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a82      	ldr	r2, [pc, #520]	; (8004df8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d102      	bne.n	8004bfa <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8004bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bf8:	e01e      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bfe:	e01b      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c04:	e018      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c0a:	e015      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c10:	e012      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c16:	e00f      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c1c:	e00c      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c22:	e009      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c28:	e006      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	e004      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	e002      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c32:	2304      	movs	r3, #4
 8004c34:	e000      	b.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004c36:	2304      	movs	r3, #4
 8004c38:	4a63      	ldr	r2, [pc, #396]	; (8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004c3a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	4b6e      	ldr	r3, [pc, #440]	; (8004dfc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d95c      	bls.n	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5f      	ldr	r2, [pc, #380]	; (8004dcc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d053      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a5e      	ldr	r2, [pc, #376]	; (8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04c      	beq.n	8004cf6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5c      	ldr	r2, [pc, #368]	; (8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5b      	ldr	r2, [pc, #364]	; (8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d03e      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a59      	ldr	r2, [pc, #356]	; (8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d037      	beq.n	8004cea <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a58      	ldr	r2, [pc, #352]	; (8004de0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d030      	beq.n	8004ce6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a56      	ldr	r2, [pc, #344]	; (8004de4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d029      	beq.n	8004ce2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a55      	ldr	r2, [pc, #340]	; (8004de8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a53      	ldr	r2, [pc, #332]	; (8004dec <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01a      	beq.n	8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d012      	beq.n	8004cd2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00a      	beq.n	8004ccc <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a4f      	ldr	r2, [pc, #316]	; (8004df8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d102      	bne.n	8004cc6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8004cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cc4:	e01a      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cca:	e017      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cd0:	e014      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cd6:	e011      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cdc:	e00e      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	e00c      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	e00a      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	e008      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cea:	2340      	movs	r3, #64	; 0x40
 8004cec:	e006      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e004      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e002      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8004cfe:	60d3      	str	r3, [r2, #12]
 8004d00:	e141      	b.n	8004f86 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d97c      	bls.n	8004e08 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2e      	ldr	r2, [pc, #184]	; (8004dcc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d053      	beq.n	8004dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2c      	ldr	r2, [pc, #176]	; (8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04c      	beq.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a29      	ldr	r2, [pc, #164]	; (8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d03e      	beq.n	8004db4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d037      	beq.n	8004db0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a26      	ldr	r2, [pc, #152]	; (8004de0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d030      	beq.n	8004dac <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d029      	beq.n	8004da8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a22      	ldr	r2, [pc, #136]	; (8004dec <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01a      	beq.n	8004d9e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d012      	beq.n	8004d98 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00a      	beq.n	8004d92 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d102      	bne.n	8004d8c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8004d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8a:	e01a      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004d8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d90:	e017      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d96:	e014      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d9c:	e011      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004da2:	e00e      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004da4:	2340      	movs	r3, #64	; 0x40
 8004da6:	e00c      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004da8:	2340      	movs	r3, #64	; 0x40
 8004daa:	e00a      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	e008      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	e006      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e004      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e002      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4a0f      	ldr	r2, [pc, #60]	; (8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8004dc4:	6093      	str	r3, [r2, #8]
 8004dc6:	e0de      	b.n	8004f86 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8004dc8:	40026000 	.word	0x40026000
 8004dcc:	40026010 	.word	0x40026010
 8004dd0:	40026410 	.word	0x40026410
 8004dd4:	40026070 	.word	0x40026070
 8004dd8:	40026470 	.word	0x40026470
 8004ddc:	40026028 	.word	0x40026028
 8004de0:	40026428 	.word	0x40026428
 8004de4:	40026088 	.word	0x40026088
 8004de8:	40026488 	.word	0x40026488
 8004dec:	40026040 	.word	0x40026040
 8004df0:	40026440 	.word	0x40026440
 8004df4:	400260a0 	.word	0x400260a0
 8004df8:	400264a0 	.word	0x400264a0
 8004dfc:	40026458 	.word	0x40026458
 8004e00:	40026400 	.word	0x40026400
 8004e04:	400260b8 	.word	0x400260b8
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b78      	ldr	r3, [pc, #480]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d95c      	bls.n	8004ece <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a76      	ldr	r2, [pc, #472]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d053      	beq.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a75      	ldr	r2, [pc, #468]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d04c      	beq.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a73      	ldr	r2, [pc, #460]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d045      	beq.n	8004ebe <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a72      	ldr	r2, [pc, #456]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03e      	beq.n	8004eba <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a70      	ldr	r2, [pc, #448]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d037      	beq.n	8004eb6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a6f      	ldr	r2, [pc, #444]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d030      	beq.n	8004eb2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6d      	ldr	r2, [pc, #436]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d029      	beq.n	8004eae <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6c      	ldr	r2, [pc, #432]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6a      	ldr	r2, [pc, #424]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01a      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a69      	ldr	r2, [pc, #420]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d012      	beq.n	8004e9e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a67      	ldr	r2, [pc, #412]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00a      	beq.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a66      	ldr	r2, [pc, #408]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d102      	bne.n	8004e92 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8004e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e90:	e01a      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e96:	e017      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e9c:	e014      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea2:	e011      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea8:	e00e      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	e00c      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004eae:	2340      	movs	r3, #64	; 0x40
 8004eb0:	e00a      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	e008      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	e006      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e004      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e002      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4a56      	ldr	r2, [pc, #344]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004eca:	60d3      	str	r3, [r2, #12]
 8004ecc:	e05b      	b.n	8004f86 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a48      	ldr	r2, [pc, #288]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d053      	beq.n	8004f80 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a46      	ldr	r2, [pc, #280]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04c      	beq.n	8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a45      	ldr	r2, [pc, #276]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a43      	ldr	r2, [pc, #268]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d03e      	beq.n	8004f74 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a42      	ldr	r2, [pc, #264]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d037      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a40      	ldr	r2, [pc, #256]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d030      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d029      	beq.n	8004f68 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d022      	beq.n	8004f64 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3c      	ldr	r2, [pc, #240]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01a      	beq.n	8004f5e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3a      	ldr	r2, [pc, #232]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d012      	beq.n	8004f58 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a39      	ldr	r2, [pc, #228]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00a      	beq.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a37      	ldr	r2, [pc, #220]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d102      	bne.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8004f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f4a:	e01a      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f50:	e017      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f56:	e014      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f5c:	e011      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f62:	e00e      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	e00c      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	e00a      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	e008      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f70:	2340      	movs	r3, #64	; 0x40
 8004f72:	e006      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e004      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e002      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4a28      	ldr	r2, [pc, #160]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004f84:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0216 	orr.w	r2, r2, #22
 8004f94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fa4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0208 	orr.w	r2, r2, #8
 8004fc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e005      	b.n	8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40026058 	.word	0x40026058
 8004ff4:	40026010 	.word	0x40026010
 8004ff8:	40026410 	.word	0x40026410
 8004ffc:	40026070 	.word	0x40026070
 8005000:	40026470 	.word	0x40026470
 8005004:	40026028 	.word	0x40026028
 8005008:	40026428 	.word	0x40026428
 800500c:	40026088 	.word	0x40026088
 8005010:	40026488 	.word	0x40026488
 8005014:	40026040 	.word	0x40026040
 8005018:	40026440 	.word	0x40026440
 800501c:	400260a0 	.word	0x400260a0
 8005020:	400264a0 	.word	0x400264a0
 8005024:	40026000 	.word	0x40026000

08005028 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e003      	b.n	800504e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d108      	bne.n	800508c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800508a:	e007      	b.n	800509c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e16b      	b.n	800539c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050c4:	2201      	movs	r2, #1
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	429a      	cmp	r2, r3
 80050de:	f040 815a 	bne.w	8005396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d005      	beq.n	80050fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d130      	bne.n	800515c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	2203      	movs	r2, #3
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4013      	ands	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005130:	2201      	movs	r2, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 0201 	and.w	r2, r3, #1
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b03      	cmp	r3, #3
 8005166:	d017      	beq.n	8005198 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	2203      	movs	r2, #3
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d123      	bne.n	80051ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	08da      	lsrs	r2, r3, #3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3208      	adds	r2, #8
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	220f      	movs	r2, #15
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	08da      	lsrs	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3208      	adds	r2, #8
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	2203      	movs	r2, #3
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0203 	and.w	r2, r3, #3
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80b4 	beq.w	8005396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4b60      	ldr	r3, [pc, #384]	; (80053b4 <HAL_GPIO_Init+0x30c>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	4a5f      	ldr	r2, [pc, #380]	; (80053b4 <HAL_GPIO_Init+0x30c>)
 8005238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800523c:	6453      	str	r3, [r2, #68]	; 0x44
 800523e:	4b5d      	ldr	r3, [pc, #372]	; (80053b4 <HAL_GPIO_Init+0x30c>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800524a:	4a5b      	ldr	r2, [pc, #364]	; (80053b8 <HAL_GPIO_Init+0x310>)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	3302      	adds	r3, #2
 8005252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	220f      	movs	r2, #15
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_GPIO_Init+0x314>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d02b      	beq.n	80052ce <HAL_GPIO_Init+0x226>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a51      	ldr	r2, [pc, #324]	; (80053c0 <HAL_GPIO_Init+0x318>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d025      	beq.n	80052ca <HAL_GPIO_Init+0x222>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a50      	ldr	r2, [pc, #320]	; (80053c4 <HAL_GPIO_Init+0x31c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01f      	beq.n	80052c6 <HAL_GPIO_Init+0x21e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a4f      	ldr	r2, [pc, #316]	; (80053c8 <HAL_GPIO_Init+0x320>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d019      	beq.n	80052c2 <HAL_GPIO_Init+0x21a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a4e      	ldr	r2, [pc, #312]	; (80053cc <HAL_GPIO_Init+0x324>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_GPIO_Init+0x216>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a4d      	ldr	r2, [pc, #308]	; (80053d0 <HAL_GPIO_Init+0x328>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00d      	beq.n	80052ba <HAL_GPIO_Init+0x212>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4c      	ldr	r2, [pc, #304]	; (80053d4 <HAL_GPIO_Init+0x32c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <HAL_GPIO_Init+0x20e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a4b      	ldr	r2, [pc, #300]	; (80053d8 <HAL_GPIO_Init+0x330>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d101      	bne.n	80052b2 <HAL_GPIO_Init+0x20a>
 80052ae:	2307      	movs	r3, #7
 80052b0:	e00e      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052b2:	2308      	movs	r3, #8
 80052b4:	e00c      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e00a      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052be:	2304      	movs	r3, #4
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_Init+0x228>
 80052ce:	2300      	movs	r3, #0
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e0:	4935      	ldr	r1, [pc, #212]	; (80053b8 <HAL_GPIO_Init+0x310>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052ee:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_GPIO_Init+0x334>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005312:	4a32      	ldr	r2, [pc, #200]	; (80053dc <HAL_GPIO_Init+0x334>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005318:	4b30      	ldr	r3, [pc, #192]	; (80053dc <HAL_GPIO_Init+0x334>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800533c:	4a27      	ldr	r2, [pc, #156]	; (80053dc <HAL_GPIO_Init+0x334>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005342:	4b26      	ldr	r3, [pc, #152]	; (80053dc <HAL_GPIO_Init+0x334>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005366:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <HAL_GPIO_Init+0x334>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800536c:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_GPIO_Init+0x334>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005390:	4a12      	ldr	r2, [pc, #72]	; (80053dc <HAL_GPIO_Init+0x334>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	f67f ae90 	bls.w	80050c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40021400 	.word	0x40021400
 80053d4:	40021800 	.word	0x40021800
 80053d8:	40021c00 	.word	0x40021c00
 80053dc:	40013c00 	.word	0x40013c00

080053e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
 80053ec:	4613      	mov	r3, r2
 80053ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053f0:	787b      	ldrb	r3, [r7, #1]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053fc:	e003      	b.n	8005406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053fe:	887b      	ldrh	r3, [r7, #2]
 8005400:	041a      	lsls	r2, r3, #16
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	619a      	str	r2, [r3, #24]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e12b      	b.n	800567e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fd f866 	bl	800250c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005478:	f002 fd30 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800547c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4a81      	ldr	r2, [pc, #516]	; (8005688 <HAL_I2C_Init+0x274>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d807      	bhi.n	8005498 <HAL_I2C_Init+0x84>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4a80      	ldr	r2, [pc, #512]	; (800568c <HAL_I2C_Init+0x278>)
 800548c:	4293      	cmp	r3, r2
 800548e:	bf94      	ite	ls
 8005490:	2301      	movls	r3, #1
 8005492:	2300      	movhi	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e006      	b.n	80054a6 <HAL_I2C_Init+0x92>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4a7d      	ldr	r2, [pc, #500]	; (8005690 <HAL_I2C_Init+0x27c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	bf94      	ite	ls
 80054a0:	2301      	movls	r3, #1
 80054a2:	2300      	movhi	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e0e7      	b.n	800567e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4a78      	ldr	r2, [pc, #480]	; (8005694 <HAL_I2C_Init+0x280>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0c9b      	lsrs	r3, r3, #18
 80054b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a6a      	ldr	r2, [pc, #424]	; (8005688 <HAL_I2C_Init+0x274>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d802      	bhi.n	80054e8 <HAL_I2C_Init+0xd4>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3301      	adds	r3, #1
 80054e6:	e009      	b.n	80054fc <HAL_I2C_Init+0xe8>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	4a69      	ldr	r2, [pc, #420]	; (8005698 <HAL_I2C_Init+0x284>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	099b      	lsrs	r3, r3, #6
 80054fa:	3301      	adds	r3, #1
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800550e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	495c      	ldr	r1, [pc, #368]	; (8005688 <HAL_I2C_Init+0x274>)
 8005518:	428b      	cmp	r3, r1
 800551a:	d819      	bhi.n	8005550 <HAL_I2C_Init+0x13c>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e59      	subs	r1, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fbb1 f3f3 	udiv	r3, r1, r3
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005530:	400b      	ands	r3, r1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_I2C_Init+0x138>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1e59      	subs	r1, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	fbb1 f3f3 	udiv	r3, r1, r3
 8005544:	3301      	adds	r3, #1
 8005546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554a:	e051      	b.n	80055f0 <HAL_I2C_Init+0x1dc>
 800554c:	2304      	movs	r3, #4
 800554e:	e04f      	b.n	80055f0 <HAL_I2C_Init+0x1dc>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d111      	bne.n	800557c <HAL_I2C_Init+0x168>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1e58      	subs	r0, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	440b      	add	r3, r1
 8005566:	fbb0 f3f3 	udiv	r3, r0, r3
 800556a:	3301      	adds	r3, #1
 800556c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e012      	b.n	80055a2 <HAL_I2C_Init+0x18e>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1e58      	subs	r0, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	0099      	lsls	r1, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005592:	3301      	adds	r3, #1
 8005594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_I2C_Init+0x196>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e022      	b.n	80055f0 <HAL_I2C_Init+0x1dc>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10e      	bne.n	80055d0 <HAL_I2C_Init+0x1bc>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1e58      	subs	r0, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	440b      	add	r3, r1
 80055c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c4:	3301      	adds	r3, #1
 80055c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ce:	e00f      	b.n	80055f0 <HAL_I2C_Init+0x1dc>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e58      	subs	r0, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	0099      	lsls	r1, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	6809      	ldr	r1, [r1, #0]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800561e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6911      	ldr	r1, [r2, #16]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	4311      	orrs	r1, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	430b      	orrs	r3, r1
 8005632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	000186a0 	.word	0x000186a0
 800568c:	001e847f 	.word	0x001e847f
 8005690:	003d08ff 	.word	0x003d08ff
 8005694:	431bde83 	.word	0x431bde83
 8005698:	10624dd3 	.word	0x10624dd3

0800569c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	461a      	mov	r2, r3
 80056a8:	460b      	mov	r3, r1
 80056aa:	817b      	strh	r3, [r7, #10]
 80056ac:	4613      	mov	r3, r2
 80056ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056b0:	f7fd fc78 	bl	8002fa4 <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b20      	cmp	r3, #32
 80056c0:	f040 80e0 	bne.w	8005884 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2319      	movs	r3, #25
 80056ca:	2201      	movs	r2, #1
 80056cc:	4970      	ldr	r1, [pc, #448]	; (8005890 <HAL_I2C_Master_Transmit+0x1f4>)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fc58 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
 80056dc:	e0d3      	b.n	8005886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_I2C_Master_Transmit+0x50>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e0cc      	b.n	8005886 <HAL_I2C_Master_Transmit+0x1ea>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d007      	beq.n	8005712 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005720:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2221      	movs	r2, #33	; 0x21
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2210      	movs	r2, #16
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	893a      	ldrh	r2, [r7, #8]
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a50      	ldr	r2, [pc, #320]	; (8005894 <HAL_I2C_Master_Transmit+0x1f8>)
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005754:	8979      	ldrh	r1, [r7, #10]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fac2 	bl	8005ce4 <I2C_MasterRequestWrite>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e08d      	b.n	8005886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005780:	e066      	b.n	8005850 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	6a39      	ldr	r1, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fcd2 	bl	8006130 <I2C_WaitOnTXEFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b04      	cmp	r3, #4
 8005798:	d107      	bne.n	80057aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e06b      	b.n	8005886 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d11b      	bne.n	8005824 <HAL_I2C_Master_Transmit+0x188>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d017      	beq.n	8005824 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	781a      	ldrb	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	6a39      	ldr	r1, [r7, #32]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fcc2 	bl	80061b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	2b04      	cmp	r3, #4
 800583a:	d107      	bne.n	800584c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e01a      	b.n	8005886 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d194      	bne.n	8005782 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	00100002 	.word	0x00100002
 8005894:	ffff0000 	.word	0xffff0000

08005898 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	; 0x30
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	461a      	mov	r2, r3
 80058a4:	460b      	mov	r3, r1
 80058a6:	817b      	strh	r3, [r7, #10]
 80058a8:	4613      	mov	r3, r2
 80058aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058ac:	f7fd fb7a 	bl	8002fa4 <HAL_GetTick>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	f040 820b 	bne.w	8005cd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2319      	movs	r3, #25
 80058c6:	2201      	movs	r2, #1
 80058c8:	497c      	ldr	r1, [pc, #496]	; (8005abc <HAL_I2C_Master_Receive+0x224>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fb5a 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
 80058d8:	e1fe      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_I2C_Master_Receive+0x50>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e1f7      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d007      	beq.n	800590e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2222      	movs	r2, #34	; 0x22
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2210      	movs	r2, #16
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	893a      	ldrh	r2, [r7, #8]
 800593e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a5c      	ldr	r2, [pc, #368]	; (8005ac0 <HAL_I2C_Master_Receive+0x228>)
 800594e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005950:	8979      	ldrh	r1, [r7, #10]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fa46 	bl	8005de8 <I2C_MasterRequestRead>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e1b8      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	2b00      	cmp	r3, #0
 800596c:	d113      	bne.n	8005996 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596e:	2300      	movs	r3, #0
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e18c      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	2b01      	cmp	r3, #1
 800599c:	d11b      	bne.n	80059d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e16c      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d11b      	bne.n	8005a16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	e14c      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a3c:	e138      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	f200 80f1 	bhi.w	8005c2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d123      	bne.n	8005a98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fbed 	bl	8006234 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e139      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a96:	e10b      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d14e      	bne.n	8005b3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4906      	ldr	r1, [pc, #24]	; (8005ac4 <HAL_I2C_Master_Receive+0x22c>)
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fa6a 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e10e      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
 8005aba:	bf00      	nop
 8005abc:	00100002 	.word	0x00100002
 8005ac0:	ffff0000 	.word	0xffff0000
 8005ac4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b3c:	e0b8      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2200      	movs	r2, #0
 8005b46:	4966      	ldr	r1, [pc, #408]	; (8005ce0 <HAL_I2C_Master_Receive+0x448>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fa1b 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0bf      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	494f      	ldr	r1, [pc, #316]	; (8005ce0 <HAL_I2C_Master_Receive+0x448>)
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f9ed 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e091      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c28:	e042      	b.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fb00 	bl	8006234 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e04c      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d118      	bne.n	8005cb0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f aec2 	bne.w	8005a3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3728      	adds	r7, #40	; 0x28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	00010004 	.word	0x00010004

08005ce4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d006      	beq.n	8005d0e <I2C_MasterRequestWrite+0x2a>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d003      	beq.n	8005d0e <I2C_MasterRequestWrite+0x2a>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d0c:	d108      	bne.n	8005d20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e00b      	b.n	8005d38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	2b12      	cmp	r3, #18
 8005d26:	d107      	bne.n	8005d38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f91d 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00d      	beq.n	8005d6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5e:	d103      	bne.n	8005d68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e035      	b.n	8005dd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d74:	d108      	bne.n	8005d88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d84:	611a      	str	r2, [r3, #16]
 8005d86:	e01b      	b.n	8005dc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d88:	897b      	ldrh	r3, [r7, #10]
 8005d8a:	11db      	asrs	r3, r3, #7
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0306 	and.w	r3, r3, #6
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f063 030f 	orn	r3, r3, #15
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	490e      	ldr	r1, [pc, #56]	; (8005de0 <I2C_MasterRequestWrite+0xfc>)
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f943 	bl	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e010      	b.n	8005dd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005db6:	897b      	ldrh	r3, [r7, #10]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4907      	ldr	r1, [pc, #28]	; (8005de4 <I2C_MasterRequestWrite+0x100>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f933 	bl	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	00010008 	.word	0x00010008
 8005de4:	00010002 	.word	0x00010002

08005de8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	460b      	mov	r3, r1
 8005df6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d006      	beq.n	8005e22 <I2C_MasterRequestRead+0x3a>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d003      	beq.n	8005e22 <I2C_MasterRequestRead+0x3a>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e20:	d108      	bne.n	8005e34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e00b      	b.n	8005e4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	2b11      	cmp	r3, #17
 8005e3a:	d107      	bne.n	8005e4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f893 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e72:	d103      	bne.n	8005e7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e079      	b.n	8005f74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e88:	d108      	bne.n	8005e9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e8a:	897b      	ldrh	r3, [r7, #10]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]
 8005e9a:	e05f      	b.n	8005f5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e9c:	897b      	ldrh	r3, [r7, #10]
 8005e9e:	11db      	asrs	r3, r3, #7
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0306 	and.w	r3, r3, #6
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f063 030f 	orn	r3, r3, #15
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4930      	ldr	r1, [pc, #192]	; (8005f7c <I2C_MasterRequestRead+0x194>)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f8b9 	bl	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e054      	b.n	8005f74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005eca:	897b      	ldrh	r3, [r7, #10]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4929      	ldr	r1, [pc, #164]	; (8005f80 <I2C_MasterRequestRead+0x198>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f8a9 	bl	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e044      	b.n	8005f74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f831 	bl	8005f84 <I2C_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00d      	beq.n	8005f44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f36:	d103      	bne.n	8005f40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e017      	b.n	8005f74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f44:	897b      	ldrh	r3, [r7, #10]
 8005f46:	11db      	asrs	r3, r3, #7
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f003 0306 	and.w	r3, r3, #6
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f063 030e 	orn	r3, r3, #14
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4907      	ldr	r1, [pc, #28]	; (8005f80 <I2C_MasterRequestRead+0x198>)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f865 	bl	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	00010008 	.word	0x00010008
 8005f80:	00010002 	.word	0x00010002

08005f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f94:	e025      	b.n	8005fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d021      	beq.n	8005fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9e:	f7fd f801 	bl	8002fa4 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d302      	bcc.n	8005fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d116      	bne.n	8005fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e023      	b.n	800602a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10d      	bne.n	8006008 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bf0c      	ite	eq
 8005ffe:	2301      	moveq	r3, #1
 8006000:	2300      	movne	r3, #0
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	e00c      	b.n	8006022 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	43da      	mvns	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	429a      	cmp	r2, r3
 8006026:	d0b6      	beq.n	8005f96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006040:	e051      	b.n	80060e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006050:	d123      	bne.n	800609a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006060:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800606a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e046      	b.n	8006128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d021      	beq.n	80060e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fc ff7f 	bl	8002fa4 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f043 0220 	orr.w	r2, r3, #32
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e020      	b.n	8006128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10c      	bne.n	800610a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	43da      	mvns	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e00b      	b.n	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	43da      	mvns	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf14      	ite	ne
 800611c:	2301      	movne	r3, #1
 800611e:	2300      	moveq	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d18d      	bne.n	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800613c:	e02d      	b.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f8ce 	bl	80062e0 <I2C_IsAcknowledgeFailed>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e02d      	b.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d021      	beq.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fc ff25 	bl	8002fa4 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d116      	bne.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0220 	orr.w	r2, r3, #32
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e007      	b.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d1ca      	bne.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061be:	e02d      	b.n	800621c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f88d 	bl	80062e0 <I2C_IsAcknowledgeFailed>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e02d      	b.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d021      	beq.n	800621c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d8:	f7fc fee4 	bl	8002fa4 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d116      	bne.n	800621c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e007      	b.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d1ca      	bne.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006240:	e042      	b.n	80062c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b10      	cmp	r3, #16
 800624e:	d119      	bne.n	8006284 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0210 	mvn.w	r2, #16
 8006258:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e029      	b.n	80062d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006284:	f7fc fe8e 	bl	8002fa4 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d116      	bne.n	80062c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e007      	b.n	80062d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d1b5      	bne.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f6:	d11b      	bne.n	8006330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	f043 0204 	orr.w	r2, r3, #4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800633e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006340:	b08f      	sub	sp, #60	; 0x3c
 8006342:	af0a      	add	r7, sp, #40	; 0x28
 8006344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e10f      	b.n	8006570 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f009 fe12 	bl	800ff94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2203      	movs	r2, #3
 8006374:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f003 fc9f 	bl	8009cd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	687e      	ldr	r6, [r7, #4]
 800639c:	466d      	mov	r5, sp
 800639e:	f106 0410 	add.w	r4, r6, #16
 80063a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80063b2:	1d33      	adds	r3, r6, #4
 80063b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f003 fb76 	bl	8009aa8 <USB_CoreInit>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e0d0      	b.n	8006570 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f003 fc8d 	bl	8009cf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
 80063de:	e04a      	b.n	8006476 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063e0:	7bfa      	ldrb	r2, [r7, #15]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	333d      	adds	r3, #61	; 0x3d
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	333c      	adds	r3, #60	; 0x3c
 8006404:	7bfa      	ldrb	r2, [r7, #15]
 8006406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	b298      	uxth	r0, r3
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	440b      	add	r3, r1
 800641a:	3342      	adds	r3, #66	; 0x42
 800641c:	4602      	mov	r2, r0
 800641e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006420:	7bfa      	ldrb	r2, [r7, #15]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	333f      	adds	r3, #63	; 0x3f
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006434:	7bfa      	ldrb	r2, [r7, #15]
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	3344      	adds	r3, #68	; 0x44
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006448:	7bfa      	ldrb	r2, [r7, #15]
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	3348      	adds	r3, #72	; 0x48
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3350      	adds	r3, #80	; 0x50
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	3301      	adds	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	7bfa      	ldrb	r2, [r7, #15]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	d3af      	bcc.n	80063e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
 8006484:	e044      	b.n	8006510 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006486:	7bfa      	ldrb	r2, [r7, #15]
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800649c:	7bfa      	ldrb	r2, [r7, #15]
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80064ae:	7bfa      	ldrb	r2, [r7, #15]
 80064b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064b2:	7bfa      	ldrb	r2, [r7, #15]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064c8:	7bfa      	ldrb	r2, [r7, #15]
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064de:	7bfa      	ldrb	r2, [r7, #15]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064f4:	7bfa      	ldrb	r2, [r7, #15]
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	3301      	adds	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	7bfa      	ldrb	r2, [r7, #15]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3b5      	bcc.n	8006486 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	687e      	ldr	r6, [r7, #4]
 8006522:	466d      	mov	r5, sp
 8006524:	f106 0410 	add.w	r4, r6, #16
 8006528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800652c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006530:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006534:	e885 0003 	stmia.w	r5, {r0, r1}
 8006538:	1d33      	adds	r3, r6, #4
 800653a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f003 fc03 	bl	8009d48 <USB_DevInit>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e00d      	b.n	8006570 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f004 fc4b 	bl	800ae04 <USB_DevDisconnect>

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006578 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_PCD_Start+0x1c>
 8006590:	2302      	movs	r3, #2
 8006592:	e020      	b.n	80065d6 <HAL_PCD_Start+0x5e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d109      	bne.n	80065b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d005      	beq.n	80065b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f003 fb77 	bl	8009cb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f004 fbfb 	bl	800adc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065de:	b590      	push	{r4, r7, lr}
 80065e0:	b08d      	sub	sp, #52	; 0x34
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f004 fcb9 	bl	800af6c <USB_GetMode>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 839d 	bne.w	8006d3c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f004 fc1d 	bl	800ae46 <USB_ReadInterrupts>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8393 	beq.w	8006d3a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f004 fc14 	bl	800ae46 <USB_ReadInterrupts>
 800661e:	4603      	mov	r3, r0
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d107      	bne.n	8006638 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f002 0202 	and.w	r2, r2, #2
 8006636:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f004 fc02 	bl	800ae46 <USB_ReadInterrupts>
 8006642:	4603      	mov	r3, r0
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b10      	cmp	r3, #16
 800664a:	d161      	bne.n	8006710 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0210 	bic.w	r2, r2, #16
 800665a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 020f 	and.w	r2, r3, #15
 8006668:	4613      	mov	r3, r2
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	3304      	adds	r3, #4
 800667a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	0c5b      	lsrs	r3, r3, #17
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	2b02      	cmp	r3, #2
 8006686:	d124      	bne.n	80066d2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d035      	beq.n	8006700 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800669e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	6a38      	ldr	r0, [r7, #32]
 80066a8:	f004 fa68 	bl	800ab7c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	091b      	lsrs	r3, r3, #4
 80066b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b8:	441a      	add	r2, r3
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ca:	441a      	add	r2, r3
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	619a      	str	r2, [r3, #24]
 80066d0:	e016      	b.n	8006700 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	0c5b      	lsrs	r3, r3, #17
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d110      	bne.n	8006700 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066e4:	2208      	movs	r2, #8
 80066e6:	4619      	mov	r1, r3
 80066e8:	6a38      	ldr	r0, [r7, #32]
 80066ea:	f004 fa47 	bl	800ab7c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066fa:	441a      	add	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0210 	orr.w	r2, r2, #16
 800670e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f004 fb96 	bl	800ae46 <USB_ReadInterrupts>
 800671a:	4603      	mov	r3, r0
 800671c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006724:	d16e      	bne.n	8006804 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f004 fb9c 	bl	800ae6c <USB_ReadDevAllOutEpInterrupt>
 8006734:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006736:	e062      	b.n	80067fe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d057      	beq.n	80067f2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f004 fbc1 	bl	800aed4 <USB_ReadDevOutEPInterrupt>
 8006752:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00c      	beq.n	8006778 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	461a      	mov	r2, r3
 800676c:	2301      	movs	r3, #1
 800676e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fdb0 	bl	80072d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00c      	beq.n	800679c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	461a      	mov	r2, r3
 8006790:	2308      	movs	r3, #8
 8006792:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 feaa 	bl	80074f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	461a      	mov	r2, r3
 80067b4:	2310      	movs	r3, #16
 80067b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	461a      	mov	r2, r3
 80067d0:	2320      	movs	r3, #32
 80067d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	461a      	mov	r2, r3
 80067ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	3301      	adds	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d199      	bne.n	8006738 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f004 fb1c 	bl	800ae46 <USB_ReadInterrupts>
 800680e:	4603      	mov	r3, r0
 8006810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006818:	f040 80c0 	bne.w	800699c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f004 fb3d 	bl	800aea0 <USB_ReadDevAllInEpInterrupt>
 8006826:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800682c:	e0b2      	b.n	8006994 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80a7 	beq.w	8006988 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	4611      	mov	r1, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f004 fb63 	bl	800af10 <USB_ReadDevInEPInterrupt>
 800684a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d057      	beq.n	8006906 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	2201      	movs	r2, #1
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	43db      	mvns	r3, r3
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006876:	4013      	ands	r3, r2
 8006878:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	461a      	mov	r2, r3
 8006888:	2301      	movs	r3, #1
 800688a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d132      	bne.n	80068fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3348      	adds	r3, #72	; 0x48
 80068a4:	6819      	ldr	r1, [r3, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4403      	add	r3, r0
 80068b4:	3344      	adds	r3, #68	; 0x44
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4419      	add	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4403      	add	r3, r0
 80068c8:	3348      	adds	r3, #72	; 0x48
 80068ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d113      	bne.n	80068fa <HAL_PCD_IRQHandler+0x31c>
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3350      	adds	r3, #80	; 0x50
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d108      	bne.n	80068fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068f2:	461a      	mov	r2, r3
 80068f4:	2101      	movs	r1, #1
 80068f6:	f004 fb6b 	bl	800afd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f009 fbc8 	bl	8010096 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	461a      	mov	r2, r3
 800691e:	2308      	movs	r3, #8
 8006920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	461a      	mov	r2, r3
 800693a:	2310      	movs	r3, #16
 800693c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	461a      	mov	r2, r3
 8006956:	2340      	movs	r3, #64	; 0x40
 8006958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006970:	461a      	mov	r2, r3
 8006972:	2302      	movs	r3, #2
 8006974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc1b 	bl	80071be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	3301      	adds	r3, #1
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	f47f af49 	bne.w	800682e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f004 fa50 	bl	800ae46 <USB_ReadInterrupts>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b0:	d122      	bne.n	80069f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d108      	bne.n	80069e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80069d8:	2100      	movs	r1, #0
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fe26 	bl	800762c <HAL_PCDEx_LPM_Callback>
 80069e0:	e002      	b.n	80069e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f009 fbce 	bl	8010184 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80069f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f004 fa22 	bl	800ae46 <USB_ReadInterrupts>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0c:	d112      	bne.n	8006a34 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d102      	bne.n	8006a24 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f009 fb8a 	bl	8010138 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006a32:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f004 fa04 	bl	800ae46 <USB_ReadInterrupts>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a48:	f040 80c7 	bne.w	8006bda <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a5a:	f023 0301 	bic.w	r3, r3, #1
 8006a5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2110      	movs	r1, #16
 8006a66:	4618      	mov	r0, r3
 8006a68:	f003 fad2 	bl	800a010 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a70:	e056      	b.n	8006b20 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	69fa      	ldr	r2, [r7, #28]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aa4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ad8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d3a3      	bcc.n	8006a72 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006b3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b56:	f043 030b 	orr.w	r3, r3, #11
 8006b5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6c:	f043 030b 	orr.w	r3, r3, #11
 8006b70:	6453      	str	r3, [r2, #68]	; 0x44
 8006b72:	e015      	b.n	8006ba0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006b8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9a:	f043 030b 	orr.w	r3, r3, #11
 8006b9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f004 fa03 	bl	800afd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f004 f931 	bl	800ae46 <USB_ReadInterrupts>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bee:	d124      	bne.n	8006c3a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f004 f9c7 	bl	800af88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f003 fa67 	bl	800a0d2 <USB_GetDevSpeed>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681c      	ldr	r4, [r3, #0]
 8006c10:	f001 f958 	bl	8007ec4 <HAL_RCC_GetHCLKFreq>
 8006c14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f002 ffa4 	bl	8009b6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f009 fa5e 	bl	80100e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f004 f901 	bl	800ae46 <USB_ReadInterrupts>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d10a      	bne.n	8006c64 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f009 fa3b 	bl	80100ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695a      	ldr	r2, [r3, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f002 0208 	and.w	r2, r2, #8
 8006c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f004 f8ec 	bl	800ae46 <USB_ReadInterrupts>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c78:	d10f      	bne.n	8006c9a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f009 fa9d 	bl	80101c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695a      	ldr	r2, [r3, #20]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f004 f8d1 	bl	800ae46 <USB_ReadInterrupts>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cae:	d10f      	bne.n	8006cd0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f009 fa70 	bl	80101a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695a      	ldr	r2, [r3, #20]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f004 f8b6 	bl	800ae46 <USB_ReadInterrupts>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce4:	d10a      	bne.n	8006cfc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f009 fa7e 	bl	80101e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695a      	ldr	r2, [r3, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f004 f8a0 	bl	800ae46 <USB_ReadInterrupts>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d115      	bne.n	8006d3c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f009 fa6e 	bl	8010204 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6859      	ldr	r1, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
 8006d38:	e000      	b.n	8006d3c <HAL_PCD_IRQHandler+0x75e>
      return;
 8006d3a:	bf00      	nop
    }
  }
}
 8006d3c:	3734      	adds	r7, #52	; 0x34
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd90      	pop	{r4, r7, pc}

08006d42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_PCD_SetAddress+0x1a>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e013      	b.n	8006d84 <HAL_PCD_SetAddress+0x42>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	78fa      	ldrb	r2, [r7, #3]
 8006d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f003 fffe 	bl	800ad76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	70fb      	strb	r3, [r7, #3]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	803b      	strh	r3, [r7, #0]
 8006da2:	4613      	mov	r3, r2
 8006da4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da0f      	bge.n	8006dd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	4613      	mov	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	3338      	adds	r3, #56	; 0x38
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	705a      	strb	r2, [r3, #1]
 8006dd0:	e00f      	b.n	8006df2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	f003 020f 	and.w	r2, r3, #15
 8006dd8:	4613      	mov	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	3304      	adds	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006dfe:	883a      	ldrh	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	78ba      	ldrb	r2, [r7, #2]
 8006e08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e1c:	78bb      	ldrb	r3, [r7, #2]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d102      	bne.n	8006e28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_PCD_EP_Open+0xaa>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e00e      	b.n	8006e54 <HAL_PCD_EP_Open+0xc8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f003 f969 	bl	800a11c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006e52:	7afb      	ldrb	r3, [r7, #11]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da0f      	bge.n	8006e90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 020f 	and.w	r2, r3, #15
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	3338      	adds	r3, #56	; 0x38
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	3304      	adds	r3, #4
 8006e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	705a      	strb	r2, [r3, #1]
 8006e8e:	e00f      	b.n	8006eb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	f003 020f 	and.w	r2, r3, #15
 8006e96:	4613      	mov	r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <HAL_PCD_EP_Close+0x6e>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e00e      	b.n	8006ee8 <HAL_PCD_EP_Close+0x8c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f003 f9a7 	bl	800a22c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	460b      	mov	r3, r1
 8006efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	f003 020f 	and.w	r2, r3, #15
 8006f06:	4613      	mov	r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	3304      	adds	r3, #4
 8006f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d102      	bne.n	8006f4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	f003 fc82 	bl	800a86c <USB_EP0StartXfer>
 8006f68:	e008      	b.n	8006f7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	6979      	ldr	r1, [r7, #20]
 8006f78:	f003 fa34 	bl	800a3e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006fa8:	681b      	ldr	r3, [r3, #0]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	f003 020f 	and.w	r2, r3, #15
 8006fcc:	4613      	mov	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	3338      	adds	r3, #56	; 0x38
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	3304      	adds	r3, #4
 8006fdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2200      	movs	r2, #0
 8006fee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d102      	bne.n	8007010 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	6979      	ldr	r1, [r7, #20]
 8007028:	f003 fc20 	bl	800a86c <USB_EP0StartXfer>
 800702c:	e008      	b.n	8007040 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	6979      	ldr	r1, [r7, #20]
 800703c:	f003 f9d2 	bl	800a3e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d901      	bls.n	8007068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e050      	b.n	800710a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da0f      	bge.n	8007090 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	f003 020f 	and.w	r2, r3, #15
 8007076:	4613      	mov	r3, r2
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	3338      	adds	r3, #56	; 0x38
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	705a      	strb	r2, [r3, #1]
 800708e:	e00d      	b.n	80070ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	4613      	mov	r3, r2
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	3304      	adds	r3, #4
 80070a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_PCD_EP_SetStall+0x82>
 80070c8:	2302      	movs	r3, #2
 80070ca:	e01e      	b.n	800710a <HAL_PCD_EP_SetStall+0xc0>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68f9      	ldr	r1, [r7, #12]
 80070da:	4618      	mov	r0, r3
 80070dc:	f003 fd77 	bl	800abce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	b2d9      	uxtb	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070fa:	461a      	mov	r2, r3
 80070fc:	f003 ff68 	bl	800afd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	f003 020f 	and.w	r2, r3, #15
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d901      	bls.n	8007130 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e042      	b.n	80071b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007134:	2b00      	cmp	r3, #0
 8007136:	da0f      	bge.n	8007158 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	f003 020f 	and.w	r2, r3, #15
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	3338      	adds	r3, #56	; 0x38
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4413      	add	r3, r2
 800714c:	3304      	adds	r3, #4
 800714e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	705a      	strb	r2, [r3, #1]
 8007156:	e00f      	b.n	8007178 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	f003 020f 	and.w	r2, r3, #15
 800715e:	4613      	mov	r3, r2
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	1a9b      	subs	r3, r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	b2da      	uxtb	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_PCD_EP_ClrStall+0x86>
 8007194:	2302      	movs	r3, #2
 8007196:	e00e      	b.n	80071b6 <HAL_PCD_EP_ClrStall+0xa4>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f003 fd7f 	bl	800acaa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b08a      	sub	sp, #40	; 0x28
 80071c2:	af02      	add	r7, sp, #8
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	4613      	mov	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	3338      	adds	r3, #56	; 0x38
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	3304      	adds	r3, #4
 80071e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d901      	bls.n	80071f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e06c      	b.n	80072d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	429a      	cmp	r2, r3
 800720a:	d902      	bls.n	8007212 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3303      	adds	r3, #3
 8007216:	089b      	lsrs	r3, r3, #2
 8007218:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800721a:	e02b      	b.n	8007274 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	429a      	cmp	r2, r3
 8007230:	d902      	bls.n	8007238 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3303      	adds	r3, #3
 800723c:	089b      	lsrs	r3, r3, #2
 800723e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68d9      	ldr	r1, [r3, #12]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	b2da      	uxtb	r2, r3
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007250:	b2db      	uxtb	r3, r3
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	6978      	ldr	r0, [r7, #20]
 8007258:	f003 fc5b 	bl	800ab12 <USB_WritePacket>

    ep->xfer_buff  += len;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	441a      	add	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	441a      	add	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	b29b      	uxth	r3, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	d809      	bhi.n	800729e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007292:	429a      	cmp	r2, r3
 8007294:	d203      	bcs.n	800729e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1be      	bne.n	800721c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d811      	bhi.n	80072ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	2201      	movs	r2, #1
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	6939      	ldr	r1, [r7, #16]
 80072c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ca:	4013      	ands	r3, r2
 80072cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	333c      	adds	r3, #60	; 0x3c
 80072f0:	3304      	adds	r3, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b01      	cmp	r3, #1
 800730c:	f040 80a0 	bne.w	8007450 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d015      	beq.n	8007346 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a72      	ldr	r2, [pc, #456]	; (80074e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800731e:	4293      	cmp	r3, r2
 8007320:	f240 80dd 	bls.w	80074de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80d7 	beq.w	80074de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007342:	6093      	str	r3, [r2, #8]
 8007344:	e0cb      	b.n	80074de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	461a      	mov	r2, r3
 800735e:	2320      	movs	r3, #32
 8007360:	6093      	str	r3, [r2, #8]
 8007362:	e0bc      	b.n	80074de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 80b7 	bne.w	80074de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a5d      	ldr	r2, [pc, #372]	; (80074e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d90f      	bls.n	8007398 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	461a      	mov	r2, r3
 8007390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	e0a2      	b.n	80074de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	0159      	lsls	r1, r3, #5
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	440b      	add	r3, r1
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80073be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4403      	add	r3, r0
 80073ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80073d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4403      	add	r3, r0
 80073f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4419      	add	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4613      	mov	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4403      	add	r3, r0
 800740c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007410:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d114      	bne.n	8007442 <PCD_EP_OutXfrComplete_int+0x16a>
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4613      	mov	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d108      	bne.n	8007442 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800743a:	461a      	mov	r2, r3
 800743c:	2101      	movs	r1, #1
 800743e:	f003 fdc7 	bl	800afd0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f008 fe09 	bl	8010060 <HAL_PCD_DataOutStageCallback>
 800744e:	e046      	b.n	80074de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a26      	ldr	r2, [pc, #152]	; (80074ec <PCD_EP_OutXfrComplete_int+0x214>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d124      	bne.n	80074a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	461a      	mov	r2, r3
 8007470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007474:	6093      	str	r3, [r2, #8]
 8007476:	e032      	b.n	80074de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d008      	beq.n	8007494 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	461a      	mov	r2, r3
 8007490:	2320      	movs	r3, #32
 8007492:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f008 fde0 	bl	8010060 <HAL_PCD_DataOutStageCallback>
 80074a0:	e01d      	b.n	80074de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d114      	bne.n	80074d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d108      	bne.n	80074d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074ca:	461a      	mov	r2, r3
 80074cc:	2100      	movs	r1, #0
 80074ce:	f003 fd7f 	bl	800afd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f008 fdc1 	bl	8010060 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	4f54300a 	.word	0x4f54300a
 80074ec:	4f54310a 	.word	0x4f54310a

080074f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	333c      	adds	r3, #60	; 0x3c
 8007508:	3304      	adds	r3, #4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4a15      	ldr	r2, [pc, #84]	; (8007578 <PCD_EP_OutSetupPacket_int+0x88>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d90e      	bls.n	8007544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	461a      	mov	r2, r3
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f008 fd79 	bl	801003c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a0a      	ldr	r2, [pc, #40]	; (8007578 <PCD_EP_OutSetupPacket_int+0x88>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d90c      	bls.n	800756c <PCD_EP_OutSetupPacket_int+0x7c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d108      	bne.n	800756c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007564:	461a      	mov	r2, r3
 8007566:	2101      	movs	r1, #1
 8007568:	f003 fd32 	bl	800afd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	4f54300a 	.word	0x4f54300a

0800757c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
 8007588:	4613      	mov	r3, r2
 800758a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d107      	bne.n	80075aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800759a:	883b      	ldrh	r3, [r7, #0]
 800759c:	0419      	lsls	r1, r3, #16
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28
 80075a8:	e028      	b.n	80075fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4413      	add	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
 80075bc:	e00d      	b.n	80075da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	3340      	adds	r3, #64	; 0x40
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	3301      	adds	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
 80075da:	7bfa      	ldrb	r2, [r7, #15]
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	3b01      	subs	r3, #1
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3ec      	bcc.n	80075be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075e4:	883b      	ldrh	r3, [r7, #0]
 80075e6:	0418      	lsls	r0, r3, #16
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6819      	ldr	r1, [r3, #0]
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	4302      	orrs	r2, r0
 80075f4:	3340      	adds	r3, #64	; 0x40
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	887a      	ldrh	r2, [r7, #2]
 800761c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e264      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d075      	beq.n	800774e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007662:	4ba3      	ldr	r3, [pc, #652]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b04      	cmp	r3, #4
 800766c:	d00c      	beq.n	8007688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800766e:	4ba0      	ldr	r3, [pc, #640]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007676:	2b08      	cmp	r3, #8
 8007678:	d112      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767a:	4b9d      	ldr	r3, [pc, #628]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007686:	d10b      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007688:	4b99      	ldr	r3, [pc, #612]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d05b      	beq.n	800774c <HAL_RCC_OscConfig+0x108>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d157      	bne.n	800774c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e23f      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d106      	bne.n	80076b8 <HAL_RCC_OscConfig+0x74>
 80076aa:	4b91      	ldr	r3, [pc, #580]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a90      	ldr	r2, [pc, #576]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e01d      	b.n	80076f4 <HAL_RCC_OscConfig+0xb0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c0:	d10c      	bne.n	80076dc <HAL_RCC_OscConfig+0x98>
 80076c2:	4b8b      	ldr	r3, [pc, #556]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a8a      	ldr	r2, [pc, #552]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	4b88      	ldr	r3, [pc, #544]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a87      	ldr	r2, [pc, #540]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e00b      	b.n	80076f4 <HAL_RCC_OscConfig+0xb0>
 80076dc:	4b84      	ldr	r3, [pc, #528]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a83      	ldr	r2, [pc, #524]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4b81      	ldr	r3, [pc, #516]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a80      	ldr	r2, [pc, #512]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d013      	beq.n	8007724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fc:	f7fb fc52 	bl	8002fa4 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007704:	f7fb fc4e 	bl	8002fa4 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	; 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e204      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007716:	4b76      	ldr	r3, [pc, #472]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCC_OscConfig+0xc0>
 8007722:	e014      	b.n	800774e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007724:	f7fb fc3e 	bl	8002fa4 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800772c:	f7fb fc3a 	bl	8002fa4 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b64      	cmp	r3, #100	; 0x64
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e1f0      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773e:	4b6c      	ldr	r3, [pc, #432]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0xe8>
 800774a:	e000      	b.n	800774e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800774c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d063      	beq.n	8007822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800775a:	4b65      	ldr	r3, [pc, #404]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007766:	4b62      	ldr	r3, [pc, #392]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800776e:	2b08      	cmp	r3, #8
 8007770:	d11c      	bne.n	80077ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007772:	4b5f      	ldr	r3, [pc, #380]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d116      	bne.n	80077ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800777e:	4b5c      	ldr	r3, [pc, #368]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_RCC_OscConfig+0x152>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d001      	beq.n	8007796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e1c4      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007796:	4b56      	ldr	r3, [pc, #344]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4952      	ldr	r1, [pc, #328]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077aa:	e03a      	b.n	8007822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d020      	beq.n	80077f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b4:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <HAL_RCC_OscConfig+0x2b0>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ba:	f7fb fbf3 	bl	8002fa4 <HAL_GetTick>
 80077be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c2:	f7fb fbef 	bl	8002fa4 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e1a5      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d4:	4b46      	ldr	r3, [pc, #280]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e0:	4b43      	ldr	r3, [pc, #268]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	4940      	ldr	r1, [pc, #256]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	600b      	str	r3, [r1, #0]
 80077f4:	e015      	b.n	8007822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077f6:	4b3f      	ldr	r3, [pc, #252]	; (80078f4 <HAL_RCC_OscConfig+0x2b0>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fc:	f7fb fbd2 	bl	8002fa4 <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007804:	f7fb fbce 	bl	8002fa4 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e184      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007816:	4b36      	ldr	r3, [pc, #216]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f0      	bne.n	8007804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d030      	beq.n	8007890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007836:	4b30      	ldr	r3, [pc, #192]	; (80078f8 <HAL_RCC_OscConfig+0x2b4>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783c:	f7fb fbb2 	bl	8002fa4 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007844:	f7fb fbae 	bl	8002fa4 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e164      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007856:	4b26      	ldr	r3, [pc, #152]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0f0      	beq.n	8007844 <HAL_RCC_OscConfig+0x200>
 8007862:	e015      	b.n	8007890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007864:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <HAL_RCC_OscConfig+0x2b4>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800786a:	f7fb fb9b 	bl	8002fa4 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007872:	f7fb fb97 	bl	8002fa4 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e14d      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80a0 	beq.w	80079de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10f      	bne.n	80078ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	4a0e      	ldr	r2, [pc, #56]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6413      	str	r3, [r2, #64]	; 0x40
 80078be:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c6:	60bb      	str	r3, [r7, #8]
 80078c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_RCC_OscConfig+0x2b8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d121      	bne.n	800791e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078da:	4b08      	ldr	r3, [pc, #32]	; (80078fc <HAL_RCC_OscConfig+0x2b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a07      	ldr	r2, [pc, #28]	; (80078fc <HAL_RCC_OscConfig+0x2b8>)
 80078e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078e6:	f7fb fb5d 	bl	8002fa4 <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ec:	e011      	b.n	8007912 <HAL_RCC_OscConfig+0x2ce>
 80078ee:	bf00      	nop
 80078f0:	40023800 	.word	0x40023800
 80078f4:	42470000 	.word	0x42470000
 80078f8:	42470e80 	.word	0x42470e80
 80078fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007900:	f7fb fb50 	bl	8002fa4 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e106      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007912:	4b85      	ldr	r3, [pc, #532]	; (8007b28 <HAL_RCC_OscConfig+0x4e4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d106      	bne.n	8007934 <HAL_RCC_OscConfig+0x2f0>
 8007926:	4b81      	ldr	r3, [pc, #516]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	4a80      	ldr	r2, [pc, #512]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6713      	str	r3, [r2, #112]	; 0x70
 8007932:	e01c      	b.n	800796e <HAL_RCC_OscConfig+0x32a>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b05      	cmp	r3, #5
 800793a:	d10c      	bne.n	8007956 <HAL_RCC_OscConfig+0x312>
 800793c:	4b7b      	ldr	r3, [pc, #492]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007940:	4a7a      	ldr	r2, [pc, #488]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007942:	f043 0304 	orr.w	r3, r3, #4
 8007946:	6713      	str	r3, [r2, #112]	; 0x70
 8007948:	4b78      	ldr	r3, [pc, #480]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	4a77      	ldr	r2, [pc, #476]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	6713      	str	r3, [r2, #112]	; 0x70
 8007954:	e00b      	b.n	800796e <HAL_RCC_OscConfig+0x32a>
 8007956:	4b75      	ldr	r3, [pc, #468]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795a:	4a74      	ldr	r2, [pc, #464]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	6713      	str	r3, [r2, #112]	; 0x70
 8007962:	4b72      	ldr	r3, [pc, #456]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	4a71      	ldr	r2, [pc, #452]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007968:	f023 0304 	bic.w	r3, r3, #4
 800796c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d015      	beq.n	80079a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007976:	f7fb fb15 	bl	8002fa4 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797c:	e00a      	b.n	8007994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800797e:	f7fb fb11 	bl	8002fa4 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f241 3288 	movw	r2, #5000	; 0x1388
 800798c:	4293      	cmp	r3, r2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e0c5      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007994:	4b65      	ldr	r3, [pc, #404]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0ee      	beq.n	800797e <HAL_RCC_OscConfig+0x33a>
 80079a0:	e014      	b.n	80079cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079a2:	f7fb faff 	bl	8002fa4 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a8:	e00a      	b.n	80079c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fb fafb 	bl	8002fa4 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e0af      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c0:	4b5a      	ldr	r3, [pc, #360]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1ee      	bne.n	80079aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d105      	bne.n	80079de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d2:	4b56      	ldr	r3, [pc, #344]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	4a55      	ldr	r2, [pc, #340]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 80079d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 809b 	beq.w	8007b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079e8:	4b50      	ldr	r3, [pc, #320]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 030c 	and.w	r3, r3, #12
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d05c      	beq.n	8007aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d141      	bne.n	8007a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079fc:	4b4c      	ldr	r3, [pc, #304]	; (8007b30 <HAL_RCC_OscConfig+0x4ec>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a02:	f7fb facf 	bl	8002fa4 <HAL_GetTick>
 8007a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a08:	e008      	b.n	8007a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a0a:	f7fb facb 	bl	8002fa4 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e081      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1c:	4b43      	ldr	r3, [pc, #268]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f0      	bne.n	8007a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69da      	ldr	r2, [r3, #28]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	019b      	lsls	r3, r3, #6
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	3b01      	subs	r3, #1
 8007a42:	041b      	lsls	r3, r3, #16
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	061b      	lsls	r3, r3, #24
 8007a4c:	4937      	ldr	r1, [pc, #220]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a52:	4b37      	ldr	r3, [pc, #220]	; (8007b30 <HAL_RCC_OscConfig+0x4ec>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a58:	f7fb faa4 	bl	8002fa4 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a60:	f7fb faa0 	bl	8002fa4 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e056      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a72:	4b2e      	ldr	r3, [pc, #184]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f0      	beq.n	8007a60 <HAL_RCC_OscConfig+0x41c>
 8007a7e:	e04e      	b.n	8007b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a80:	4b2b      	ldr	r3, [pc, #172]	; (8007b30 <HAL_RCC_OscConfig+0x4ec>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a86:	f7fb fa8d 	bl	8002fa4 <HAL_GetTick>
 8007a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a8e:	f7fb fa89 	bl	8002fa4 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e03f      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa0:	4b22      	ldr	r3, [pc, #136]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <HAL_RCC_OscConfig+0x44a>
 8007aac:	e037      	b.n	8007b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e032      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007aba:	4b1c      	ldr	r3, [pc, #112]	; (8007b2c <HAL_RCC_OscConfig+0x4e8>)
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d028      	beq.n	8007b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d121      	bne.n	8007b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d11a      	bne.n	8007b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007aea:	4013      	ands	r3, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d111      	bne.n	8007b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	3b01      	subs	r3, #1
 8007b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d107      	bne.n	8007b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d001      	beq.n	8007b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40007000 	.word	0x40007000
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	42470060 	.word	0x42470060

08007b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e0cc      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b48:	4b68      	ldr	r3, [pc, #416]	; (8007cec <HAL_RCC_ClockConfig+0x1b8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d90c      	bls.n	8007b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b56:	4b65      	ldr	r3, [pc, #404]	; (8007cec <HAL_RCC_ClockConfig+0x1b8>)
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5e:	4b63      	ldr	r3, [pc, #396]	; (8007cec <HAL_RCC_ClockConfig+0x1b8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d001      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0b8      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d020      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b88:	4b59      	ldr	r3, [pc, #356]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4a58      	ldr	r2, [pc, #352]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ba0:	4b53      	ldr	r3, [pc, #332]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4a52      	ldr	r2, [pc, #328]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bac:	4b50      	ldr	r3, [pc, #320]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	494d      	ldr	r1, [pc, #308]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d044      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d107      	bne.n	8007be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bd2:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d119      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e07f      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf2:	4b3f      	ldr	r3, [pc, #252]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e06f      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c02:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e067      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c12:	4b37      	ldr	r3, [pc, #220]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f023 0203 	bic.w	r2, r3, #3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	4934      	ldr	r1, [pc, #208]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c24:	f7fb f9be 	bl	8002fa4 <HAL_GetTick>
 8007c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c2a:	e00a      	b.n	8007c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c2c:	f7fb f9ba 	bl	8002fa4 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e04f      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c42:	4b2b      	ldr	r3, [pc, #172]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 020c 	and.w	r2, r3, #12
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d1eb      	bne.n	8007c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <HAL_RCC_ClockConfig+0x1b8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d20c      	bcs.n	8007c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c62:	4b22      	ldr	r3, [pc, #136]	; (8007cec <HAL_RCC_ClockConfig+0x1b8>)
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6a:	4b20      	ldr	r3, [pc, #128]	; (8007cec <HAL_RCC_ClockConfig+0x1b8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d001      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e032      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c88:	4b19      	ldr	r3, [pc, #100]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	4916      	ldr	r1, [pc, #88]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	490e      	ldr	r1, [pc, #56]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cba:	f000 f821 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	490a      	ldr	r1, [pc, #40]	; (8007cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8007ccc:	5ccb      	ldrb	r3, [r1, r3]
 8007cce:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <HAL_RCC_ClockConfig+0x1c8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fa fdaa 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40023c00 	.word	0x40023c00
 8007cf0:	40023800 	.word	0x40023800
 8007cf4:	08011934 	.word	0x08011934
 8007cf8:	2000007c 	.word	0x2000007c
 8007cfc:	20000080 	.word	0x20000080

08007d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	2300      	movs	r3, #0
 8007d12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d18:	4b67      	ldr	r3, [pc, #412]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f003 030c 	and.w	r3, r3, #12
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d00d      	beq.n	8007d40 <HAL_RCC_GetSysClockFreq+0x40>
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	f200 80bd 	bhi.w	8007ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x34>
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d003      	beq.n	8007d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8007d32:	e0b7      	b.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d34:	4b61      	ldr	r3, [pc, #388]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d36:	60bb      	str	r3, [r7, #8]
       break;
 8007d38:	e0b7      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d3a:	4b61      	ldr	r3, [pc, #388]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007d3c:	60bb      	str	r3, [r7, #8]
      break;
 8007d3e:	e0b4      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d40:	4b5d      	ldr	r3, [pc, #372]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d4a:	4b5b      	ldr	r3, [pc, #364]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d04d      	beq.n	8007df2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d56:	4b58      	ldr	r3, [pc, #352]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	099b      	lsrs	r3, r3, #6
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d66:	f04f 0100 	mov.w	r1, #0
 8007d6a:	ea02 0800 	and.w	r8, r2, r0
 8007d6e:	ea03 0901 	and.w	r9, r3, r1
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	014b      	lsls	r3, r1, #5
 8007d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d84:	0142      	lsls	r2, r0, #5
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	ebb0 0008 	subs.w	r0, r0, r8
 8007d8e:	eb61 0109 	sbc.w	r1, r1, r9
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	018b      	lsls	r3, r1, #6
 8007d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007da0:	0182      	lsls	r2, r0, #6
 8007da2:	1a12      	subs	r2, r2, r0
 8007da4:	eb63 0301 	sbc.w	r3, r3, r1
 8007da8:	f04f 0000 	mov.w	r0, #0
 8007dac:	f04f 0100 	mov.w	r1, #0
 8007db0:	00d9      	lsls	r1, r3, #3
 8007db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007db6:	00d0      	lsls	r0, r2, #3
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	eb12 0208 	adds.w	r2, r2, r8
 8007dc0:	eb43 0309 	adc.w	r3, r3, r9
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f04f 0100 	mov.w	r1, #0
 8007dcc:	0259      	lsls	r1, r3, #9
 8007dce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007dd2:	0250      	lsls	r0, r2, #9
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4619      	mov	r1, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	f7f8 f9f4 	bl	80001d0 <__aeabi_uldivmod>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4613      	mov	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e04a      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007df2:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	099b      	lsrs	r3, r3, #6
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e02:	f04f 0100 	mov.w	r1, #0
 8007e06:	ea02 0400 	and.w	r4, r2, r0
 8007e0a:	ea03 0501 	and.w	r5, r3, r1
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	014b      	lsls	r3, r1, #5
 8007e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e20:	0142      	lsls	r2, r0, #5
 8007e22:	4610      	mov	r0, r2
 8007e24:	4619      	mov	r1, r3
 8007e26:	1b00      	subs	r0, r0, r4
 8007e28:	eb61 0105 	sbc.w	r1, r1, r5
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	018b      	lsls	r3, r1, #6
 8007e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e3a:	0182      	lsls	r2, r0, #6
 8007e3c:	1a12      	subs	r2, r2, r0
 8007e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f04f 0100 	mov.w	r1, #0
 8007e4a:	00d9      	lsls	r1, r3, #3
 8007e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e50:	00d0      	lsls	r0, r2, #3
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	1912      	adds	r2, r2, r4
 8007e58:	eb45 0303 	adc.w	r3, r5, r3
 8007e5c:	f04f 0000 	mov.w	r0, #0
 8007e60:	f04f 0100 	mov.w	r1, #0
 8007e64:	0299      	lsls	r1, r3, #10
 8007e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e6a:	0290      	lsls	r0, r2, #10
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4610      	mov	r0, r2
 8007e72:	4619      	mov	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	f7f8 f9a8 	bl	80001d0 <__aeabi_uldivmod>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4613      	mov	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e88:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	3301      	adds	r3, #1
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	60bb      	str	r3, [r7, #8]
      break;
 8007ea2:	e002      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ea6:	60bb      	str	r3, [r7, #8]
      break;
 8007ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	007a1200 	.word	0x007a1200

08007ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ec8:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eca:	681b      	ldr	r3, [r3, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	2000007c 	.word	0x2000007c

08007edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ee0:	f7ff fff0 	bl	8007ec4 <HAL_RCC_GetHCLKFreq>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	0a9b      	lsrs	r3, r3, #10
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	4903      	ldr	r1, [pc, #12]	; (8007f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ef2:	5ccb      	ldrb	r3, [r1, r3]
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40023800 	.word	0x40023800
 8007f00:	08011944 	.word	0x08011944

08007f04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	220f      	movs	r2, #15
 8007f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f14:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <HAL_RCC_GetClockConfig+0x5c>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 0203 	and.w	r2, r3, #3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f20:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <HAL_RCC_GetClockConfig+0x5c>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_RCC_GetClockConfig+0x5c>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007f38:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <HAL_RCC_GetClockConfig+0x5c>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	08db      	lsrs	r3, r3, #3
 8007f3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f46:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <HAL_RCC_GetClockConfig+0x60>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0207 	and.w	r2, r3, #7
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	601a      	str	r2, [r3, #0]
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40023c00 	.word	0x40023c00

08007f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e07b      	b.n	8008072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f8a:	d009      	beq.n	8007fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	61da      	str	r2, [r3, #28]
 8007f92:	e005      	b.n	8007fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fa fb24 	bl	8002608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008024:	ea42 0103 	orr.w	r1, r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	0c1b      	lsrs	r3, r3, #16
 800803e:	f003 0104 	and.w	r1, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	f003 0210 	and.w	r2, r3, #16
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b088      	sub	sp, #32
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	603b      	str	r3, [r7, #0]
 8008086:	4613      	mov	r3, r2
 8008088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_SPI_Transmit+0x22>
 8008098:	2302      	movs	r3, #2
 800809a:	e126      	b.n	80082ea <HAL_SPI_Transmit+0x270>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080a4:	f7fa ff7e 	bl	8002fa4 <HAL_GetTick>
 80080a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d002      	beq.n	80080c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080ba:	2302      	movs	r3, #2
 80080bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080be:	e10b      	b.n	80082d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <HAL_SPI_Transmit+0x52>
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080d0:	e102      	b.n	80082d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2203      	movs	r2, #3
 80080d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008118:	d10f      	bne.n	800813a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d007      	beq.n	8008158 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008160:	d14b      	bne.n	80081fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_SPI_Transmit+0xf6>
 800816a:	8afb      	ldrh	r3, [r7, #22]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d13e      	bne.n	80081ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	881a      	ldrh	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	1c9a      	adds	r2, r3, #2
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008194:	e02b      	b.n	80081ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d112      	bne.n	80081ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a8:	881a      	ldrh	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b4:	1c9a      	adds	r2, r3, #2
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80081c8:	e011      	b.n	80081ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ca:	f7fa feeb 	bl	8002fa4 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d803      	bhi.n	80081e2 <HAL_SPI_Transmit+0x168>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e0:	d102      	bne.n	80081e8 <HAL_SPI_Transmit+0x16e>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081ec:	e074      	b.n	80082d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1ce      	bne.n	8008196 <HAL_SPI_Transmit+0x11c>
 80081f8:	e04c      	b.n	8008294 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <HAL_SPI_Transmit+0x18e>
 8008202:	8afb      	ldrh	r3, [r7, #22]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d140      	bne.n	800828a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	7812      	ldrb	r2, [r2, #0]
 8008214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800822e:	e02c      	b.n	800828a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b02      	cmp	r3, #2
 800823c:	d113      	bne.n	8008266 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	7812      	ldrb	r2, [r2, #0]
 800824a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	86da      	strh	r2, [r3, #54]	; 0x36
 8008264:	e011      	b.n	800828a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008266:	f7fa fe9d 	bl	8002fa4 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d803      	bhi.n	800827e <HAL_SPI_Transmit+0x204>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d102      	bne.n	8008284 <HAL_SPI_Transmit+0x20a>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008288:	e026      	b.n	80082d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1cd      	bne.n	8008230 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fbd9 	bl	8008a50 <SPI_EndRxTxTransaction>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e000      	b.n	80082d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80082d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3720      	adds	r7, #32
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b088      	sub	sp, #32
 80082f6:	af02      	add	r7, sp, #8
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800830e:	d112      	bne.n	8008336 <HAL_SPI_Receive+0x44>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10e      	bne.n	8008336 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2204      	movs	r2, #4
 800831c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	4613      	mov	r3, r2
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f8f1 	bl	8008514 <HAL_SPI_TransmitReceive>
 8008332:	4603      	mov	r3, r0
 8008334:	e0ea      	b.n	800850c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_SPI_Receive+0x52>
 8008340:	2302      	movs	r3, #2
 8008342:	e0e3      	b.n	800850c <HAL_SPI_Receive+0x21a>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800834c:	f7fa fe2a 	bl	8002fa4 <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b01      	cmp	r3, #1
 800835c:	d002      	beq.n	8008364 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800835e:	2302      	movs	r3, #2
 8008360:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008362:	e0ca      	b.n	80084fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_SPI_Receive+0x7e>
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008374:	e0c1      	b.n	80084fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2204      	movs	r2, #4
 800837a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	88fa      	ldrh	r2, [r7, #6]
 800838e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083bc:	d10f      	bne.n	80083de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d007      	beq.n	80083fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d162      	bne.n	80084ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008404:	e02e      	b.n	8008464 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	d115      	bne.n	8008440 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f103 020c 	add.w	r2, r3, #12
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	7812      	ldrb	r2, [r2, #0]
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800843e:	e011      	b.n	8008464 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008440:	f7fa fdb0 	bl	8002fa4 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d803      	bhi.n	8008458 <HAL_SPI_Receive+0x166>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008456:	d102      	bne.n	800845e <HAL_SPI_Receive+0x16c>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008462:	e04a      	b.n	80084fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1cb      	bne.n	8008406 <HAL_SPI_Receive+0x114>
 800846e:	e031      	b.n	80084d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b01      	cmp	r3, #1
 800847c:	d113      	bne.n	80084a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	b292      	uxth	r2, r2
 800848a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	1c9a      	adds	r2, r3, #2
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084a4:	e011      	b.n	80084ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084a6:	f7fa fd7d 	bl	8002fa4 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d803      	bhi.n	80084be <HAL_SPI_Receive+0x1cc>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084bc:	d102      	bne.n	80084c4 <HAL_SPI_Receive+0x1d2>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084c8:	e017      	b.n	80084fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1cd      	bne.n	8008470 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fa53 	bl	8008984 <SPI_EndRxTransaction>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2220      	movs	r2, #32
 80084e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e000      	b.n	80084fa <HAL_SPI_Receive+0x208>
  }

error :
 80084f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	; 0x30
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008522:	2301      	movs	r3, #1
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_SPI_TransmitReceive+0x26>
 8008536:	2302      	movs	r3, #2
 8008538:	e18a      	b.n	8008850 <HAL_SPI_TransmitReceive+0x33c>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008542:	f7fa fd2f 	bl	8002fa4 <HAL_GetTick>
 8008546:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800854e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008558:	887b      	ldrh	r3, [r7, #2]
 800855a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800855c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008560:	2b01      	cmp	r3, #1
 8008562:	d00f      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x70>
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800856a:	d107      	bne.n	800857c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <HAL_SPI_TransmitReceive+0x68>
 8008574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008578:	2b04      	cmp	r3, #4
 800857a:	d003      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800857c:	2302      	movs	r3, #2
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008582:	e15b      	b.n	800883c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_SPI_TransmitReceive+0x82>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <HAL_SPI_TransmitReceive+0x82>
 8008590:	887b      	ldrh	r3, [r7, #2]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800859c:	e14e      	b.n	800883c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d003      	beq.n	80085b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2205      	movs	r2, #5
 80085ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	887a      	ldrh	r2, [r7, #2]
 80085c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	887a      	ldrh	r2, [r7, #2]
 80085d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	887a      	ldrh	r2, [r7, #2]
 80085da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f2:	2b40      	cmp	r3, #64	; 0x40
 80085f4:	d007      	beq.n	8008606 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008604:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800860e:	d178      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <HAL_SPI_TransmitReceive+0x10a>
 8008618:	8b7b      	ldrh	r3, [r7, #26]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d166      	bne.n	80086ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	881a      	ldrh	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	1c9a      	adds	r2, r3, #2
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008642:	e053      	b.n	80086ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b02      	cmp	r3, #2
 8008650:	d11b      	bne.n	800868a <HAL_SPI_TransmitReceive+0x176>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d016      	beq.n	800868a <HAL_SPI_TransmitReceive+0x176>
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	2b01      	cmp	r3, #1
 8008660:	d113      	bne.n	800868a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	881a      	ldrh	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	1c9a      	adds	r2, r3, #2
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800867c:	b29b      	uxth	r3, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b01      	cmp	r3, #1
 8008696:	d119      	bne.n	80086cc <HAL_SPI_TransmitReceive+0x1b8>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d014      	beq.n	80086cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	b292      	uxth	r2, r2
 80086ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	1c9a      	adds	r2, r3, #2
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086c8:	2301      	movs	r3, #1
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086cc:	f7fa fc6a 	bl	8002fa4 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086d8:	429a      	cmp	r2, r3
 80086da:	d807      	bhi.n	80086ec <HAL_SPI_TransmitReceive+0x1d8>
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d003      	beq.n	80086ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086ea:	e0a7      	b.n	800883c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1a6      	bne.n	8008644 <HAL_SPI_TransmitReceive+0x130>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1a1      	bne.n	8008644 <HAL_SPI_TransmitReceive+0x130>
 8008700:	e07c      	b.n	80087fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_SPI_TransmitReceive+0x1fc>
 800870a:	8b7b      	ldrh	r3, [r7, #26]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d16b      	bne.n	80087e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	7812      	ldrb	r2, [r2, #0]
 800871c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008736:	e057      	b.n	80087e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d11c      	bne.n	8008780 <HAL_SPI_TransmitReceive+0x26c>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d017      	beq.n	8008780 <HAL_SPI_TransmitReceive+0x26c>
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	2b01      	cmp	r3, #1
 8008754:	d114      	bne.n	8008780 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	330c      	adds	r3, #12
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008772:	b29b      	uxth	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b01      	cmp	r3, #1
 800878c:	d119      	bne.n	80087c2 <HAL_SPI_TransmitReceive+0x2ae>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008792:	b29b      	uxth	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d014      	beq.n	80087c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087be:	2301      	movs	r3, #1
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087c2:	f7fa fbef 	bl	8002fa4 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d803      	bhi.n	80087da <HAL_SPI_TransmitReceive+0x2c6>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d102      	bne.n	80087e0 <HAL_SPI_TransmitReceive+0x2cc>
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80087e6:	e029      	b.n	800883c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1a2      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x224>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d19d      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f925 	bl	8008a50 <SPI_EndRxTxTransaction>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d006      	beq.n	800881a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008818:	e010      	b.n	800883c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10b      	bne.n	800883a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	e000      	b.n	800883c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800883a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800884c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008850:	4618      	mov	r0, r3
 8008852:	3730      	adds	r7, #48	; 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008866:	b2db      	uxtb	r3, r3
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008884:	f7fa fb8e 	bl	8002fa4 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4413      	add	r3, r2
 8008892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008894:	f7fa fb86 	bl	8002fa4 <HAL_GetTick>
 8008898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800889a:	4b39      	ldr	r3, [pc, #228]	; (8008980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	015b      	lsls	r3, r3, #5
 80088a0:	0d1b      	lsrs	r3, r3, #20
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088aa:	e054      	b.n	8008956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d050      	beq.n	8008956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088b4:	f7fa fb76 	bl	8002fa4 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d902      	bls.n	80088ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d13d      	bne.n	8008946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088e2:	d111      	bne.n	8008908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ec:	d004      	beq.n	80088f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f6:	d107      	bne.n	8008908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008910:	d10f      	bne.n	8008932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e017      	b.n	8008976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	3b01      	subs	r3, #1
 8008954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4013      	ands	r3, r2
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	bf0c      	ite	eq
 8008966:	2301      	moveq	r3, #1
 8008968:	2300      	movne	r3, #0
 800896a:	b2db      	uxtb	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	429a      	cmp	r2, r3
 8008972:	d19b      	bne.n	80088ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000007c 	.word	0x2000007c

08008984 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008998:	d111      	bne.n	80089be <SPI_EndRxTransaction+0x3a>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089a2:	d004      	beq.n	80089ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	d107      	bne.n	80089be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c6:	d12a      	bne.n	8008a1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d0:	d012      	beq.n	80089f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2200      	movs	r2, #0
 80089da:	2180      	movs	r1, #128	; 0x80
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff ff49 	bl	8008874 <SPI_WaitFlagStateUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02d      	beq.n	8008a44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ec:	f043 0220 	orr.w	r2, r3, #32
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e026      	b.n	8008a46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2200      	movs	r2, #0
 8008a00:	2101      	movs	r1, #1
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7ff ff36 	bl	8008874 <SPI_WaitFlagStateUntilTimeout>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01a      	beq.n	8008a44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	f043 0220 	orr.w	r2, r3, #32
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e013      	b.n	8008a46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2101      	movs	r1, #1
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff ff23 	bl	8008874 <SPI_WaitFlagStateUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d007      	beq.n	8008a44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a38:	f043 0220 	orr.w	r2, r3, #32
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e000      	b.n	8008a46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a5c:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <SPI_EndRxTxTransaction+0x7c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <SPI_EndRxTxTransaction+0x80>)
 8008a62:	fba2 2303 	umull	r2, r3, r2, r3
 8008a66:	0d5b      	lsrs	r3, r3, #21
 8008a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a6c:	fb02 f303 	mul.w	r3, r2, r3
 8008a70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a7a:	d112      	bne.n	8008aa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2200      	movs	r2, #0
 8008a84:	2180      	movs	r1, #128	; 0x80
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff fef4 	bl	8008874 <SPI_WaitFlagStateUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d016      	beq.n	8008ac0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f043 0220 	orr.w	r2, r3, #32
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e00f      	b.n	8008ac2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab8:	2b80      	cmp	r3, #128	; 0x80
 8008aba:	d0f2      	beq.n	8008aa2 <SPI_EndRxTxTransaction+0x52>
 8008abc:	e000      	b.n	8008ac0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008abe:	bf00      	nop
  }

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	2000007c 	.word	0x2000007c
 8008ad0:	165e9f81 	.word	0x165e9f81

08008ad4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e034      	b.n	8008b54 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7f9 fe8e 	bl	8002820 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f000 fefa 	bl	8009908 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	f000 ff44 	bl	80099ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6858      	ldr	r0, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	f000 ff79 	bl	8009a28 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	6892      	ldr	r2, [r2, #8]
 8008b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	6892      	ldr	r2, [r2, #8]
 8008b4a:	f041 0101 	orr.w	r1, r1, #1
 8008b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e041      	b.n	8008bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f839 	bl	8008bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f000 fbae 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d001      	beq.n	8008c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e04e      	b.n	8008cc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0201 	orr.w	r2, r2, #1
 8008c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a23      	ldr	r2, [pc, #140]	; (8008cd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d022      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c52:	d01d      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a1f      	ldr	r2, [pc, #124]	; (8008cd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d018      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <HAL_TIM_Base_Start_IT+0xcc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d013      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00e      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a1b      	ldr	r2, [pc, #108]	; (8008ce4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d009      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a19      	ldr	r2, [pc, #100]	; (8008ce8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d004      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x80>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a18      	ldr	r2, [pc, #96]	; (8008cec <HAL_TIM_Base_Start_IT+0xdc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d111      	bne.n	8008cb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b06      	cmp	r3, #6
 8008ca0:	d010      	beq.n	8008cc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0201 	orr.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb2:	e007      	b.n	8008cc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40010000 	.word	0x40010000
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	40000c00 	.word	0x40000c00
 8008ce4:	40010400 	.word	0x40010400
 8008ce8:	40014000 	.word	0x40014000
 8008cec:	40001800 	.word	0x40001800

08008cf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e041      	b.n	8008d86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7f9 fcde 	bl	80026d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f000 fae4 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x24>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	e022      	b.n	8008dfa <HAL_TIM_PWM_Start+0x6a>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d109      	bne.n	8008dce <HAL_TIM_PWM_Start+0x3e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	bf14      	ite	ne
 8008dc6:	2301      	movne	r3, #1
 8008dc8:	2300      	moveq	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e015      	b.n	8008dfa <HAL_TIM_PWM_Start+0x6a>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d109      	bne.n	8008de8 <HAL_TIM_PWM_Start+0x58>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e008      	b.n	8008dfa <HAL_TIM_PWM_Start+0x6a>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e07c      	b.n	8008efc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Start+0x82>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e10:	e013      	b.n	8008e3a <HAL_TIM_PWM_Start+0xaa>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d104      	bne.n	8008e22 <HAL_TIM_PWM_Start+0x92>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e20:	e00b      	b.n	8008e3a <HAL_TIM_PWM_Start+0xaa>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d104      	bne.n	8008e32 <HAL_TIM_PWM_Start+0xa2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e30:	e003      	b.n	8008e3a <HAL_TIM_PWM_Start+0xaa>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fcaa 	bl	800979c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a2d      	ldr	r2, [pc, #180]	; (8008f04 <HAL_TIM_PWM_Start+0x174>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d004      	beq.n	8008e5c <HAL_TIM_PWM_Start+0xcc>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2c      	ldr	r2, [pc, #176]	; (8008f08 <HAL_TIM_PWM_Start+0x178>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d101      	bne.n	8008e60 <HAL_TIM_PWM_Start+0xd0>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <HAL_TIM_PWM_Start+0xd2>
 8008e60:	2300      	movs	r3, #0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a22      	ldr	r2, [pc, #136]	; (8008f04 <HAL_TIM_PWM_Start+0x174>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d022      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e88:	d01d      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1f      	ldr	r2, [pc, #124]	; (8008f0c <HAL_TIM_PWM_Start+0x17c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d018      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <HAL_TIM_PWM_Start+0x180>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d013      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1c      	ldr	r2, [pc, #112]	; (8008f14 <HAL_TIM_PWM_Start+0x184>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <HAL_TIM_PWM_Start+0x178>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d009      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a18      	ldr	r2, [pc, #96]	; (8008f18 <HAL_TIM_PWM_Start+0x188>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d004      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a16      	ldr	r2, [pc, #88]	; (8008f1c <HAL_TIM_PWM_Start+0x18c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d111      	bne.n	8008eea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	d010      	beq.n	8008efa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee8:	e007      	b.n	8008efa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0201 	orr.w	r2, r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	40001800 	.word	0x40001800

08008f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d122      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d11b      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0202 	mvn.w	r2, #2
 8008f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f9ac 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008f68:	e005      	b.n	8008f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f99e 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f9af 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0304 	and.w	r3, r3, #4
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d122      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d11b      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0204 	mvn.w	r2, #4
 8008fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f982 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008fbc:	e005      	b.n	8008fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f974 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f985 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	d122      	bne.n	8009024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d11b      	bne.n	8009024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0208 	mvn.w	r2, #8
 8008ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f958 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f94a 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f95b 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b10      	cmp	r3, #16
 8009030:	d122      	bne.n	8009078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b10      	cmp	r3, #16
 800903e:	d11b      	bne.n	8009078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f06f 0210 	mvn.w	r2, #16
 8009048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2208      	movs	r2, #8
 800904e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f92e 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8009064:	e005      	b.n	8009072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f920 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f931 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b01      	cmp	r3, #1
 8009084:	d10e      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b01      	cmp	r3, #1
 8009092:	d107      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0201 	mvn.w	r2, #1
 800909c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7f9 f8fa 	bl	8002298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ae:	2b80      	cmp	r3, #128	; 0x80
 80090b0:	d10e      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090bc:	2b80      	cmp	r3, #128	; 0x80
 80090be:	d107      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fc12 	bl	80098f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d10e      	bne.n	80090fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e8:	2b40      	cmp	r3, #64	; 0x40
 80090ea:	d107      	bne.n	80090fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f8f6 	bl	80092e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b20      	cmp	r3, #32
 8009108:	d10e      	bne.n	8009128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b20      	cmp	r3, #32
 8009116:	d107      	bne.n	8009128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f06f 0220 	mvn.w	r2, #32
 8009120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fbdc 	bl	80098e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009146:	2302      	movs	r3, #2
 8009148:	e0ac      	b.n	80092a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b0c      	cmp	r3, #12
 8009156:	f200 809f 	bhi.w	8009298 <HAL_TIM_PWM_ConfigChannel+0x168>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009195 	.word	0x08009195
 8009164:	08009299 	.word	0x08009299
 8009168:	08009299 	.word	0x08009299
 800916c:	08009299 	.word	0x08009299
 8009170:	080091d5 	.word	0x080091d5
 8009174:	08009299 	.word	0x08009299
 8009178:	08009299 	.word	0x08009299
 800917c:	08009299 	.word	0x08009299
 8009180:	08009217 	.word	0x08009217
 8009184:	08009299 	.word	0x08009299
 8009188:	08009299 	.word	0x08009299
 800918c:	08009299 	.word	0x08009299
 8009190:	08009257 	.word	0x08009257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f94e 	bl	800943c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0208 	orr.w	r2, r2, #8
 80091ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0204 	bic.w	r2, r2, #4
 80091be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6999      	ldr	r1, [r3, #24]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	691a      	ldr	r2, [r3, #16]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	619a      	str	r2, [r3, #24]
      break;
 80091d2:	e062      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f99e 	bl	800951c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	699a      	ldr	r2, [r3, #24]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6999      	ldr	r1, [r3, #24]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	021a      	lsls	r2, r3, #8
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	619a      	str	r2, [r3, #24]
      break;
 8009214:	e041      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f9f3 	bl	8009608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69da      	ldr	r2, [r3, #28]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0208 	orr.w	r2, r2, #8
 8009230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0204 	bic.w	r2, r2, #4
 8009240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69d9      	ldr	r1, [r3, #28]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	61da      	str	r2, [r3, #28]
      break;
 8009254:	e021      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fa47 	bl	80096f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69da      	ldr	r2, [r3, #28]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69d9      	ldr	r1, [r3, #28]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	021a      	lsls	r2, r3, #8
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	61da      	str	r2, [r3, #28]
      break;
 8009296:	e000      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a40      	ldr	r2, [pc, #256]	; (8009410 <TIM_Base_SetConfig+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d013      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931a:	d00f      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a3d      	ldr	r2, [pc, #244]	; (8009414 <TIM_Base_SetConfig+0x118>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00b      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a3c      	ldr	r2, [pc, #240]	; (8009418 <TIM_Base_SetConfig+0x11c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d007      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a3b      	ldr	r2, [pc, #236]	; (800941c <TIM_Base_SetConfig+0x120>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a3a      	ldr	r2, [pc, #232]	; (8009420 <TIM_Base_SetConfig+0x124>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d108      	bne.n	800934e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2f      	ldr	r2, [pc, #188]	; (8009410 <TIM_Base_SetConfig+0x114>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d02b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935c:	d027      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2c      	ldr	r2, [pc, #176]	; (8009414 <TIM_Base_SetConfig+0x118>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d023      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <TIM_Base_SetConfig+0x11c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01f      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a2a      	ldr	r2, [pc, #168]	; (800941c <TIM_Base_SetConfig+0x120>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a29      	ldr	r2, [pc, #164]	; (8009420 <TIM_Base_SetConfig+0x124>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d017      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a28      	ldr	r2, [pc, #160]	; (8009424 <TIM_Base_SetConfig+0x128>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a27      	ldr	r2, [pc, #156]	; (8009428 <TIM_Base_SetConfig+0x12c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00f      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a26      	ldr	r2, [pc, #152]	; (800942c <TIM_Base_SetConfig+0x130>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a25      	ldr	r2, [pc, #148]	; (8009430 <TIM_Base_SetConfig+0x134>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d007      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a24      	ldr	r2, [pc, #144]	; (8009434 <TIM_Base_SetConfig+0x138>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d003      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a23      	ldr	r2, [pc, #140]	; (8009438 <TIM_Base_SetConfig+0x13c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d108      	bne.n	80093c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <TIM_Base_SetConfig+0x114>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d003      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a0c      	ldr	r2, [pc, #48]	; (8009420 <TIM_Base_SetConfig+0x124>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d103      	bne.n	80093fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	615a      	str	r2, [r3, #20]
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40010000 	.word	0x40010000
 8009414:	40000400 	.word	0x40000400
 8009418:	40000800 	.word	0x40000800
 800941c:	40000c00 	.word	0x40000c00
 8009420:	40010400 	.word	0x40010400
 8009424:	40014000 	.word	0x40014000
 8009428:	40014400 	.word	0x40014400
 800942c:	40014800 	.word	0x40014800
 8009430:	40001800 	.word	0x40001800
 8009434:	40001c00 	.word	0x40001c00
 8009438:	40002000 	.word	0x40002000

0800943c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 0302 	bic.w	r3, r3, #2
 8009484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a20      	ldr	r2, [pc, #128]	; (8009514 <TIM_OC1_SetConfig+0xd8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC1_SetConfig+0x64>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1f      	ldr	r2, [pc, #124]	; (8009518 <TIM_OC1_SetConfig+0xdc>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10c      	bne.n	80094ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 0308 	bic.w	r3, r3, #8
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f023 0304 	bic.w	r3, r3, #4
 80094b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a15      	ldr	r2, [pc, #84]	; (8009514 <TIM_OC1_SetConfig+0xd8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <TIM_OC1_SetConfig+0x8e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a14      	ldr	r2, [pc, #80]	; (8009518 <TIM_OC1_SetConfig+0xdc>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d111      	bne.n	80094ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	621a      	str	r2, [r3, #32]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	40010000 	.word	0x40010000
 8009518:	40010400 	.word	0x40010400

0800951c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f023 0210 	bic.w	r2, r3, #16
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f023 0320 	bic.w	r3, r3, #32
 8009566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a22      	ldr	r2, [pc, #136]	; (8009600 <TIM_OC2_SetConfig+0xe4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d003      	beq.n	8009584 <TIM_OC2_SetConfig+0x68>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a21      	ldr	r2, [pc, #132]	; (8009604 <TIM_OC2_SetConfig+0xe8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d10d      	bne.n	80095a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800958a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800959e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a17      	ldr	r2, [pc, #92]	; (8009600 <TIM_OC2_SetConfig+0xe4>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <TIM_OC2_SetConfig+0x94>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a16      	ldr	r2, [pc, #88]	; (8009604 <TIM_OC2_SetConfig+0xe8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d113      	bne.n	80095d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	621a      	str	r2, [r3, #32]
}
 80095f2:	bf00      	nop
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000
 8009604:	40010400 	.word	0x40010400

08009608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a21      	ldr	r2, [pc, #132]	; (80096e8 <TIM_OC3_SetConfig+0xe0>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC3_SetConfig+0x66>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a20      	ldr	r2, [pc, #128]	; (80096ec <TIM_OC3_SetConfig+0xe4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d10d      	bne.n	800968a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a16      	ldr	r2, [pc, #88]	; (80096e8 <TIM_OC3_SetConfig+0xe0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d003      	beq.n	800969a <TIM_OC3_SetConfig+0x92>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a15      	ldr	r2, [pc, #84]	; (80096ec <TIM_OC3_SetConfig+0xe4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d113      	bne.n	80096c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	4313      	orrs	r3, r2
 80096c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	621a      	str	r2, [r3, #32]
}
 80096dc:	bf00      	nop
 80096de:	371c      	adds	r7, #28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40010400 	.word	0x40010400

080096f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800973a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	031b      	lsls	r3, r3, #12
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a12      	ldr	r2, [pc, #72]	; (8009794 <TIM_OC4_SetConfig+0xa4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d003      	beq.n	8009758 <TIM_OC4_SetConfig+0x68>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a11      	ldr	r2, [pc, #68]	; (8009798 <TIM_OC4_SetConfig+0xa8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d109      	bne.n	800976c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800975e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	019b      	lsls	r3, r3, #6
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	621a      	str	r2, [r3, #32]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40010000 	.word	0x40010000
 8009798:	40010400 	.word	0x40010400

0800979c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f003 031f 	and.w	r3, r3, #31
 80097ae:	2201      	movs	r2, #1
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a1a      	ldr	r2, [r3, #32]
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	43db      	mvns	r3, r3
 80097be:	401a      	ands	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a1a      	ldr	r2, [r3, #32]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f003 031f 	and.w	r3, r3, #31
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	fa01 f303 	lsl.w	r3, r1, r3
 80097d4:	431a      	orrs	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	621a      	str	r2, [r3, #32]
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
	...

080097e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e05a      	b.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a21      	ldr	r2, [pc, #132]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d022      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800984c:	d01d      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a1d      	ldr	r2, [pc, #116]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d018      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a1b      	ldr	r2, [pc, #108]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a1a      	ldr	r2, [pc, #104]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d00e      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a18      	ldr	r2, [pc, #96]	; (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d009      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a17      	ldr	r2, [pc, #92]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d004      	beq.n	800988a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a15      	ldr	r2, [pc, #84]	; (80098dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d10c      	bne.n	80098a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	4313      	orrs	r3, r2
 800989a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40000400 	.word	0x40000400
 80098cc:	40000800 	.word	0x40000800
 80098d0:	40000c00 	.word	0x40000c00
 80098d4:	40010400 	.word	0x40010400
 80098d8:	40014000 	.word	0x40014000
 80098dc:	40001800 	.word	0x40001800

080098e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009920:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4b20      	ldr	r3, [pc, #128]	; (80099a8 <FSMC_NORSRAM_Init+0xa0>)
 8009926:	4013      	ands	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009932:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009938:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800993e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009944:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800994a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009950:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009956:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800995c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009962:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009968:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800996e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009974:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b08      	cmp	r3, #8
 8009982:	d103      	bne.n	800998c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	fff00080 	.word	0xfff00080

080099ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80099ce:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80099da:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80099e2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80099ea:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80099f4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	3b02      	subs	r3, #2
 80099fc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80099fe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009a04:	4313      	orrs	r3, r2
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6979      	ldr	r1, [r7, #20]
 8009a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
	...

08009a28 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a40:	d122      	bne.n	8009a88 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009a5e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009a66:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009a6e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009a74:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a86:	e005      	b.n	8009a94 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	cff00000 	.word	0xcff00000

08009aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	f107 001c 	add.w	r0, r7, #28
 8009ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d122      	bne.n	8009b06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d105      	bne.n	8009afa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fac6 	bl	800b08c <USB_CoreReset>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
 8009b04:	e01a      	b.n	8009b3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 faba 	bl	800b08c <USB_CoreReset>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d106      	bne.n	8009b30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8009b2e:	e005      	b.n	8009b3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d10b      	bne.n	8009b5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f043 0206 	orr.w	r2, r3, #6
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f043 0220 	orr.w	r2, r3, #32
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b66:	b004      	add	sp, #16
 8009b68:	4770      	bx	lr
	...

08009b6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d165      	bne.n	8009c4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4a41      	ldr	r2, [pc, #260]	; (8009c88 <USB_SetTurnaroundTime+0x11c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d906      	bls.n	8009b96 <USB_SetTurnaroundTime+0x2a>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a40      	ldr	r2, [pc, #256]	; (8009c8c <USB_SetTurnaroundTime+0x120>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d202      	bcs.n	8009b96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009b90:	230f      	movs	r3, #15
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e062      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	4a3c      	ldr	r2, [pc, #240]	; (8009c8c <USB_SetTurnaroundTime+0x120>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d306      	bcc.n	8009bac <USB_SetTurnaroundTime+0x40>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a3b      	ldr	r2, [pc, #236]	; (8009c90 <USB_SetTurnaroundTime+0x124>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d202      	bcs.n	8009bac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ba6:	230e      	movs	r3, #14
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	e057      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4a38      	ldr	r2, [pc, #224]	; (8009c90 <USB_SetTurnaroundTime+0x124>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d306      	bcc.n	8009bc2 <USB_SetTurnaroundTime+0x56>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4a37      	ldr	r2, [pc, #220]	; (8009c94 <USB_SetTurnaroundTime+0x128>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d202      	bcs.n	8009bc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009bbc:	230d      	movs	r3, #13
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	e04c      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4a33      	ldr	r2, [pc, #204]	; (8009c94 <USB_SetTurnaroundTime+0x128>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d306      	bcc.n	8009bd8 <USB_SetTurnaroundTime+0x6c>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a32      	ldr	r2, [pc, #200]	; (8009c98 <USB_SetTurnaroundTime+0x12c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d802      	bhi.n	8009bd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009bd2:	230c      	movs	r3, #12
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	e041      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4a2f      	ldr	r2, [pc, #188]	; (8009c98 <USB_SetTurnaroundTime+0x12c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d906      	bls.n	8009bee <USB_SetTurnaroundTime+0x82>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4a2e      	ldr	r2, [pc, #184]	; (8009c9c <USB_SetTurnaroundTime+0x130>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d802      	bhi.n	8009bee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009be8:	230b      	movs	r3, #11
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	e036      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	4a2a      	ldr	r2, [pc, #168]	; (8009c9c <USB_SetTurnaroundTime+0x130>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d906      	bls.n	8009c04 <USB_SetTurnaroundTime+0x98>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	4a29      	ldr	r2, [pc, #164]	; (8009ca0 <USB_SetTurnaroundTime+0x134>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d802      	bhi.n	8009c04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009bfe:	230a      	movs	r3, #10
 8009c00:	617b      	str	r3, [r7, #20]
 8009c02:	e02b      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4a26      	ldr	r2, [pc, #152]	; (8009ca0 <USB_SetTurnaroundTime+0x134>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d906      	bls.n	8009c1a <USB_SetTurnaroundTime+0xae>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <USB_SetTurnaroundTime+0x138>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d202      	bcs.n	8009c1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009c14:	2309      	movs	r3, #9
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e020      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	4a21      	ldr	r2, [pc, #132]	; (8009ca4 <USB_SetTurnaroundTime+0x138>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d306      	bcc.n	8009c30 <USB_SetTurnaroundTime+0xc4>
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	4a20      	ldr	r2, [pc, #128]	; (8009ca8 <USB_SetTurnaroundTime+0x13c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d802      	bhi.n	8009c30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	617b      	str	r3, [r7, #20]
 8009c2e:	e015      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <USB_SetTurnaroundTime+0x13c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d906      	bls.n	8009c46 <USB_SetTurnaroundTime+0xda>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <USB_SetTurnaroundTime+0x140>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d202      	bcs.n	8009c46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c40:	2307      	movs	r3, #7
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e00a      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c46:	2306      	movs	r3, #6
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	e007      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009c52:	2309      	movs	r3, #9
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	e001      	b.n	8009c5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c58:	2309      	movs	r3, #9
 8009c5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68da      	ldr	r2, [r3, #12]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	029b      	lsls	r3, r3, #10
 8009c70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009c74:	431a      	orrs	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	371c      	adds	r7, #28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	00d8acbf 	.word	0x00d8acbf
 8009c8c:	00e4e1c0 	.word	0x00e4e1c0
 8009c90:	00f42400 	.word	0x00f42400
 8009c94:	01067380 	.word	0x01067380
 8009c98:	011a499f 	.word	0x011a499f
 8009c9c:	01312cff 	.word	0x01312cff
 8009ca0:	014ca43f 	.word	0x014ca43f
 8009ca4:	016e3600 	.word	0x016e3600
 8009ca8:	01a6ab1f 	.word	0x01a6ab1f
 8009cac:	01e84800 	.word	0x01e84800

08009cb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f043 0201 	orr.w	r2, r3, #1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f023 0201 	bic.w	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d106      	bne.n	8009d20 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60da      	str	r2, [r3, #12]
 8009d1e:	e00b      	b.n	8009d38 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60da      	str	r2, [r3, #12]
 8009d32:	e001      	b.n	8009d38 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e003      	b.n	8009d40 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009d38:	2032      	movs	r0, #50	; 0x32
 8009d3a:	f7f9 f93f 	bl	8002fbc <HAL_Delay>

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d48:	b084      	sub	sp, #16
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d62:	2300      	movs	r3, #0
 8009d64:	613b      	str	r3, [r7, #16]
 8009d66:	e009      	b.n	8009d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	3340      	adds	r3, #64	; 0x40
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	613b      	str	r3, [r7, #16]
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b0e      	cmp	r3, #14
 8009d80:	d9f2      	bls.n	8009d68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d11c      	bne.n	8009dc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d96:	f043 0302 	orr.w	r3, r3, #2
 8009d9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8009dc0:	e00b      	b.n	8009dda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009de0:	461a      	mov	r2, r3
 8009de2:	2300      	movs	r3, #0
 8009de4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dec:	4619      	mov	r1, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	461a      	mov	r2, r3
 8009df6:	680b      	ldr	r3, [r1, #0]
 8009df8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10c      	bne.n	8009e1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d104      	bne.n	8009e10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e06:	2100      	movs	r1, #0
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f949 	bl	800a0a0 <USB_SetDevSpeed>
 8009e0e:	e008      	b.n	8009e22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e10:	2101      	movs	r1, #1
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f944 	bl	800a0a0 <USB_SetDevSpeed>
 8009e18:	e003      	b.n	8009e22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e1a:	2103      	movs	r1, #3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f93f 	bl	800a0a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e22:	2110      	movs	r1, #16
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f8f3 	bl	800a010 <USB_FlushTxFifo>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f911 	bl	800a05c <USB_FlushRxFifo>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	461a      	mov	r2, r3
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e62:	461a      	mov	r2, r3
 8009e64:	2300      	movs	r3, #0
 8009e66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	613b      	str	r3, [r7, #16]
 8009e6c:	e043      	b.n	8009ef6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e84:	d118      	bne.n	8009eb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e98:	461a      	mov	r2, r3
 8009e9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	e013      	b.n	8009eca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	e008      	b.n	8009eca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d3b7      	bcc.n	8009e6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009efe:	2300      	movs	r3, #0
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	e043      	b.n	8009f8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f1a:	d118      	bne.n	8009f4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	e013      	b.n	8009f60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f44:	461a      	mov	r2, r3
 8009f46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	e008      	b.n	8009f60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	015a      	lsls	r2, r3, #5
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4413      	add	r3, r2
 8009f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d3b7      	bcc.n	8009f04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009fb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d105      	bne.n	8009fc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f043 0210 	orr.w	r2, r3, #16
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	699a      	ldr	r2, [r3, #24]
 8009fcc:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <USB_DevInit+0x2c4>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d005      	beq.n	8009fe6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	f043 0208 	orr.w	r2, r3, #8
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d107      	bne.n	8009ffc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ff4:	f043 0304 	orr.w	r3, r3, #4
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a008:	b004      	add	sp, #16
 800a00a:	4770      	bx	lr
 800a00c:	803c3800 	.word	0x803c3800

0800a010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	019b      	lsls	r3, r3, #6
 800a022:	f043 0220 	orr.w	r2, r3, #32
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3301      	adds	r3, #1
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a09      	ldr	r2, [pc, #36]	; (800a058 <USB_FlushTxFifo+0x48>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d901      	bls.n	800a03c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e006      	b.n	800a04a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b20      	cmp	r3, #32
 800a046:	d0f0      	beq.n	800a02a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	00030d40 	.word	0x00030d40

0800a05c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2210      	movs	r2, #16
 800a06c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3301      	adds	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4a09      	ldr	r2, [pc, #36]	; (800a09c <USB_FlushRxFifo+0x40>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d901      	bls.n	800a080 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e006      	b.n	800a08e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	f003 0310 	and.w	r3, r3, #16
 800a088:	2b10      	cmp	r3, #16
 800a08a:	d0f0      	beq.n	800a06e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	00030d40 	.word	0x00030d40

0800a0a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	78fb      	ldrb	r3, [r7, #3]
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b087      	sub	sp, #28
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f003 0306 	and.w	r3, r3, #6
 800a0ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d102      	bne.n	800a0f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	75fb      	strb	r3, [r7, #23]
 800a0f6:	e00a      	b.n	800a10e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d002      	beq.n	800a104 <USB_GetDevSpeed+0x32>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b06      	cmp	r3, #6
 800a102:	d102      	bne.n	800a10a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a104:	2302      	movs	r3, #2
 800a106:	75fb      	strb	r3, [r7, #23]
 800a108:	e001      	b.n	800a10e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a10a:	230f      	movs	r3, #15
 800a10c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a110:	4618      	mov	r0, r3
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	785b      	ldrb	r3, [r3, #1]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d13a      	bne.n	800a1ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13e:	69da      	ldr	r2, [r3, #28]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	2101      	movs	r1, #1
 800a14a:	fa01 f303 	lsl.w	r3, r1, r3
 800a14e:	b29b      	uxth	r3, r3
 800a150:	68f9      	ldr	r1, [r7, #12]
 800a152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a156:	4313      	orrs	r3, r2
 800a158:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4413      	add	r3, r2
 800a162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d155      	bne.n	800a21c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	78db      	ldrb	r3, [r3, #3]
 800a18a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a18c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	059b      	lsls	r3, r3, #22
 800a192:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a194:	4313      	orrs	r3, r2
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	0151      	lsls	r1, r2, #5
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	440a      	add	r2, r1
 800a19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	e036      	b.n	800a21c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b4:	69da      	ldr	r2, [r3, #28]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f003 030f 	and.w	r3, r3, #15
 800a1be:	2101      	movs	r1, #1
 800a1c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c4:	041b      	lsls	r3, r3, #16
 800a1c6:	68f9      	ldr	r1, [r7, #12]
 800a1c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d11a      	bne.n	800a21c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	78db      	ldrb	r3, [r3, #3]
 800a200:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a202:	430b      	orrs	r3, r1
 800a204:	4313      	orrs	r3, r2
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a21a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d161      	bne.n	800a30c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a25a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a25e:	d11f      	bne.n	800a2a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	0151      	lsls	r1, r2, #5
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	440a      	add	r2, r1
 800a276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a27e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	0151      	lsls	r1, r2, #5
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	440a      	add	r2, r1
 800a296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a29e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	f003 030f 	and.w	r3, r3, #15
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	68f9      	ldr	r1, [r7, #12]
 800a2bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 030f 	and.w	r3, r3, #15
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	0159      	lsls	r1, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	440b      	add	r3, r1
 800a2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a302:	4619      	mov	r1, r3
 800a304:	4b35      	ldr	r3, [pc, #212]	; (800a3dc <USB_DeactivateEndpoint+0x1b0>)
 800a306:	4013      	ands	r3, r2
 800a308:	600b      	str	r3, [r1, #0]
 800a30a:	e060      	b.n	800a3ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a31e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a322:	d11f      	bne.n	800a364 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	0151      	lsls	r1, r2, #5
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	440a      	add	r2, r1
 800a33a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a33e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a342:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a35e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a36a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	2101      	movs	r1, #1
 800a376:	fa01 f303 	lsl.w	r3, r1, r3
 800a37a:	041b      	lsls	r3, r3, #16
 800a37c:	43db      	mvns	r3, r3
 800a37e:	68f9      	ldr	r1, [r7, #12]
 800a380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a384:	4013      	ands	r3, r2
 800a386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a38e:	69da      	ldr	r2, [r3, #28]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	f003 030f 	and.w	r3, r3, #15
 800a398:	2101      	movs	r1, #1
 800a39a:	fa01 f303 	lsl.w	r3, r1, r3
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	43db      	mvns	r3, r3
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	0159      	lsls	r1, r3, #5
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	440b      	add	r3, r1
 800a3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <USB_DeactivateEndpoint+0x1b4>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	ec337800 	.word	0xec337800
 800a3e0:	eff37800 	.word	0xeff37800

0800a3e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	2b01      	cmp	r3, #1
 800a402:	f040 815c 	bne.w	800a6be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d132      	bne.n	800a474 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a42c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a44c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	0151      	lsls	r1, r2, #5
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	440a      	add	r2, r1
 800a468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a46c:	0cdb      	lsrs	r3, r3, #19
 800a46e:	04db      	lsls	r3, r3, #19
 800a470:	6113      	str	r3, [r2, #16]
 800a472:	e074      	b.n	800a55e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a48e:	0cdb      	lsrs	r3, r3, #19
 800a490:	04db      	lsls	r3, r3, #19
 800a492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	0151      	lsls	r1, r2, #5
 800a4a6:	69fa      	ldr	r2, [r7, #28]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6959      	ldr	r1, [r3, #20]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	440b      	add	r3, r1
 800a4d0:	1e59      	subs	r1, r3, #1
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4da:	04d9      	lsls	r1, r3, #19
 800a4dc:	4b9d      	ldr	r3, [pc, #628]	; (800a754 <USB_EPStartXfer+0x370>)
 800a4de:	400b      	ands	r3, r1
 800a4e0:	69b9      	ldr	r1, [r7, #24]
 800a4e2:	0148      	lsls	r0, r1, #5
 800a4e4:	69f9      	ldr	r1, [r7, #28]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fc:	691a      	ldr	r2, [r3, #16]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a506:	69b9      	ldr	r1, [r7, #24]
 800a508:	0148      	lsls	r0, r1, #5
 800a50a:	69f9      	ldr	r1, [r7, #28]
 800a50c:	4401      	add	r1, r0
 800a50e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a512:	4313      	orrs	r3, r2
 800a514:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	78db      	ldrb	r3, [r3, #3]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d11f      	bne.n	800a55e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a538:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a53c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a55c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d14b      	bne.n	800a5fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d009      	beq.n	800a580 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a578:	461a      	mov	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	78db      	ldrb	r3, [r3, #3]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d128      	bne.n	800a5da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a594:	2b00      	cmp	r3, #0
 800a596:	d110      	bne.n	800a5ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	69ba      	ldr	r2, [r7, #24]
 800a5a8:	0151      	lsls	r1, r2, #5
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	440a      	add	r2, r1
 800a5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	e00f      	b.n	800a5da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	69ba      	ldr	r2, [r7, #24]
 800a5ea:	0151      	lsls	r1, r2, #5
 800a5ec:	69fa      	ldr	r2, [r7, #28]
 800a5ee:	440a      	add	r2, r1
 800a5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	e12f      	b.n	800a85c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	0151      	lsls	r1, r2, #5
 800a60e:	69fa      	ldr	r2, [r7, #28]
 800a610:	440a      	add	r2, r1
 800a612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a61a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	78db      	ldrb	r3, [r3, #3]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d015      	beq.n	800a650 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 8117 	beq.w	800a85c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	2101      	movs	r1, #1
 800a640:	fa01 f303 	lsl.w	r3, r1, r3
 800a644:	69f9      	ldr	r1, [r7, #28]
 800a646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a64a:	4313      	orrs	r3, r2
 800a64c:	634b      	str	r3, [r1, #52]	; 0x34
 800a64e:	e105      	b.n	800a85c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d110      	bne.n	800a682 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	440a      	add	r2, r1
 800a676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a67a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	e00f      	b.n	800a6a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	0151      	lsls	r1, r2, #5
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	440a      	add	r2, r1
 800a698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a69c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	68d9      	ldr	r1, [r3, #12]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	781a      	ldrb	r2, [r3, #0]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	b298      	uxth	r0, r3
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 fa2b 	bl	800ab12 <USB_WritePacket>
 800a6bc:	e0ce      	b.n	800a85c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	69ba      	ldr	r2, [r7, #24]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	69fa      	ldr	r2, [r7, #28]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d8:	0cdb      	lsrs	r3, r3, #19
 800a6da:	04db      	lsls	r3, r3, #19
 800a6dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	0151      	lsls	r1, r2, #5
 800a6f0:	69fa      	ldr	r2, [r7, #28]
 800a6f2:	440a      	add	r2, r1
 800a6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a700:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d126      	bne.n	800a758 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	4413      	add	r3, r2
 800a712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a716:	691a      	ldr	r2, [r3, #16]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a720:	69b9      	ldr	r1, [r7, #24]
 800a722:	0148      	lsls	r0, r1, #5
 800a724:	69f9      	ldr	r1, [r7, #28]
 800a726:	4401      	add	r1, r0
 800a728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a72c:	4313      	orrs	r3, r2
 800a72e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	0151      	lsls	r1, r2, #5
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	440a      	add	r2, r1
 800a746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a74a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a74e:	6113      	str	r3, [r2, #16]
 800a750:	e036      	b.n	800a7c0 <USB_EPStartXfer+0x3dc>
 800a752:	bf00      	nop
 800a754:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	695a      	ldr	r2, [r3, #20]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4413      	add	r3, r2
 800a762:	1e5a      	subs	r2, r3, #1
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	8afb      	ldrh	r3, [r7, #22]
 800a77e:	04d9      	lsls	r1, r3, #19
 800a780:	4b39      	ldr	r3, [pc, #228]	; (800a868 <USB_EPStartXfer+0x484>)
 800a782:	400b      	ands	r3, r1
 800a784:	69b9      	ldr	r1, [r7, #24]
 800a786:	0148      	lsls	r0, r1, #5
 800a788:	69f9      	ldr	r1, [r7, #28]
 800a78a:	4401      	add	r1, r0
 800a78c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a790:	4313      	orrs	r3, r2
 800a792:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a0:	691a      	ldr	r2, [r3, #16]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	8af9      	ldrh	r1, [r7, #22]
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b0:	69b9      	ldr	r1, [r7, #24]
 800a7b2:	0148      	lsls	r0, r1, #5
 800a7b4:	69f9      	ldr	r1, [r7, #28]
 800a7b6:	4401      	add	r1, r0
 800a7b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d10d      	bne.n	800a7e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	68d9      	ldr	r1, [r3, #12]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	460a      	mov	r2, r1
 800a7e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	78db      	ldrb	r3, [r3, #3]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d128      	bne.n	800a83c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d110      	bne.n	800a81c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	0151      	lsls	r1, r2, #5
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	440a      	add	r2, r1
 800a810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	e00f      	b.n	800a83c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a83a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	0151      	lsls	r1, r2, #5
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	440a      	add	r2, r1
 800a852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a85a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	1ff80000 	.word	0x1ff80000

0800a86c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	f040 80cd 	bne.w	800aa28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d132      	bne.n	800a8fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	0151      	lsls	r1, r2, #5
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	440a      	add	r2, r1
 800a8ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	015a      	lsls	r2, r3, #5
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	0151      	lsls	r1, r2, #5
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	440a      	add	r2, r1
 800a8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	0151      	lsls	r1, r2, #5
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f4:	0cdb      	lsrs	r3, r3, #19
 800a8f6:	04db      	lsls	r3, r3, #19
 800a8f8:	6113      	str	r3, [r2, #16]
 800a8fa:	e04e      	b.n	800a99a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	0151      	lsls	r1, r2, #5
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	440a      	add	r2, r1
 800a912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a916:	0cdb      	lsrs	r3, r3, #19
 800a918:	04db      	lsls	r3, r3, #19
 800a91a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a936:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a93a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a93e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	695a      	ldr	r2, [r3, #20]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d903      	bls.n	800a954 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	0151      	lsls	r1, r2, #5
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	440a      	add	r2, r1
 800a96a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a96e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a980:	691a      	ldr	r2, [r3, #16]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a98a:	6939      	ldr	r1, [r7, #16]
 800a98c:	0148      	lsls	r0, r1, #5
 800a98e:	6979      	ldr	r1, [r7, #20]
 800a990:	4401      	add	r1, r0
 800a992:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a996:	4313      	orrs	r3, r2
 800a998:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d11e      	bne.n	800a9de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d009      	beq.n	800a9bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	0151      	lsls	r1, r2, #5
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	e092      	b.n	800ab04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	0151      	lsls	r1, r2, #5
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	440a      	add	r2, r1
 800a9f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d07e      	beq.n	800ab04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	f003 030f 	and.w	r3, r3, #15
 800aa16:	2101      	movs	r1, #1
 800aa18:	fa01 f303 	lsl.w	r3, r1, r3
 800aa1c:	6979      	ldr	r1, [r7, #20]
 800aa1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa22:	4313      	orrs	r3, r2
 800aa24:	634b      	str	r3, [r1, #52]	; 0x34
 800aa26:	e06d      	b.n	800ab04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	0151      	lsls	r1, r2, #5
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	440a      	add	r2, r1
 800aa3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa42:	0cdb      	lsrs	r3, r3, #19
 800aa44:	04db      	lsls	r3, r3, #19
 800aa46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	0151      	lsls	r1, r2, #5
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa8:	691a      	ldr	r2, [r3, #16]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aab2:	6939      	ldr	r1, [r7, #16]
 800aab4:	0148      	lsls	r0, r1, #5
 800aab6:	6979      	ldr	r1, [r7, #20]
 800aab8:	4401      	add	r1, r0
 800aaba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aabe:	4313      	orrs	r3, r2
 800aac0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d10d      	bne.n	800aae4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	68d9      	ldr	r1, [r3, #12]
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae0:	460a      	mov	r2, r1
 800aae2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	0151      	lsls	r1, r2, #5
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	440a      	add	r2, r1
 800aafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aafe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	371c      	adds	r7, #28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b089      	sub	sp, #36	; 0x24
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	461a      	mov	r2, r3
 800ab20:	460b      	mov	r3, r1
 800ab22:	71fb      	strb	r3, [r7, #7]
 800ab24:	4613      	mov	r3, r2
 800ab26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ab30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d11a      	bne.n	800ab6e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab38:	88bb      	ldrh	r3, [r7, #4]
 800ab3a:	3303      	adds	r3, #3
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab40:	2300      	movs	r3, #0
 800ab42:	61bb      	str	r3, [r7, #24]
 800ab44:	e00f      	b.n	800ab66 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	031a      	lsls	r2, r3, #12
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab52:	461a      	mov	r2, r3
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	3301      	adds	r3, #1
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d3eb      	bcc.n	800ab46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3724      	adds	r7, #36	; 0x24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b089      	sub	sp, #36	; 0x24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	3303      	adds	r3, #3
 800ab96:	089b      	lsrs	r3, r3, #2
 800ab98:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	61bb      	str	r3, [r7, #24]
 800ab9e:	e00b      	b.n	800abb8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	601a      	str	r2, [r3, #0]
    pDest++;
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	3304      	adds	r3, #4
 800abb0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	3301      	adds	r3, #1
 800abb6:	61bb      	str	r3, [r7, #24]
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d3ef      	bcc.n	800aba0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800abc0:	69fb      	ldr	r3, [r7, #28]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3724      	adds	r7, #36	; 0x24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	785b      	ldrb	r3, [r3, #1]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d12c      	bne.n	800ac44 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	db12      	blt.n	800ac22 <USB_EPSetStall+0x54>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00f      	beq.n	800ac22 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac20:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	e02b      	b.n	800ac9c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	db12      	blt.n	800ac7c <USB_EPSetStall+0xae>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00f      	beq.n	800ac7c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	015a      	lsls	r2, r3, #5
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	0151      	lsls	r1, r2, #5
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	440a      	add	r2, r1
 800ac72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac7a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	0151      	lsls	r1, r2, #5
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	440a      	add	r2, r1
 800ac92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	785b      	ldrb	r3, [r3, #1]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d128      	bne.n	800ad18 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ace4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	78db      	ldrb	r3, [r3, #3]
 800acea:	2b03      	cmp	r3, #3
 800acec:	d003      	beq.n	800acf6 <USB_EPClearStall+0x4c>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	78db      	ldrb	r3, [r3, #3]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d138      	bne.n	800ad68 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	0151      	lsls	r1, r2, #5
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	440a      	add	r2, r1
 800ad0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	e027      	b.n	800ad68 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	0151      	lsls	r1, r2, #5
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	78db      	ldrb	r3, [r3, #3]
 800ad3c:	2b03      	cmp	r3, #3
 800ad3e:	d003      	beq.n	800ad48 <USB_EPClearStall+0x9e>
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	78db      	ldrb	r3, [r3, #3]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d10f      	bne.n	800ad68 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	0151      	lsls	r1, r2, #5
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	440a      	add	r2, r1
 800ad5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad66:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b085      	sub	sp, #20
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ad98:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800adaa:	68f9      	ldr	r1, [r7, #12]
 800adac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adb0:	4313      	orrs	r3, r2
 800adb2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b085      	sub	sp, #20
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800addc:	f023 0303 	bic.w	r3, r3, #3
 800ade0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adf0:	f023 0302 	bic.w	r3, r3, #2
 800adf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae1e:	f023 0303 	bic.w	r3, r3, #3
 800ae22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae32:	f043 0302 	orr.w	r3, r3, #2
 800ae36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b085      	sub	sp, #20
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	0c1b      	lsrs	r3, r3, #16
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4013      	ands	r3, r2
 800aec2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	b29b      	uxth	r3, r3
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	4013      	ands	r3, r2
 800af00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af02:	68bb      	ldr	r3, [r7, #8]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af32:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	fa22 f303 	lsr.w	r3, r2, r3
 800af40:	01db      	lsls	r3, r3, #7
 800af42:	b2db      	uxtb	r3, r3
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4013      	ands	r3, r2
 800af5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af5e:	68bb      	ldr	r3, [r7, #8]
}
 800af60:	4618      	mov	r0, r3
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	f003 0301 	and.w	r3, r3, #1
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
	...

0800afd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	460b      	mov	r3, r1
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	333c      	adds	r3, #60	; 0x3c
 800afe6:	3304      	adds	r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	4a26      	ldr	r2, [pc, #152]	; (800b088 <USB_EP0_OutStart+0xb8>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d90a      	bls.n	800b00a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b004:	d101      	bne.n	800b00a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	e037      	b.n	800b07a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b010:	461a      	mov	r2, r3
 800b012:	2300      	movs	r3, #0
 800b014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b038:	f043 0318 	orr.w	r3, r3, #24
 800b03c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b04c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b050:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b052:	7afb      	ldrb	r3, [r7, #11]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d10f      	bne.n	800b078 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b072:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	4f54300a 	.word	0x4f54300a

0800b08c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	4a13      	ldr	r2, [pc, #76]	; (800b0f0 <USB_CoreReset+0x64>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d901      	bls.n	800b0aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e01b      	b.n	800b0e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	daf2      	bge.n	800b098 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f043 0201 	orr.w	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <USB_CoreReset+0x64>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d901      	bls.n	800b0d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e006      	b.n	800b0e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d0f0      	beq.n	800b0c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	00030d40 	.word	0x00030d40

0800b0f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b100:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b104:	f005 fa16 	bl	8010534 <USBD_static_malloc>
 800b108:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d105      	bne.n	800b11c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b118:	2302      	movs	r3, #2
 800b11a:	e066      	b.n	800b1ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7c1b      	ldrb	r3, [r3, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d119      	bne.n	800b160 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b130:	2202      	movs	r2, #2
 800b132:	2181      	movs	r1, #129	; 0x81
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f005 f8da 	bl	80102ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b140:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b144:	2202      	movs	r2, #2
 800b146:	2101      	movs	r1, #1
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f005 f8d0 	bl	80102ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2210      	movs	r2, #16
 800b15a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b15e:	e016      	b.n	800b18e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b160:	2340      	movs	r3, #64	; 0x40
 800b162:	2202      	movs	r2, #2
 800b164:	2181      	movs	r1, #129	; 0x81
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f005 f8c1 	bl	80102ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b172:	2340      	movs	r3, #64	; 0x40
 800b174:	2202      	movs	r2, #2
 800b176:	2101      	movs	r1, #1
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f005 f8b8 	bl	80102ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2210      	movs	r2, #16
 800b18a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b18e:	2308      	movs	r3, #8
 800b190:	2203      	movs	r2, #3
 800b192:	2182      	movs	r1, #130	; 0x82
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f005 f8aa 	bl	80102ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7c1b      	ldrb	r3, [r3, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d109      	bne.n	800b1d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f005 f97b 	bl	80104cc <USBD_LL_PrepareReceive>
 800b1d6:	e007      	b.n	800b1e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1de:	2340      	movs	r3, #64	; 0x40
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f005 f972 	bl	80104cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b1fe:	2181      	movs	r1, #129	; 0x81
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f005 f89a 	bl	801033a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b20c:	2101      	movs	r1, #1
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f005 f893 	bl	801033a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b21c:	2182      	movs	r1, #130	; 0x82
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f005 f88b 	bl	801033a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b24e:	4618      	mov	r0, r3
 800b250:	f005 f97e 	bl	8010550 <USBD_static_free>
    pdev->pClassData = NULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b278:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e0af      	b.n	800b3f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d03f      	beq.n	800b31c <USBD_CDC_Setup+0xb4>
 800b29c:	2b20      	cmp	r3, #32
 800b29e:	f040 809f 	bne.w	800b3e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	88db      	ldrh	r3, [r3, #6]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d02e      	beq.n	800b308 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	b25b      	sxtb	r3, r3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	da16      	bge.n	800b2e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b2c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	88d2      	ldrh	r2, [r2, #6]
 800b2c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	88db      	ldrh	r3, [r3, #6]
 800b2cc:	2b07      	cmp	r3, #7
 800b2ce:	bf28      	it	cs
 800b2d0:	2307      	movcs	r3, #7
 800b2d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	89fa      	ldrh	r2, [r7, #14]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 fb19 	bl	800c912 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b2e0:	e085      	b.n	800b3ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	785a      	ldrb	r2, [r3, #1]
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	88db      	ldrh	r3, [r3, #6]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b2f8:	6939      	ldr	r1, [r7, #16]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	88db      	ldrh	r3, [r3, #6]
 800b2fe:	461a      	mov	r2, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fb32 	bl	800c96a <USBD_CtlPrepareRx>
      break;
 800b306:	e072      	b.n	800b3ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	7850      	ldrb	r0, [r2, #1]
 800b314:	2200      	movs	r2, #0
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	4798      	blx	r3
      break;
 800b31a:	e068      	b.n	800b3ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	2b0b      	cmp	r3, #11
 800b322:	d852      	bhi.n	800b3ca <USBD_CDC_Setup+0x162>
 800b324:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <USBD_CDC_Setup+0xc4>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b35d 	.word	0x0800b35d
 800b330:	0800b3d9 	.word	0x0800b3d9
 800b334:	0800b3cb 	.word	0x0800b3cb
 800b338:	0800b3cb 	.word	0x0800b3cb
 800b33c:	0800b3cb 	.word	0x0800b3cb
 800b340:	0800b3cb 	.word	0x0800b3cb
 800b344:	0800b3cb 	.word	0x0800b3cb
 800b348:	0800b3cb 	.word	0x0800b3cb
 800b34c:	0800b3cb 	.word	0x0800b3cb
 800b350:	0800b3cb 	.word	0x0800b3cb
 800b354:	0800b387 	.word	0x0800b387
 800b358:	0800b3b1 	.word	0x0800b3b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b03      	cmp	r3, #3
 800b366:	d107      	bne.n	800b378 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b368:	f107 030a 	add.w	r3, r7, #10
 800b36c:	2202      	movs	r2, #2
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 face 	bl	800c912 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b376:	e032      	b.n	800b3de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f001 fa58 	bl	800c830 <USBD_CtlError>
            ret = USBD_FAIL;
 800b380:	2303      	movs	r3, #3
 800b382:	75fb      	strb	r3, [r7, #23]
          break;
 800b384:	e02b      	b.n	800b3de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d107      	bne.n	800b3a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b392:	f107 030d 	add.w	r3, r7, #13
 800b396:	2201      	movs	r2, #1
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f001 fab9 	bl	800c912 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3a0:	e01d      	b.n	800b3de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 fa43 	bl	800c830 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b3ae:	e016      	b.n	800b3de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d00f      	beq.n	800b3dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f001 fa36 	bl	800c830 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3c8:	e008      	b.n	800b3dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 fa2f 	bl	800c830 <USBD_CtlError>
          ret = USBD_FAIL;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	75fb      	strb	r3, [r7, #23]
          break;
 800b3d6:	e002      	b.n	800b3de <USBD_CDC_Setup+0x176>
          break;
 800b3d8:	bf00      	nop
 800b3da:	e008      	b.n	800b3ee <USBD_CDC_Setup+0x186>
          break;
 800b3dc:	bf00      	nop
      }
      break;
 800b3de:	e006      	b.n	800b3ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fa24 	bl	800c830 <USBD_CtlError>
      ret = USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b40a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b416:	2303      	movs	r3, #3
 800b418:	e04f      	b.n	800b4ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b420:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b422:	78fa      	ldrb	r2, [r7, #3]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	3318      	adds	r3, #24
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d029      	beq.n	800b48c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b438:	78fa      	ldrb	r2, [r7, #3]
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	3318      	adds	r3, #24
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	78f9      	ldrb	r1, [r7, #3]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	460b      	mov	r3, r1
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	1a5b      	subs	r3, r3, r1
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4403      	add	r3, r0
 800b458:	3344      	adds	r3, #68	; 0x44
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b460:	fb03 f301 	mul.w	r3, r3, r1
 800b464:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b466:	2b00      	cmp	r3, #0
 800b468:	d110      	bne.n	800b48c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b46a:	78fa      	ldrb	r2, [r7, #3]
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	440b      	add	r3, r1
 800b478:	3318      	adds	r3, #24
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b47e:	78f9      	ldrb	r1, [r7, #3]
 800b480:	2300      	movs	r3, #0
 800b482:	2200      	movs	r2, #0
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f005 f800 	bl	801048a <USBD_LL_Transmit>
 800b48a:	e015      	b.n	800b4b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b4b4:	78fa      	ldrb	r2, [r7, #3]
 800b4b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e015      	b.n	800b510 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f005 f810 	bl	801050e <USBD_LL_GetRxDataSize>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b50a:	4611      	mov	r1, r2
 800b50c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b526:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b52e:	2303      	movs	r3, #3
 800b530:	e01b      	b.n	800b56a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d015      	beq.n	800b568 <USBD_CDC_EP0_RxReady+0x50>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b542:	2bff      	cmp	r3, #255	; 0xff
 800b544:	d010      	beq.n	800b568 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b554:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b55c:	b292      	uxth	r2, r2
 800b55e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	22ff      	movs	r2, #255	; 0xff
 800b564:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2243      	movs	r2, #67	; 0x43
 800b580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b582:	4b03      	ldr	r3, [pc, #12]	; (800b590 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	20000110 	.word	0x20000110

0800b594 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2243      	movs	r2, #67	; 0x43
 800b5a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b5a2:	4b03      	ldr	r3, [pc, #12]	; (800b5b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	200000cc 	.word	0x200000cc

0800b5b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2243      	movs	r2, #67	; 0x43
 800b5c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b5c2:	4b03      	ldr	r3, [pc, #12]	; (800b5d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	20000154 	.word	0x20000154

0800b5d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	220a      	movs	r2, #10
 800b5e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5e2:	4b03      	ldr	r3, [pc, #12]	; (800b5f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	20000088 	.word	0x20000088

0800b5f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	e004      	b.n	800b612 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b61e:	b480      	push	{r7}
 800b620:	b087      	sub	sp, #28
 800b622:	af00      	add	r7, sp, #0
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b630:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	e008      	b.n	800b64e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b66a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	e004      	b.n	800b680 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b69a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b69c:	2301      	movs	r3, #1
 800b69e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e01a      	b.n	800b6e4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d114      	bne.n	800b6e2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b6d6:	2181      	movs	r1, #129	; 0x81
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f004 fed6 	bl	801048a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b706:	2303      	movs	r3, #3
 800b708:	e016      	b.n	800b738 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7c1b      	ldrb	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d109      	bne.n	800b726 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b71c:	2101      	movs	r1, #1
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f004 fed4 	bl	80104cc <USBD_LL_PrepareReceive>
 800b724:	e007      	b.n	800b736 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b72c:	2340      	movs	r3, #64	; 0x40
 800b72e:	2101      	movs	r1, #1
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f004 fecb 	bl	80104cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	4613      	mov	r3, r2
 800b74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b754:	2303      	movs	r3, #3
 800b756:	e01f      	b.n	800b798 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	79fa      	ldrb	r2, [r7, #7]
 800b78a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f004 fd47 	bl	8010220 <USBD_LL_Init>
 800b792:	4603      	mov	r3, r0
 800b794:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b796:	7dfb      	ldrb	r3, [r7, #23]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	e016      	b.n	800b7e6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00b      	beq.n	800b7e4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	f107 020e 	add.w	r2, r7, #14
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	4602      	mov	r2, r0
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b082      	sub	sp, #8
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f004 fd5e 	bl	80102b8 <USBD_LL_Start>
 800b7fc:	4603      	mov	r3, r0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b828:	2303      	movs	r3, #3
 800b82a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	78fa      	ldrb	r2, [r7, #3]
 800b840:	4611      	mov	r1, r2
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b866:	2b00      	cmp	r3, #0
 800b868:	d007      	beq.n	800b87a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	78fa      	ldrb	r2, [r7, #3]
 800b874:	4611      	mov	r1, r2
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	4798      	blx	r3
  }

  return USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	4618      	mov	r0, r3
 800b898:	f000 ff90 	bl	800c7bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8b8:	f003 031f 	and.w	r3, r3, #31
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d01a      	beq.n	800b8f6 <USBD_LL_SetupStage+0x72>
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d822      	bhi.n	800b90a <USBD_LL_SetupStage+0x86>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <USBD_LL_SetupStage+0x4a>
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d00a      	beq.n	800b8e2 <USBD_LL_SetupStage+0x5e>
 800b8cc:	e01d      	b.n	800b90a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fa62 	bl	800bda0 <USBD_StdDevReq>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e0:	e020      	b.n	800b924 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fac6 	bl	800be7c <USBD_StdItfReq>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f4:	e016      	b.n	800b924 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fb05 	bl	800bf0e <USBD_StdEPReq>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]
      break;
 800b908:	e00c      	b.n	800b924 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b910:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b914:	b2db      	uxtb	r3, r3
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f004 fd2d 	bl	8010378 <USBD_LL_StallEP>
 800b91e:	4603      	mov	r3, r0
 800b920:	73fb      	strb	r3, [r7, #15]
      break;
 800b922:	bf00      	nop
  }

  return ret;
 800b924:	7bfb      	ldrb	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b086      	sub	sp, #24
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	460b      	mov	r3, r1
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b93c:	7afb      	ldrb	r3, [r7, #11]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d138      	bne.n	800b9b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b948:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b950:	2b03      	cmp	r3, #3
 800b952:	d14a      	bne.n	800b9ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d913      	bls.n	800b988 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	1ad2      	subs	r2, r2, r3
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	68da      	ldr	r2, [r3, #12]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	4293      	cmp	r3, r2
 800b978:	bf28      	it	cs
 800b97a:	4613      	movcs	r3, r2
 800b97c:	461a      	mov	r2, r3
 800b97e:	6879      	ldr	r1, [r7, #4]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f001 f80f 	bl	800c9a4 <USBD_CtlContinueRx>
 800b986:	e030      	b.n	800b9ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b03      	cmp	r3, #3
 800b992:	d10b      	bne.n	800b9ac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f001 f80a 	bl	800c9c6 <USBD_CtlSendStatus>
 800b9b2:	e01a      	b.n	800b9ea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d114      	bne.n	800b9ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00e      	beq.n	800b9ea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	7afa      	ldrb	r2, [r7, #11]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	4798      	blx	r3
 800b9dc:	4603      	mov	r3, r0
 800b9de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	e000      	b.n	800b9ec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d16b      	bne.n	800bae0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	3314      	adds	r3, #20
 800ba0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d156      	bne.n	800bac6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d914      	bls.n	800ba4e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	1ad2      	subs	r2, r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	461a      	mov	r2, r3
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f000 ff84 	bl	800c948 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba40:	2300      	movs	r3, #0
 800ba42:	2200      	movs	r2, #0
 800ba44:	2100      	movs	r1, #0
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f004 fd40 	bl	80104cc <USBD_LL_PrepareReceive>
 800ba4c:	e03b      	b.n	800bac6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d11c      	bne.n	800ba94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d316      	bcc.n	800ba94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d20f      	bcs.n	800ba94 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba74:	2200      	movs	r2, #0
 800ba76:	2100      	movs	r1, #0
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 ff65 	bl	800c948 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba86:	2300      	movs	r3, #0
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f004 fd1d 	bl	80104cc <USBD_LL_PrepareReceive>
 800ba92:	e018      	b.n	800bac6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d10b      	bne.n	800bab8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d005      	beq.n	800bab8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab8:	2180      	movs	r1, #128	; 0x80
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f004 fc5c 	bl	8010378 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 ff93 	bl	800c9ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d122      	bne.n	800bb16 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff fe98 	bl	800b806 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bade:	e01a      	b.n	800bb16 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d114      	bne.n	800bb16 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00e      	beq.n	800bb16 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	7afa      	ldrb	r2, [r7, #11]
 800bb02:	4611      	mov	r1, r2
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	4798      	blx	r3
 800bb08:	4603      	mov	r3, r0
 800bb0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	e000      	b.n	800bb18 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e02f      	b.n	800bbb4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00f      	beq.n	800bb7e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d009      	beq.n	800bb7e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6852      	ldr	r2, [r2, #4]
 800bb76:	b2d2      	uxtb	r2, r2
 800bb78:	4611      	mov	r1, r2
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb7e:	2340      	movs	r3, #64	; 0x40
 800bb80:	2200      	movs	r2, #0
 800bb82:	2100      	movs	r1, #0
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f004 fbb2 	bl	80102ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2240      	movs	r2, #64	; 0x40
 800bb96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb9a:	2340      	movs	r3, #64	; 0x40
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2180      	movs	r1, #128	; 0x80
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f004 fba4 	bl	80102ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2240      	movs	r2, #64	; 0x40
 800bbb0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	78fa      	ldrb	r2, [r7, #3]
 800bbcc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2204      	movs	r2, #4
 800bbf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d106      	bne.n	800bc2a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e012      	b.n	800bc74 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d10b      	bne.n	800bc72 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc60:	69db      	ldr	r3, [r3, #28]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bc92:	2303      	movs	r3, #3
 800bc94:	e014      	b.n	800bcc0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d10d      	bne.n	800bcbe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d007      	beq.n	800bcbe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	78fa      	ldrb	r2, [r7, #3]
 800bcb8:	4611      	mov	r1, r2
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e014      	b.n	800bd0c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d10d      	bne.n	800bd0a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d007      	beq.n	800bd0a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	4611      	mov	r1, r2
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b082      	sub	sp, #8
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d009      	beq.n	800bd58 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	6852      	ldr	r2, [r2, #4]
 800bd50:	b2d2      	uxtb	r2, r2
 800bd52:	4611      	mov	r1, r2
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	4798      	blx	r3
  }

  return USBD_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b087      	sub	sp, #28
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	3301      	adds	r3, #1
 800bd78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd80:	8a3b      	ldrh	r3, [r7, #16]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	b21a      	sxth	r2, r3
 800bd86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	b21b      	sxth	r3, r3
 800bd8e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd90:	89fb      	ldrh	r3, [r7, #14]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	371c      	adds	r7, #28
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdb6:	2b40      	cmp	r3, #64	; 0x40
 800bdb8:	d005      	beq.n	800bdc6 <USBD_StdDevReq+0x26>
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d853      	bhi.n	800be66 <USBD_StdDevReq+0xc6>
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00b      	beq.n	800bdda <USBD_StdDevReq+0x3a>
 800bdc2:	2b20      	cmp	r3, #32
 800bdc4:	d14f      	bne.n	800be66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	4798      	blx	r3
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd8:	e04a      	b.n	800be70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	785b      	ldrb	r3, [r3, #1]
 800bdde:	2b09      	cmp	r3, #9
 800bde0:	d83b      	bhi.n	800be5a <USBD_StdDevReq+0xba>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <USBD_StdDevReq+0x48>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800be51 	.word	0x0800be51
 800bdf0:	0800be5b 	.word	0x0800be5b
 800bdf4:	0800be47 	.word	0x0800be47
 800bdf8:	0800be5b 	.word	0x0800be5b
 800bdfc:	0800be1b 	.word	0x0800be1b
 800be00:	0800be11 	.word	0x0800be11
 800be04:	0800be5b 	.word	0x0800be5b
 800be08:	0800be33 	.word	0x0800be33
 800be0c:	0800be25 	.word	0x0800be25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f9de 	bl	800c1d4 <USBD_GetDescriptor>
          break;
 800be18:	e024      	b.n	800be64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fb43 	bl	800c4a8 <USBD_SetAddress>
          break;
 800be22:	e01f      	b.n	800be64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fb82 	bl	800c530 <USBD_SetConfig>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]
          break;
 800be30:	e018      	b.n	800be64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fc21 	bl	800c67c <USBD_GetConfig>
          break;
 800be3a:	e013      	b.n	800be64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fc52 	bl	800c6e8 <USBD_GetStatus>
          break;
 800be44:	e00e      	b.n	800be64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fc81 	bl	800c750 <USBD_SetFeature>
          break;
 800be4e:	e009      	b.n	800be64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fc90 	bl	800c778 <USBD_ClrFeature>
          break;
 800be58:	e004      	b.n	800be64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fce7 	bl	800c830 <USBD_CtlError>
          break;
 800be62:	bf00      	nop
      }
      break;
 800be64:	e004      	b.n	800be70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fce1 	bl	800c830 <USBD_CtlError>
      break;
 800be6e:	bf00      	nop
  }

  return ret;
 800be70:	7bfb      	ldrb	r3, [r7, #15]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop

0800be7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be92:	2b40      	cmp	r3, #64	; 0x40
 800be94:	d005      	beq.n	800bea2 <USBD_StdItfReq+0x26>
 800be96:	2b40      	cmp	r3, #64	; 0x40
 800be98:	d82f      	bhi.n	800befa <USBD_StdItfReq+0x7e>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <USBD_StdItfReq+0x26>
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	d12b      	bne.n	800befa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	3b01      	subs	r3, #1
 800beac:	2b02      	cmp	r3, #2
 800beae:	d81d      	bhi.n	800beec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	889b      	ldrh	r3, [r3, #4]
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d813      	bhi.n	800bee2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	4798      	blx	r3
 800bec8:	4603      	mov	r3, r0
 800beca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	88db      	ldrh	r3, [r3, #6]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d110      	bne.n	800bef6 <USBD_StdItfReq+0x7a>
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10d      	bne.n	800bef6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fd73 	bl	800c9c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bee0:	e009      	b.n	800bef6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fca3 	bl	800c830 <USBD_CtlError>
          break;
 800beea:	e004      	b.n	800bef6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fc9e 	bl	800c830 <USBD_CtlError>
          break;
 800bef4:	e000      	b.n	800bef8 <USBD_StdItfReq+0x7c>
          break;
 800bef6:	bf00      	nop
      }
      break;
 800bef8:	e004      	b.n	800bf04 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fc97 	bl	800c830 <USBD_CtlError>
      break;
 800bf02:	bf00      	nop
  }

  return ret;
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	889b      	ldrh	r3, [r3, #4]
 800bf20:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf2a:	2b40      	cmp	r3, #64	; 0x40
 800bf2c:	d007      	beq.n	800bf3e <USBD_StdEPReq+0x30>
 800bf2e:	2b40      	cmp	r3, #64	; 0x40
 800bf30:	f200 8145 	bhi.w	800c1be <USBD_StdEPReq+0x2b0>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00c      	beq.n	800bf52 <USBD_StdEPReq+0x44>
 800bf38:	2b20      	cmp	r3, #32
 800bf3a:	f040 8140 	bne.w	800c1be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	4798      	blx	r3
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf50:	e13a      	b.n	800c1c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d007      	beq.n	800bf6a <USBD_StdEPReq+0x5c>
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	f300 8129 	bgt.w	800c1b2 <USBD_StdEPReq+0x2a4>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d07f      	beq.n	800c064 <USBD_StdEPReq+0x156>
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d03c      	beq.n	800bfe2 <USBD_StdEPReq+0xd4>
 800bf68:	e123      	b.n	800c1b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d002      	beq.n	800bf7c <USBD_StdEPReq+0x6e>
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d016      	beq.n	800bfa8 <USBD_StdEPReq+0x9a>
 800bf7a:	e02c      	b.n	800bfd6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00d      	beq.n	800bf9e <USBD_StdEPReq+0x90>
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b80      	cmp	r3, #128	; 0x80
 800bf86:	d00a      	beq.n	800bf9e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f004 f9f3 	bl	8010378 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf92:	2180      	movs	r1, #128	; 0x80
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f004 f9ef 	bl	8010378 <USBD_LL_StallEP>
 800bf9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf9c:	e020      	b.n	800bfe0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fc45 	bl	800c830 <USBD_CtlError>
              break;
 800bfa6:	e01b      	b.n	800bfe0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	885b      	ldrh	r3, [r3, #2]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10e      	bne.n	800bfce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00b      	beq.n	800bfce <USBD_StdEPReq+0xc0>
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	2b80      	cmp	r3, #128	; 0x80
 800bfba:	d008      	beq.n	800bfce <USBD_StdEPReq+0xc0>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	88db      	ldrh	r3, [r3, #6]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d104      	bne.n	800bfce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f004 f9d5 	bl	8010378 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fcf9 	bl	800c9c6 <USBD_CtlSendStatus>

              break;
 800bfd4:	e004      	b.n	800bfe0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fc29 	bl	800c830 <USBD_CtlError>
              break;
 800bfde:	bf00      	nop
          }
          break;
 800bfe0:	e0ec      	b.n	800c1bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d002      	beq.n	800bff4 <USBD_StdEPReq+0xe6>
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d016      	beq.n	800c020 <USBD_StdEPReq+0x112>
 800bff2:	e030      	b.n	800c056 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00d      	beq.n	800c016 <USBD_StdEPReq+0x108>
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	2b80      	cmp	r3, #128	; 0x80
 800bffe:	d00a      	beq.n	800c016 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f004 f9b7 	bl	8010378 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c00a:	2180      	movs	r1, #128	; 0x80
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f004 f9b3 	bl	8010378 <USBD_LL_StallEP>
 800c012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c014:	e025      	b.n	800c062 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fc09 	bl	800c830 <USBD_CtlError>
              break;
 800c01e:	e020      	b.n	800c062 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	885b      	ldrh	r3, [r3, #2]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11b      	bne.n	800c060 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d004      	beq.n	800c03c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f004 f9bd 	bl	80103b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fcc2 	bl	800c9c6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c054:	e004      	b.n	800c060 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fbe9 	bl	800c830 <USBD_CtlError>
              break;
 800c05e:	e000      	b.n	800c062 <USBD_StdEPReq+0x154>
              break;
 800c060:	bf00      	nop
          }
          break;
 800c062:	e0ab      	b.n	800c1bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d002      	beq.n	800c076 <USBD_StdEPReq+0x168>
 800c070:	2b03      	cmp	r3, #3
 800c072:	d032      	beq.n	800c0da <USBD_StdEPReq+0x1cc>
 800c074:	e097      	b.n	800c1a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d007      	beq.n	800c08c <USBD_StdEPReq+0x17e>
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	2b80      	cmp	r3, #128	; 0x80
 800c080:	d004      	beq.n	800c08c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fbd3 	bl	800c830 <USBD_CtlError>
                break;
 800c08a:	e091      	b.n	800c1b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c090:	2b00      	cmp	r3, #0
 800c092:	da0b      	bge.n	800c0ac <USBD_StdEPReq+0x19e>
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	3310      	adds	r3, #16
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	e00b      	b.n	800c0c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fc1d 	bl	800c912 <USBD_CtlSendData>
              break;
 800c0d8:	e06a      	b.n	800c1b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	da11      	bge.n	800c106 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
 800c0e4:	f003 020f 	and.w	r2, r3, #15
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3324      	adds	r3, #36	; 0x24
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d117      	bne.n	800c12c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fb96 	bl	800c830 <USBD_CtlError>
                  break;
 800c104:	e054      	b.n	800c1b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	f003 020f 	and.w	r2, r3, #15
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	440b      	add	r3, r1
 800c118:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d104      	bne.n	800c12c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fb83 	bl	800c830 <USBD_CtlError>
                  break;
 800c12a:	e041      	b.n	800c1b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c130:	2b00      	cmp	r3, #0
 800c132:	da0b      	bge.n	800c14c <USBD_StdEPReq+0x23e>
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	3310      	adds	r3, #16
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	4413      	add	r3, r2
 800c148:	3304      	adds	r3, #4
 800c14a:	e00b      	b.n	800c164 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c152:	4613      	mov	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	4413      	add	r3, r2
 800c162:	3304      	adds	r3, #4
 800c164:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c166:	7bbb      	ldrb	r3, [r7, #14]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <USBD_StdEPReq+0x264>
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2b80      	cmp	r3, #128	; 0x80
 800c170:	d103      	bne.n	800c17a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2200      	movs	r2, #0
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	e00e      	b.n	800c198 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f004 f938 	bl	80103f4 <USBD_LL_IsStallEP>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2201      	movs	r2, #1
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	e002      	b.n	800c198 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2202      	movs	r2, #2
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fbb7 	bl	800c912 <USBD_CtlSendData>
              break;
 800c1a4:	e004      	b.n	800c1b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fb41 	bl	800c830 <USBD_CtlError>
              break;
 800c1ae:	bf00      	nop
          }
          break;
 800c1b0:	e004      	b.n	800c1bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fb3b 	bl	800c830 <USBD_CtlError>
          break;
 800c1ba:	bf00      	nop
      }
      break;
 800c1bc:	e004      	b.n	800c1c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fb35 	bl	800c830 <USBD_CtlError>
      break;
 800c1c6:	bf00      	nop
  }

  return ret;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	885b      	ldrh	r3, [r3, #2]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	2b06      	cmp	r3, #6
 800c1f6:	f200 8128 	bhi.w	800c44a <USBD_GetDescriptor+0x276>
 800c1fa:	a201      	add	r2, pc, #4	; (adr r2, 800c200 <USBD_GetDescriptor+0x2c>)
 800c1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c200:	0800c21d 	.word	0x0800c21d
 800c204:	0800c235 	.word	0x0800c235
 800c208:	0800c275 	.word	0x0800c275
 800c20c:	0800c44b 	.word	0x0800c44b
 800c210:	0800c44b 	.word	0x0800c44b
 800c214:	0800c3eb 	.word	0x0800c3eb
 800c218:	0800c417 	.word	0x0800c417
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	7c12      	ldrb	r2, [r2, #16]
 800c228:	f107 0108 	add.w	r1, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
      break;
 800c232:	e112      	b.n	800c45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	7c1b      	ldrb	r3, [r3, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10d      	bne.n	800c258 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c244:	f107 0208 	add.w	r2, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	2202      	movs	r2, #2
 800c254:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c256:	e100      	b.n	800c45a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	f107 0208 	add.w	r2, r7, #8
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
 800c268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	3301      	adds	r3, #1
 800c26e:	2202      	movs	r2, #2
 800c270:	701a      	strb	r2, [r3, #0]
      break;
 800c272:	e0f2      	b.n	800c45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	885b      	ldrh	r3, [r3, #2]
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b05      	cmp	r3, #5
 800c27c:	f200 80ac 	bhi.w	800c3d8 <USBD_GetDescriptor+0x204>
 800c280:	a201      	add	r2, pc, #4	; (adr r2, 800c288 <USBD_GetDescriptor+0xb4>)
 800c282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c286:	bf00      	nop
 800c288:	0800c2a1 	.word	0x0800c2a1
 800c28c:	0800c2d5 	.word	0x0800c2d5
 800c290:	0800c309 	.word	0x0800c309
 800c294:	0800c33d 	.word	0x0800c33d
 800c298:	0800c371 	.word	0x0800c371
 800c29c:	0800c3a5 	.word	0x0800c3a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	7c12      	ldrb	r2, [r2, #16]
 800c2b8:	f107 0108 	add.w	r1, r7, #8
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
 800c2c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2c2:	e091      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fab2 	bl	800c830 <USBD_CtlError>
            err++;
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2d2:	e089      	b.n	800c3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	7c12      	ldrb	r2, [r2, #16]
 800c2ec:	f107 0108 	add.w	r1, r7, #8
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f6:	e077      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fa98 	bl	800c830 <USBD_CtlError>
            err++;
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	3301      	adds	r3, #1
 800c304:	72fb      	strb	r3, [r7, #11]
          break;
 800c306:	e06f      	b.n	800c3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7c12      	ldrb	r2, [r2, #16]
 800c320:	f107 0108 	add.w	r1, r7, #8
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c32a:	e05d      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fa7e 	bl	800c830 <USBD_CtlError>
            err++;
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	3301      	adds	r3, #1
 800c338:	72fb      	strb	r3, [r7, #11]
          break;
 800c33a:	e055      	b.n	800c3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c35e:	e043      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fa64 	bl	800c830 <USBD_CtlError>
            err++;
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	3301      	adds	r3, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
          break;
 800c36e:	e03b      	b.n	800c3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	7c12      	ldrb	r2, [r2, #16]
 800c388:	f107 0108 	add.w	r1, r7, #8
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c392:	e029      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fa4a 	bl	800c830 <USBD_CtlError>
            err++;
 800c39c:	7afb      	ldrb	r3, [r7, #11]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3a2:	e021      	b.n	800c3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	7c12      	ldrb	r2, [r2, #16]
 800c3bc:	f107 0108 	add.w	r1, r7, #8
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	4798      	blx	r3
 800c3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c6:	e00f      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fa30 	bl	800c830 <USBD_CtlError>
            err++;
 800c3d0:	7afb      	ldrb	r3, [r7, #11]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d6:	e007      	b.n	800c3e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fa28 	bl	800c830 <USBD_CtlError>
          err++;
 800c3e0:	7afb      	ldrb	r3, [r7, #11]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c3e6:	bf00      	nop
      }
      break;
 800c3e8:	e037      	b.n	800c45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	7c1b      	ldrb	r3, [r3, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d109      	bne.n	800c406 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fa:	f107 0208 	add.w	r2, r7, #8
 800c3fe:	4610      	mov	r0, r2
 800c400:	4798      	blx	r3
 800c402:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c404:	e029      	b.n	800c45a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fa11 	bl	800c830 <USBD_CtlError>
        err++;
 800c40e:	7afb      	ldrb	r3, [r7, #11]
 800c410:	3301      	adds	r3, #1
 800c412:	72fb      	strb	r3, [r7, #11]
      break;
 800c414:	e021      	b.n	800c45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7c1b      	ldrb	r3, [r3, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10d      	bne.n	800c43a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c426:	f107 0208 	add.w	r2, r7, #8
 800c42a:	4610      	mov	r0, r2
 800c42c:	4798      	blx	r3
 800c42e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3301      	adds	r3, #1
 800c434:	2207      	movs	r2, #7
 800c436:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c438:	e00f      	b.n	800c45a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f9f7 	bl	800c830 <USBD_CtlError>
        err++;
 800c442:	7afb      	ldrb	r3, [r7, #11]
 800c444:	3301      	adds	r3, #1
 800c446:	72fb      	strb	r3, [r7, #11]
      break;
 800c448:	e007      	b.n	800c45a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f9ef 	bl	800c830 <USBD_CtlError>
      err++;
 800c452:	7afb      	ldrb	r3, [r7, #11]
 800c454:	3301      	adds	r3, #1
 800c456:	72fb      	strb	r3, [r7, #11]
      break;
 800c458:	bf00      	nop
  }

  if (err != 0U)
 800c45a:	7afb      	ldrb	r3, [r7, #11]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d11e      	bne.n	800c49e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	88db      	ldrh	r3, [r3, #6]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d016      	beq.n	800c496 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c468:	893b      	ldrh	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00e      	beq.n	800c48c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	88da      	ldrh	r2, [r3, #6]
 800c472:	893b      	ldrh	r3, [r7, #8]
 800c474:	4293      	cmp	r3, r2
 800c476:	bf28      	it	cs
 800c478:	4613      	movcs	r3, r2
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c47e:	893b      	ldrh	r3, [r7, #8]
 800c480:	461a      	mov	r2, r3
 800c482:	68f9      	ldr	r1, [r7, #12]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fa44 	bl	800c912 <USBD_CtlSendData>
 800c48a:	e009      	b.n	800c4a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f9ce 	bl	800c830 <USBD_CtlError>
 800c494:	e004      	b.n	800c4a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa95 	bl	800c9c6 <USBD_CtlSendStatus>
 800c49c:	e000      	b.n	800c4a0 <USBD_GetDescriptor+0x2cc>
    return;
 800c49e:	bf00      	nop
  }
}
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop

0800c4a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	889b      	ldrh	r3, [r3, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d131      	bne.n	800c51e <USBD_SetAddress+0x76>
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	88db      	ldrh	r3, [r3, #6]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d12d      	bne.n	800c51e <USBD_SetAddress+0x76>
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	885b      	ldrh	r3, [r3, #2]
 800c4c6:	2b7f      	cmp	r3, #127	; 0x7f
 800c4c8:	d829      	bhi.n	800c51e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	885b      	ldrh	r3, [r3, #2]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d104      	bne.n	800c4ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f9a3 	bl	800c830 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ea:	e01d      	b.n	800c528 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	7bfa      	ldrb	r2, [r7, #15]
 800c4f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f003 ffa7 	bl	801044c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fa61 	bl	800c9c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2202      	movs	r2, #2
 800c50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c512:	e009      	b.n	800c528 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c51c:	e004      	b.n	800c528 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f985 	bl	800c830 <USBD_CtlError>
  }
}
 800c526:	bf00      	nop
 800c528:	bf00      	nop
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	885b      	ldrh	r3, [r3, #2]
 800c542:	b2da      	uxtb	r2, r3
 800c544:	4b4c      	ldr	r3, [pc, #304]	; (800c678 <USBD_SetConfig+0x148>)
 800c546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c548:	4b4b      	ldr	r3, [pc, #300]	; (800c678 <USBD_SetConfig+0x148>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d905      	bls.n	800c55c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f96c 	bl	800c830 <USBD_CtlError>
    return USBD_FAIL;
 800c558:	2303      	movs	r3, #3
 800c55a:	e088      	b.n	800c66e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b02      	cmp	r3, #2
 800c566:	d002      	beq.n	800c56e <USBD_SetConfig+0x3e>
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d025      	beq.n	800c5b8 <USBD_SetConfig+0x88>
 800c56c:	e071      	b.n	800c652 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c56e:	4b42      	ldr	r3, [pc, #264]	; (800c678 <USBD_SetConfig+0x148>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d01c      	beq.n	800c5b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c576:	4b40      	ldr	r3, [pc, #256]	; (800c678 <USBD_SetConfig+0x148>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c580:	4b3d      	ldr	r3, [pc, #244]	; (800c678 <USBD_SetConfig+0x148>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff f948 	bl	800b81c <USBD_SetClassConfig>
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c590:	7bfb      	ldrb	r3, [r7, #15]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d004      	beq.n	800c5a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f949 	bl	800c830 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c59e:	e065      	b.n	800c66c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fa10 	bl	800c9c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2203      	movs	r2, #3
 800c5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5ae:	e05d      	b.n	800c66c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fa08 	bl	800c9c6 <USBD_CtlSendStatus>
      break;
 800c5b6:	e059      	b.n	800c66c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5b8:	4b2f      	ldr	r3, [pc, #188]	; (800c678 <USBD_SetConfig+0x148>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d112      	bne.n	800c5e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5c8:	4b2b      	ldr	r3, [pc, #172]	; (800c678 <USBD_SetConfig+0x148>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5d2:	4b29      	ldr	r3, [pc, #164]	; (800c678 <USBD_SetConfig+0x148>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff f93b 	bl	800b854 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f9f1 	bl	800c9c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5e4:	e042      	b.n	800c66c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c5e6:	4b24      	ldr	r3, [pc, #144]	; (800c678 <USBD_SetConfig+0x148>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d02a      	beq.n	800c64a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff f929 	bl	800b854 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c602:	4b1d      	ldr	r3, [pc, #116]	; (800c678 <USBD_SetConfig+0x148>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c60c:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <USBD_SetConfig+0x148>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	4619      	mov	r1, r3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff f902 	bl	800b81c <USBD_SetClassConfig>
 800c618:	4603      	mov	r3, r0
 800c61a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c61c:	7bfb      	ldrb	r3, [r7, #15]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00f      	beq.n	800c642 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f903 	bl	800c830 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff f90e 	bl	800b854 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c640:	e014      	b.n	800c66c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f9bf 	bl	800c9c6 <USBD_CtlSendStatus>
      break;
 800c648:	e010      	b.n	800c66c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f9bb 	bl	800c9c6 <USBD_CtlSendStatus>
      break;
 800c650:	e00c      	b.n	800c66c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f8eb 	bl	800c830 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c65a:	4b07      	ldr	r3, [pc, #28]	; (800c678 <USBD_SetConfig+0x148>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff f8f7 	bl	800b854 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c666:	2303      	movs	r3, #3
 800c668:	73fb      	strb	r3, [r7, #15]
      break;
 800c66a:	bf00      	nop
  }

  return ret;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	200131fc 	.word	0x200131fc

0800c67c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	88db      	ldrh	r3, [r3, #6]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d004      	beq.n	800c698 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f8cd 	bl	800c830 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c696:	e023      	b.n	800c6e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	dc02      	bgt.n	800c6aa <USBD_GetConfig+0x2e>
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	dc03      	bgt.n	800c6b0 <USBD_GetConfig+0x34>
 800c6a8:	e015      	b.n	800c6d6 <USBD_GetConfig+0x5a>
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d00b      	beq.n	800c6c6 <USBD_GetConfig+0x4a>
 800c6ae:	e012      	b.n	800c6d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f927 	bl	800c912 <USBD_CtlSendData>
        break;
 800c6c4:	e00c      	b.n	800c6e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	3304      	adds	r3, #4
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f91f 	bl	800c912 <USBD_CtlSendData>
        break;
 800c6d4:	e004      	b.n	800c6e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f8a9 	bl	800c830 <USBD_CtlError>
        break;
 800c6de:	bf00      	nop
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d81e      	bhi.n	800c73e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	88db      	ldrh	r3, [r3, #6]
 800c704:	2b02      	cmp	r3, #2
 800c706:	d004      	beq.n	800c712 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f890 	bl	800c830 <USBD_CtlError>
        break;
 800c710:	e01a      	b.n	800c748 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d005      	beq.n	800c72e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	f043 0202 	orr.w	r2, r3, #2
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	330c      	adds	r3, #12
 800c732:	2202      	movs	r2, #2
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f8eb 	bl	800c912 <USBD_CtlSendData>
      break;
 800c73c:	e004      	b.n	800c748 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f875 	bl	800c830 <USBD_CtlError>
      break;
 800c746:	bf00      	nop
  }
}
 800c748:	bf00      	nop
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	885b      	ldrh	r3, [r3, #2]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d106      	bne.n	800c770 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f92b 	bl	800c9c6 <USBD_CtlSendStatus>
  }
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d80b      	bhi.n	800c7a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	885b      	ldrh	r3, [r3, #2]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d10c      	bne.n	800c7b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f910 	bl	800c9c6 <USBD_CtlSendStatus>
      }
      break;
 800c7a6:	e004      	b.n	800c7b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f840 	bl	800c830 <USBD_CtlError>
      break;
 800c7b0:	e000      	b.n	800c7b4 <USBD_ClrFeature+0x3c>
      break;
 800c7b2:	bf00      	nop
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	781a      	ldrb	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	781a      	ldrb	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f7ff fabb 	bl	800bd62 <SWAPBYTE>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff faae 	bl	800bd62 <SWAPBYTE>
 800c806:	4603      	mov	r3, r0
 800c808:	461a      	mov	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3301      	adds	r3, #1
 800c812:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3301      	adds	r3, #1
 800c818:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f7ff faa1 	bl	800bd62 <SWAPBYTE>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	80da      	strh	r2, [r3, #6]
}
 800c828:	bf00      	nop
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c83a:	2180      	movs	r1, #128	; 0x80
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f003 fd9b 	bl	8010378 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c842:	2100      	movs	r1, #0
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f003 fd97 	bl	8010378 <USBD_LL_StallEP>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b086      	sub	sp, #24
 800c856:	af00      	add	r7, sp, #0
 800c858:	60f8      	str	r0, [r7, #12]
 800c85a:	60b9      	str	r1, [r7, #8]
 800c85c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c85e:	2300      	movs	r3, #0
 800c860:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d036      	beq.n	800c8d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c86c:	6938      	ldr	r0, [r7, #16]
 800c86e:	f000 f836 	bl	800c8de <USBD_GetLen>
 800c872:	4603      	mov	r3, r0
 800c874:	3301      	adds	r3, #1
 800c876:	b29b      	uxth	r3, r3
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	4413      	add	r3, r2
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	7812      	ldrb	r2, [r2, #0]
 800c88a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	3301      	adds	r3, #1
 800c890:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	4413      	add	r3, r2
 800c898:	2203      	movs	r2, #3
 800c89a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8a2:	e013      	b.n	800c8cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	7812      	ldrb	r2, [r2, #0]
 800c8ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	613b      	str	r3, [r7, #16]
    idx++;
 800c8b6:	7dfb      	ldrb	r3, [r7, #23]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8bc:	7dfb      	ldrb	r3, [r7, #23]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1e7      	bne.n	800c8a4 <USBD_GetString+0x52>
 800c8d4:	e000      	b.n	800c8d8 <USBD_GetString+0x86>
    return;
 800c8d6:	bf00      	nop
  }
}
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c8ee:	e005      	b.n	800c8fc <USBD_GetLen+0x1e>
  {
    len++;
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1f5      	bne.n	800c8f0 <USBD_GetLen+0x12>
  }

  return len;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2202      	movs	r2, #2
 800c922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	2100      	movs	r1, #0
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f003 fda6 	bl	801048a <USBD_LL_Transmit>

  return USBD_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	2100      	movs	r1, #0
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f003 fd95 	bl	801048a <USBD_LL_Transmit>

  return USBD_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2203      	movs	r2, #3
 800c97a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	2100      	movs	r1, #0
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f003 fd99 	bl	80104cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f003 fd88 	bl	80104cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2204      	movs	r2, #4
 800c9d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2100      	movs	r1, #0
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f003 fd54 	bl	801048a <USBD_LL_Transmit>

  return USBD_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2100      	movs	r1, #0
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f003 fd62 	bl	80104cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
	...

0800ca14 <__NVIC_SetPriority>:
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	6039      	str	r1, [r7, #0]
 800ca1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	db0a      	blt.n	800ca3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	490c      	ldr	r1, [pc, #48]	; (800ca60 <__NVIC_SetPriority+0x4c>)
 800ca2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca32:	0112      	lsls	r2, r2, #4
 800ca34:	b2d2      	uxtb	r2, r2
 800ca36:	440b      	add	r3, r1
 800ca38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ca3c:	e00a      	b.n	800ca54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	4908      	ldr	r1, [pc, #32]	; (800ca64 <__NVIC_SetPriority+0x50>)
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	3b04      	subs	r3, #4
 800ca4c:	0112      	lsls	r2, r2, #4
 800ca4e:	b2d2      	uxtb	r2, r2
 800ca50:	440b      	add	r3, r1
 800ca52:	761a      	strb	r2, [r3, #24]
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	e000e100 	.word	0xe000e100
 800ca64:	e000ed00 	.word	0xe000ed00

0800ca68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ca6c:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <SysTick_Handler+0x1c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ca70:	f001 fe88 	bl	800e784 <xTaskGetSchedulerState>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d001      	beq.n	800ca7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ca7a:	f002 fe05 	bl	800f688 <xPortSysTickHandler>
  }
}
 800ca7e:	bf00      	nop
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	e000e010 	.word	0xe000e010

0800ca88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	f06f 0004 	mvn.w	r0, #4
 800ca92:	f7ff ffbf 	bl	800ca14 <__NVIC_SetPriority>
#endif
}
 800ca96:	bf00      	nop
 800ca98:	bd80      	pop	{r7, pc}
	...

0800ca9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caa2:	f3ef 8305 	mrs	r3, IPSR
 800caa6:	603b      	str	r3, [r7, #0]
  return(result);
 800caa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800caae:	f06f 0305 	mvn.w	r3, #5
 800cab2:	607b      	str	r3, [r7, #4]
 800cab4:	e00c      	b.n	800cad0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cab6:	4b0a      	ldr	r3, [pc, #40]	; (800cae0 <osKernelInitialize+0x44>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d105      	bne.n	800caca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cabe:	4b08      	ldr	r3, [pc, #32]	; (800cae0 <osKernelInitialize+0x44>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	607b      	str	r3, [r7, #4]
 800cac8:	e002      	b.n	800cad0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800caca:	f04f 33ff 	mov.w	r3, #4294967295
 800cace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cad0:	687b      	ldr	r3, [r7, #4]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	20013200 	.word	0x20013200

0800cae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caea:	f3ef 8305 	mrs	r3, IPSR
 800caee:	603b      	str	r3, [r7, #0]
  return(result);
 800caf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <osKernelStart+0x1a>
    stat = osErrorISR;
 800caf6:	f06f 0305 	mvn.w	r3, #5
 800cafa:	607b      	str	r3, [r7, #4]
 800cafc:	e010      	b.n	800cb20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cafe:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <osKernelStart+0x48>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d109      	bne.n	800cb1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb06:	f7ff ffbf 	bl	800ca88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb0a:	4b08      	ldr	r3, [pc, #32]	; (800cb2c <osKernelStart+0x48>)
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb10:	f001 f9ee 	bl	800def0 <vTaskStartScheduler>
      stat = osOK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	607b      	str	r3, [r7, #4]
 800cb18:	e002      	b.n	800cb20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb20:	687b      	ldr	r3, [r7, #4]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20013200 	.word	0x20013200

0800cb30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08e      	sub	sp, #56	; 0x38
 800cb34:	af04      	add	r7, sp, #16
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb40:	f3ef 8305 	mrs	r3, IPSR
 800cb44:	617b      	str	r3, [r7, #20]
  return(result);
 800cb46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d17e      	bne.n	800cc4a <osThreadNew+0x11a>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d07b      	beq.n	800cc4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb52:	2380      	movs	r3, #128	; 0x80
 800cb54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb56:	2318      	movs	r3, #24
 800cb58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d045      	beq.n	800cbf6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d002      	beq.n	800cb78 <osThreadNew+0x48>
        name = attr->name;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d008      	beq.n	800cb9e <osThreadNew+0x6e>
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	2b38      	cmp	r3, #56	; 0x38
 800cb90:	d805      	bhi.n	800cb9e <osThreadNew+0x6e>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <osThreadNew+0x72>
        return (NULL);
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e054      	b.n	800cc4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d003      	beq.n	800cbb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	089b      	lsrs	r3, r3, #2
 800cbb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00e      	beq.n	800cbd8 <osThreadNew+0xa8>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	2b5b      	cmp	r3, #91	; 0x5b
 800cbc0:	d90a      	bls.n	800cbd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d006      	beq.n	800cbd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <osThreadNew+0xa8>
        mem = 1;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	61bb      	str	r3, [r7, #24]
 800cbd6:	e010      	b.n	800cbfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10c      	bne.n	800cbfa <osThreadNew+0xca>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d108      	bne.n	800cbfa <osThreadNew+0xca>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <osThreadNew+0xca>
          mem = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61bb      	str	r3, [r7, #24]
 800cbf4:	e001      	b.n	800cbfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d110      	bne.n	800cc22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc08:	9202      	str	r2, [sp, #8]
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	6a3a      	ldr	r2, [r7, #32]
 800cc14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f000 ff94 	bl	800db44 <xTaskCreateStatic>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	613b      	str	r3, [r7, #16]
 800cc20:	e013      	b.n	800cc4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d110      	bne.n	800cc4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc28:	6a3b      	ldr	r3, [r7, #32]
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	f107 0310 	add.w	r3, r7, #16
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 ffdf 	bl	800dbfe <xTaskCreate>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d001      	beq.n	800cc4a <osThreadNew+0x11a>
            hTask = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc4a:	693b      	ldr	r3, [r7, #16]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3728      	adds	r7, #40	; 0x28
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <osThreadFlagsSet+0x1a>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	da03      	bge.n	800cc76 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800cc6e:	f06f 0303 	mvn.w	r3, #3
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	e035      	b.n	800cce2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cc76:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc7c:	f3ef 8305 	mrs	r3, IPSR
 800cc80:	613b      	str	r3, [r7, #16]
  return(result);
 800cc82:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01f      	beq.n	800ccc8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800cc8c:	f107 0308 	add.w	r3, r7, #8
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	2300      	movs	r3, #0
 800cc94:	2201      	movs	r2, #1
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6978      	ldr	r0, [r7, #20]
 800cc9a:	f001 feb7 	bl	800ea0c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800cc9e:	f107 030c 	add.w	r3, r7, #12
 800cca2:	2200      	movs	r2, #0
 800cca4:	9200      	str	r2, [sp, #0]
 800cca6:	2200      	movs	r2, #0
 800cca8:	2100      	movs	r1, #0
 800ccaa:	6978      	ldr	r0, [r7, #20]
 800ccac:	f001 feae 	bl	800ea0c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d015      	beq.n	800cce2 <osThreadFlagsSet+0x8e>
 800ccb6:	4b0d      	ldr	r3, [pc, #52]	; (800ccec <osThreadFlagsSet+0x98>)
 800ccb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	e00c      	b.n	800cce2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2201      	movs	r2, #1
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6978      	ldr	r0, [r7, #20]
 800ccd0:	f001 fde4 	bl	800e89c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ccd4:	f107 030c 	add.w	r3, r7, #12
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2100      	movs	r1, #0
 800ccdc:	6978      	ldr	r0, [r7, #20]
 800ccde:	f001 fddd 	bl	800e89c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cce2:	68fb      	ldr	r3, [r7, #12]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	e000ed04 	.word	0xe000ed04

0800ccf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccf8:	f3ef 8305 	mrs	r3, IPSR
 800ccfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d003      	beq.n	800cd0c <osDelay+0x1c>
    stat = osErrorISR;
 800cd04:	f06f 0305 	mvn.w	r3, #5
 800cd08:	60fb      	str	r3, [r7, #12]
 800cd0a:	e007      	b.n	800cd1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f001 f8b6 	bl	800de88 <vTaskDelay>
    }
  }

  return (stat);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b08a      	sub	sp, #40	; 0x28
 800cd2a:	af02      	add	r7, sp, #8
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd36:	f3ef 8305 	mrs	r3, IPSR
 800cd3a:	613b      	str	r3, [r7, #16]
  return(result);
 800cd3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d15f      	bne.n	800ce02 <osMessageQueueNew+0xdc>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d05c      	beq.n	800ce02 <osMessageQueueNew+0xdc>
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d059      	beq.n	800ce02 <osMessageQueueNew+0xdc>
    mem = -1;
 800cd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d029      	beq.n	800cdae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d012      	beq.n	800cd88 <osMessageQueueNew+0x62>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	2b4f      	cmp	r3, #79	; 0x4f
 800cd68:	d90e      	bls.n	800cd88 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00a      	beq.n	800cd88 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	695a      	ldr	r2, [r3, #20]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	68b9      	ldr	r1, [r7, #8]
 800cd7a:	fb01 f303 	mul.w	r3, r1, r3
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d302      	bcc.n	800cd88 <osMessageQueueNew+0x62>
        mem = 1;
 800cd82:	2301      	movs	r3, #1
 800cd84:	61bb      	str	r3, [r7, #24]
 800cd86:	e014      	b.n	800cdb2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d110      	bne.n	800cdb2 <osMessageQueueNew+0x8c>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10c      	bne.n	800cdb2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d108      	bne.n	800cdb2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d104      	bne.n	800cdb2 <osMessageQueueNew+0x8c>
          mem = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61bb      	str	r3, [r7, #24]
 800cdac:	e001      	b.n	800cdb2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d10b      	bne.n	800cdd0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	691a      	ldr	r2, [r3, #16]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	9100      	str	r1, [sp, #0]
 800cdc4:	68b9      	ldr	r1, [r7, #8]
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 f970 	bl	800d0ac <xQueueGenericCreateStatic>
 800cdcc:	61f8      	str	r0, [r7, #28]
 800cdce:	e008      	b.n	800cde2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	68b9      	ldr	r1, [r7, #8]
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f000 f9de 	bl	800d19c <xQueueGenericCreate>
 800cde0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00c      	beq.n	800ce02 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d003      	beq.n	800cdf6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	617b      	str	r3, [r7, #20]
 800cdf4:	e001      	b.n	800cdfa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cdfa:	6979      	ldr	r1, [r7, #20]
 800cdfc:	69f8      	ldr	r0, [r7, #28]
 800cdfe:	f000 fdb5 	bl	800d96c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce02:	69fb      	ldr	r3, [r7, #28]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3720      	adds	r7, #32
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4a07      	ldr	r2, [pc, #28]	; (800ce38 <vApplicationGetIdleTaskMemory+0x2c>)
 800ce1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	4a06      	ldr	r2, [pc, #24]	; (800ce3c <vApplicationGetIdleTaskMemory+0x30>)
 800ce22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2280      	movs	r2, #128	; 0x80
 800ce28:	601a      	str	r2, [r3, #0]
}
 800ce2a:	bf00      	nop
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	20013204 	.word	0x20013204
 800ce3c:	20013260 	.word	0x20013260

0800ce40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a07      	ldr	r2, [pc, #28]	; (800ce6c <vApplicationGetTimerTaskMemory+0x2c>)
 800ce50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	4a06      	ldr	r2, [pc, #24]	; (800ce70 <vApplicationGetTimerTaskMemory+0x30>)
 800ce56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce5e:	601a      	str	r2, [r3, #0]
}
 800ce60:	bf00      	nop
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	20013460 	.word	0x20013460
 800ce70:	200134bc 	.word	0x200134bc

0800ce74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f103 0208 	add.w	r2, r3, #8
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f04f 32ff 	mov.w	r2, #4294967295
 800ce8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f103 0208 	add.w	r2, r3, #8
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f103 0208 	add.w	r2, r3, #8
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cec2:	bf00      	nop
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cece:	b480      	push	{r7}
 800ced0:	b085      	sub	sp, #20
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	601a      	str	r2, [r3, #0]
}
 800cf0a:	bf00      	nop
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf16:	b480      	push	{r7}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2c:	d103      	bne.n	800cf36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e00c      	b.n	800cf50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	3308      	adds	r3, #8
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	e002      	b.n	800cf44 <vListInsert+0x2e>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d2f6      	bcs.n	800cf3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	601a      	str	r2, [r3, #0]
}
 800cf7c:	bf00      	nop
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	6892      	ldr	r2, [r2, #8]
 800cf9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	6852      	ldr	r2, [r2, #4]
 800cfa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d103      	bne.n	800cfbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	689a      	ldr	r2, [r3, #8]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	1e5a      	subs	r2, r3, #1
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d006:	f002 faad 	bl	800f564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	68f9      	ldr	r1, [r7, #12]
 800d014:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	441a      	add	r2, r3
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d036:	3b01      	subs	r3, #1
 800d038:	68f9      	ldr	r1, [r7, #12]
 800d03a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d03c:	fb01 f303 	mul.w	r3, r1, r3
 800d040:	441a      	add	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	22ff      	movs	r2, #255	; 0xff
 800d04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	22ff      	movs	r2, #255	; 0xff
 800d052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d114      	bne.n	800d086 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d01a      	beq.n	800d09a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	3310      	adds	r3, #16
 800d068:	4618      	mov	r0, r3
 800d06a:	f001 f9cb 	bl	800e404 <xTaskRemoveFromEventList>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d012      	beq.n	800d09a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <xQueueGenericReset+0xcc>)
 800d076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	e009      	b.n	800d09a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3310      	adds	r3, #16
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7ff fef2 	bl	800ce74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3324      	adds	r3, #36	; 0x24
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff feed 	bl	800ce74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d09a:	f002 fa93 	bl	800f5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d09e:	2301      	movs	r3, #1
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	e000ed04 	.word	0xe000ed04

0800d0ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08e      	sub	sp, #56	; 0x38
 800d0b0:	af02      	add	r7, sp, #8
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10a      	bne.n	800d0f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <xQueueGenericCreateStatic+0x52>
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <xQueueGenericCreateStatic+0x56>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e000      	b.n	800d104 <xQueueGenericCreateStatic+0x58>
 800d102:	2300      	movs	r3, #0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	623b      	str	r3, [r7, #32]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d102      	bne.n	800d12a <xQueueGenericCreateStatic+0x7e>
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <xQueueGenericCreateStatic+0x82>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <xQueueGenericCreateStatic+0x84>
 800d12e:	2300      	movs	r3, #0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10a      	bne.n	800d14a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	61fb      	str	r3, [r7, #28]
}
 800d146:	bf00      	nop
 800d148:	e7fe      	b.n	800d148 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d14a:	2350      	movs	r3, #80	; 0x50
 800d14c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b50      	cmp	r3, #80	; 0x50
 800d152:	d00a      	beq.n	800d16a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	61bb      	str	r3, [r7, #24]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d16a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00d      	beq.n	800d192 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	2201      	movs	r2, #1
 800d17a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d17e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	4613      	mov	r3, r2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 f83f 	bl	800d210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d194:	4618      	mov	r0, r3
 800d196:	3730      	adds	r7, #48	; 0x30
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08a      	sub	sp, #40	; 0x28
 800d1a0:	af02      	add	r7, sp, #8
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	613b      	str	r3, [r7, #16]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	fb02 f303 	mul.w	r3, r2, r3
 800d1ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	3350      	adds	r3, #80	; 0x50
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f002 fae7 	bl	800f7a8 <pvPortMalloc>
 800d1da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d011      	beq.n	800d206 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	3350      	adds	r3, #80	; 0x50
 800d1ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1f4:	79fa      	ldrb	r2, [r7, #7]
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 f805 	bl	800d210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d206:	69bb      	ldr	r3, [r7, #24]
	}
 800d208:	4618      	mov	r0, r3
 800d20a:	3720      	adds	r7, #32
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
 800d21c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d103      	bne.n	800d22c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	69ba      	ldr	r2, [r7, #24]
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	e002      	b.n	800d232 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d23e:	2101      	movs	r1, #1
 800d240:	69b8      	ldr	r0, [r7, #24]
 800d242:	f7ff fecb 	bl	800cfdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	78fa      	ldrb	r2, [r7, #3]
 800d24a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d24e:	bf00      	nop
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
	...

0800d258 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08e      	sub	sp, #56	; 0x38
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d266:	2300      	movs	r3, #0
 800d268:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <xQueueGenericSend+0x32>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d103      	bne.n	800d298 <xQueueGenericSend+0x40>
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <xQueueGenericSend+0x44>
 800d298:	2301      	movs	r3, #1
 800d29a:	e000      	b.n	800d29e <xQueueGenericSend+0x46>
 800d29c:	2300      	movs	r3, #0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <xQueueGenericSend+0x60>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d103      	bne.n	800d2c6 <xQueueGenericSend+0x6e>
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d101      	bne.n	800d2ca <xQueueGenericSend+0x72>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e000      	b.n	800d2cc <xQueueGenericSend+0x74>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10a      	bne.n	800d2e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	623b      	str	r3, [r7, #32]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2e6:	f001 fa4d 	bl	800e784 <xTaskGetSchedulerState>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <xQueueGenericSend+0x9e>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d101      	bne.n	800d2fa <xQueueGenericSend+0xa2>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e000      	b.n	800d2fc <xQueueGenericSend+0xa4>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10a      	bne.n	800d316 <xQueueGenericSend+0xbe>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	61fb      	str	r3, [r7, #28]
}
 800d312:	bf00      	nop
 800d314:	e7fe      	b.n	800d314 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d316:	f002 f925 	bl	800f564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d322:	429a      	cmp	r2, r3
 800d324:	d302      	bcc.n	800d32c <xQueueGenericSend+0xd4>
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d129      	bne.n	800d380 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	68b9      	ldr	r1, [r7, #8]
 800d330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d332:	f000 fa0b 	bl	800d74c <prvCopyDataToQueue>
 800d336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d010      	beq.n	800d362 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	3324      	adds	r3, #36	; 0x24
 800d344:	4618      	mov	r0, r3
 800d346:	f001 f85d 	bl	800e404 <xTaskRemoveFromEventList>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d013      	beq.n	800d378 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d350:	4b3f      	ldr	r3, [pc, #252]	; (800d450 <xQueueGenericSend+0x1f8>)
 800d352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d356:	601a      	str	r2, [r3, #0]
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	e00a      	b.n	800d378 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d007      	beq.n	800d378 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d368:	4b39      	ldr	r3, [pc, #228]	; (800d450 <xQueueGenericSend+0x1f8>)
 800d36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d378:	f002 f924 	bl	800f5c4 <vPortExitCritical>
				return pdPASS;
 800d37c:	2301      	movs	r3, #1
 800d37e:	e063      	b.n	800d448 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d103      	bne.n	800d38e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d386:	f002 f91d 	bl	800f5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e05c      	b.n	800d448 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d390:	2b00      	cmp	r3, #0
 800d392:	d106      	bne.n	800d3a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d394:	f107 0314 	add.w	r3, r7, #20
 800d398:	4618      	mov	r0, r3
 800d39a:	f001 f897 	bl	800e4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a2:	f002 f90f 	bl	800f5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3a6:	f000 fe09 	bl	800dfbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3aa:	f002 f8db 	bl	800f564 <vPortEnterCritical>
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b4:	b25b      	sxtb	r3, r3
 800d3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ba:	d103      	bne.n	800d3c4 <xQueueGenericSend+0x16c>
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ca:	b25b      	sxtb	r3, r3
 800d3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d0:	d103      	bne.n	800d3da <xQueueGenericSend+0x182>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3da:	f002 f8f3 	bl	800f5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3de:	1d3a      	adds	r2, r7, #4
 800d3e0:	f107 0314 	add.w	r3, r7, #20
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f001 f886 	bl	800e4f8 <xTaskCheckForTimeOut>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d124      	bne.n	800d43c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3f4:	f000 faa2 	bl	800d93c <prvIsQueueFull>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d018      	beq.n	800d430 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	3310      	adds	r3, #16
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f000 ffac 	bl	800e364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d40e:	f000 fa2d 	bl	800d86c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d412:	f000 fde1 	bl	800dfd8 <xTaskResumeAll>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f47f af7c 	bne.w	800d316 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d41e:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <xQueueGenericSend+0x1f8>)
 800d420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	e772      	b.n	800d316 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d432:	f000 fa1b 	bl	800d86c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d436:	f000 fdcf 	bl	800dfd8 <xTaskResumeAll>
 800d43a:	e76c      	b.n	800d316 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d43e:	f000 fa15 	bl	800d86c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d442:	f000 fdc9 	bl	800dfd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3738      	adds	r7, #56	; 0x38
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	e000ed04 	.word	0xe000ed04

0800d454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b090      	sub	sp, #64	; 0x40
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10a      	bne.n	800d482 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d47e:	bf00      	nop
 800d480:	e7fe      	b.n	800d480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d103      	bne.n	800d490 <xQueueGenericSendFromISR+0x3c>
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <xQueueGenericSendFromISR+0x40>
 800d490:	2301      	movs	r3, #1
 800d492:	e000      	b.n	800d496 <xQueueGenericSendFromISR+0x42>
 800d494:	2300      	movs	r3, #0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10a      	bne.n	800d4b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	d103      	bne.n	800d4be <xQueueGenericSendFromISR+0x6a>
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d101      	bne.n	800d4c2 <xQueueGenericSendFromISR+0x6e>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <xQueueGenericSendFromISR+0x70>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10a      	bne.n	800d4de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	623b      	str	r3, [r7, #32]
}
 800d4da:	bf00      	nop
 800d4dc:	e7fe      	b.n	800d4dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4de:	f002 f923 	bl	800f728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	61fa      	str	r2, [r7, #28]
 800d4f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d4fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d506:	429a      	cmp	r2, r3
 800d508:	d302      	bcc.n	800d510 <xQueueGenericSendFromISR+0xbc>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d12f      	bne.n	800d570 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	68b9      	ldr	r1, [r7, #8]
 800d524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d526:	f000 f911 	bl	800d74c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d52a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	d112      	bne.n	800d55a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d016      	beq.n	800d56a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	3324      	adds	r3, #36	; 0x24
 800d540:	4618      	mov	r0, r3
 800d542:	f000 ff5f 	bl	800e404 <xTaskRemoveFromEventList>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00e      	beq.n	800d56a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	e007      	b.n	800d56a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d55a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d55e:	3301      	adds	r3, #1
 800d560:	b2db      	uxtb	r3, r3
 800d562:	b25a      	sxtb	r2, r3
 800d564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d56a:	2301      	movs	r3, #1
 800d56c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d56e:	e001      	b.n	800d574 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d570:	2300      	movs	r3, #0
 800d572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d576:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d57e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d582:	4618      	mov	r0, r3
 800d584:	3740      	adds	r7, #64	; 0x40
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b08c      	sub	sp, #48	; 0x30
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d598:	2300      	movs	r3, #0
 800d59a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10a      	bne.n	800d5bc <xQueueReceive+0x30>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	623b      	str	r3, [r7, #32]
}
 800d5b8:	bf00      	nop
 800d5ba:	e7fe      	b.n	800d5ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d103      	bne.n	800d5ca <xQueueReceive+0x3e>
 800d5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d101      	bne.n	800d5ce <xQueueReceive+0x42>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e000      	b.n	800d5d0 <xQueueReceive+0x44>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10a      	bne.n	800d5ea <xQueueReceive+0x5e>
	__asm volatile
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	61fb      	str	r3, [r7, #28]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5ea:	f001 f8cb 	bl	800e784 <xTaskGetSchedulerState>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d102      	bne.n	800d5fa <xQueueReceive+0x6e>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d101      	bne.n	800d5fe <xQueueReceive+0x72>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e000      	b.n	800d600 <xQueueReceive+0x74>
 800d5fe:	2300      	movs	r3, #0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <xQueueReceive+0x8e>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	61bb      	str	r3, [r7, #24]
}
 800d616:	bf00      	nop
 800d618:	e7fe      	b.n	800d618 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d61a:	f001 ffa3 	bl	800f564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	2b00      	cmp	r3, #0
 800d628:	d01f      	beq.n	800d66a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d62e:	f000 f8f7 	bl	800d820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d634:	1e5a      	subs	r2, r3, #1
 800d636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d638:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00f      	beq.n	800d662 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d644:	3310      	adds	r3, #16
 800d646:	4618      	mov	r0, r3
 800d648:	f000 fedc 	bl	800e404 <xTaskRemoveFromEventList>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d007      	beq.n	800d662 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d652:	4b3d      	ldr	r3, [pc, #244]	; (800d748 <xQueueReceive+0x1bc>)
 800d654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d662:	f001 ffaf 	bl	800f5c4 <vPortExitCritical>
				return pdPASS;
 800d666:	2301      	movs	r3, #1
 800d668:	e069      	b.n	800d73e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d103      	bne.n	800d678 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d670:	f001 ffa8 	bl	800f5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d674:	2300      	movs	r3, #0
 800d676:	e062      	b.n	800d73e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d106      	bne.n	800d68c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d67e:	f107 0310 	add.w	r3, r7, #16
 800d682:	4618      	mov	r0, r3
 800d684:	f000 ff22 	bl	800e4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d688:	2301      	movs	r3, #1
 800d68a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d68c:	f001 ff9a 	bl	800f5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d690:	f000 fc94 	bl	800dfbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d694:	f001 ff66 	bl	800f564 <vPortEnterCritical>
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d69e:	b25b      	sxtb	r3, r3
 800d6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a4:	d103      	bne.n	800d6ae <xQueueReceive+0x122>
 800d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6b4:	b25b      	sxtb	r3, r3
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ba:	d103      	bne.n	800d6c4 <xQueueReceive+0x138>
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6c4:	f001 ff7e 	bl	800f5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6c8:	1d3a      	adds	r2, r7, #4
 800d6ca:	f107 0310 	add.w	r3, r7, #16
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f000 ff11 	bl	800e4f8 <xTaskCheckForTimeOut>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d123      	bne.n	800d724 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6de:	f000 f917 	bl	800d910 <prvIsQueueEmpty>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d017      	beq.n	800d718 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ea:	3324      	adds	r3, #36	; 0x24
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 fe37 	bl	800e364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6f8:	f000 f8b8 	bl	800d86c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6fc:	f000 fc6c 	bl	800dfd8 <xTaskResumeAll>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d189      	bne.n	800d61a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d706:	4b10      	ldr	r3, [pc, #64]	; (800d748 <xQueueReceive+0x1bc>)
 800d708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	e780      	b.n	800d61a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71a:	f000 f8a7 	bl	800d86c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d71e:	f000 fc5b 	bl	800dfd8 <xTaskResumeAll>
 800d722:	e77a      	b.n	800d61a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d726:	f000 f8a1 	bl	800d86c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d72a:	f000 fc55 	bl	800dfd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d730:	f000 f8ee 	bl	800d910 <prvIsQueueEmpty>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	f43f af6f 	beq.w	800d61a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d73c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3730      	adds	r7, #48	; 0x30
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	e000ed04 	.word	0xe000ed04

0800d74c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10d      	bne.n	800d786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d14d      	bne.n	800d80e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f822 	bl	800e7c0 <xTaskPriorityDisinherit>
 800d77c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	609a      	str	r2, [r3, #8]
 800d784:	e043      	b.n	800d80e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d119      	bne.n	800d7c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6858      	ldr	r0, [r3, #4]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d794:	461a      	mov	r2, r3
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	f002 ff3a 	bl	8010610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a4:	441a      	add	r2, r3
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	685a      	ldr	r2, [r3, #4]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d32b      	bcc.n	800d80e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	605a      	str	r2, [r3, #4]
 800d7be:	e026      	b.n	800d80e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	68d8      	ldr	r0, [r3, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	f002 ff20 	bl	8010610 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68da      	ldr	r2, [r3, #12]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d8:	425b      	negs	r3, r3
 800d7da:	441a      	add	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	68da      	ldr	r2, [r3, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d207      	bcs.n	800d7fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f4:	425b      	negs	r3, r3
 800d7f6:	441a      	add	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d105      	bne.n	800d80e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d816:	697b      	ldr	r3, [r7, #20]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3718      	adds	r7, #24
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d018      	beq.n	800d864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	68da      	ldr	r2, [r3, #12]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83a:	441a      	add	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d303      	bcc.n	800d854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68d9      	ldr	r1, [r3, #12]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85c:	461a      	mov	r2, r3
 800d85e:	6838      	ldr	r0, [r7, #0]
 800d860:	f002 fed6 	bl	8010610 <memcpy>
	}
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d874:	f001 fe76 	bl	800f564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d87e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d880:	e011      	b.n	800d8a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	d012      	beq.n	800d8b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3324      	adds	r3, #36	; 0x24
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fdb8 	bl	800e404 <xTaskRemoveFromEventList>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d89a:	f000 fe8f 	bl	800e5bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	dce9      	bgt.n	800d882 <prvUnlockQueue+0x16>
 800d8ae:	e000      	b.n	800d8b2 <prvUnlockQueue+0x46>
					break;
 800d8b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	22ff      	movs	r2, #255	; 0xff
 800d8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d8ba:	f001 fe83 	bl	800f5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8be:	f001 fe51 	bl	800f564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8ca:	e011      	b.n	800d8f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d012      	beq.n	800d8fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3310      	adds	r3, #16
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 fd93 	bl	800e404 <xTaskRemoveFromEventList>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8e4:	f000 fe6a 	bl	800e5bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8e8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	dce9      	bgt.n	800d8cc <prvUnlockQueue+0x60>
 800d8f8:	e000      	b.n	800d8fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	22ff      	movs	r2, #255	; 0xff
 800d900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d904:	f001 fe5e 	bl	800f5c4 <vPortExitCritical>
}
 800d908:	bf00      	nop
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d918:	f001 fe24 	bl	800f564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d924:	2301      	movs	r3, #1
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e001      	b.n	800d92e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d92e:	f001 fe49 	bl	800f5c4 <vPortExitCritical>

	return xReturn;
 800d932:	68fb      	ldr	r3, [r7, #12]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d944:	f001 fe0e 	bl	800f564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d950:	429a      	cmp	r2, r3
 800d952:	d102      	bne.n	800d95a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d954:	2301      	movs	r3, #1
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	e001      	b.n	800d95e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d95a:	2300      	movs	r3, #0
 800d95c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d95e:	f001 fe31 	bl	800f5c4 <vPortExitCritical>

	return xReturn;
 800d962:	68fb      	ldr	r3, [r7, #12]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d976:	2300      	movs	r3, #0
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	e014      	b.n	800d9a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d97c:	4a0f      	ldr	r2, [pc, #60]	; (800d9bc <vQueueAddToRegistry+0x50>)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10b      	bne.n	800d9a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d988:	490c      	ldr	r1, [pc, #48]	; (800d9bc <vQueueAddToRegistry+0x50>)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d992:	4a0a      	ldr	r2, [pc, #40]	; (800d9bc <vQueueAddToRegistry+0x50>)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	4413      	add	r3, r2
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d99e:	e006      	b.n	800d9ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	60fb      	str	r3, [r7, #12]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b07      	cmp	r3, #7
 800d9aa:	d9e7      	bls.n	800d97c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9ac:	bf00      	nop
 800d9ae:	bf00      	nop
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	2001803c 	.word	0x2001803c

0800d9c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9d0:	f001 fdc8 	bl	800f564 <vPortEnterCritical>
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9da:	b25b      	sxtb	r3, r3
 800d9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e0:	d103      	bne.n	800d9ea <vQueueWaitForMessageRestricted+0x2a>
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f0:	b25b      	sxtb	r3, r3
 800d9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f6:	d103      	bne.n	800da00 <vQueueWaitForMessageRestricted+0x40>
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da00:	f001 fde0 	bl	800f5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	3324      	adds	r3, #36	; 0x24
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	68b9      	ldr	r1, [r7, #8]
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fcc9 	bl	800e3ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da1a:	6978      	ldr	r0, [r7, #20]
 800da1c:	f7ff ff26 	bl	800d86c <prvUnlockQueue>
	}
 800da20:	bf00      	nop
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08c      	sub	sp, #48	; 0x30
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d110      	bne.n	800da5c <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800da3a:	2301      	movs	r3, #1
 800da3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2b04      	cmp	r3, #4
 800da44:	d81b      	bhi.n	800da7e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	61fb      	str	r3, [r7, #28]
}
 800da58:	bf00      	nop
 800da5a:	e7fe      	b.n	800da5a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10a      	bne.n	800da7e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	61bb      	str	r3, [r7, #24]
}
 800da7a:	bf00      	nop
 800da7c:	e7fe      	b.n	800da7c <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	429a      	cmp	r2, r3
 800da84:	d90a      	bls.n	800da9c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	617b      	str	r3, [r7, #20]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800daa2:	2301      	movs	r3, #1
 800daa4:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3301      	adds	r3, #1
 800daaa:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3324      	adds	r3, #36	; 0x24
 800dab0:	4618      	mov	r0, r3
 800dab2:	f001 fe79 	bl	800f7a8 <pvPortMalloc>
 800dab6:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00a      	beq.n	800dad4 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	6a38      	ldr	r0, [r7, #32]
 800dad0:	f000 f805 	bl	800dade <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800dad4:	6a3b      	ldr	r3, [r7, #32]
	}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3728      	adds	r7, #40	; 0x28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b086      	sub	sp, #24
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	607a      	str	r2, [r7, #4]
 800daea:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800daec:	2355      	movs	r3, #85	; 0x55
 800daee:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	6979      	ldr	r1, [r7, #20]
 800daf4:	68b8      	ldr	r0, [r7, #8]
 800daf6:	f002 fd99 	bl	801062c <memset>
 800dafa:	4602      	mov	r2, r0
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	4293      	cmp	r3, r2
 800db00:	d00a      	beq.n	800db18 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	613b      	str	r3, [r7, #16]
}
 800db14:	bf00      	nop
 800db16:	e7fe      	b.n	800db16 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800db18:	2224      	movs	r2, #36	; 0x24
 800db1a:	2100      	movs	r1, #0
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f002 fd85 	bl	801062c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f897 2020 	ldrb.w	r2, [r7, #32]
 800db3a:	771a      	strb	r2, [r3, #28]
}
 800db3c:	bf00      	nop
 800db3e:	3718      	adds	r7, #24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08e      	sub	sp, #56	; 0x38
 800db48:	af04      	add	r7, sp, #16
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
 800db50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10a      	bne.n	800db6e <xTaskCreateStatic+0x2a>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	623b      	str	r3, [r7, #32]
}
 800db6a:	bf00      	nop
 800db6c:	e7fe      	b.n	800db6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10a      	bne.n	800db8a <xTaskCreateStatic+0x46>
	__asm volatile
 800db74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	61fb      	str	r3, [r7, #28]
}
 800db86:	bf00      	nop
 800db88:	e7fe      	b.n	800db88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db8a:	235c      	movs	r3, #92	; 0x5c
 800db8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	2b5c      	cmp	r3, #92	; 0x5c
 800db92:	d00a      	beq.n	800dbaa <xTaskCreateStatic+0x66>
	__asm volatile
 800db94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	61bb      	str	r3, [r7, #24]
}
 800dba6:	bf00      	nop
 800dba8:	e7fe      	b.n	800dba8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dbaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d01e      	beq.n	800dbf0 <xTaskCreateStatic+0xac>
 800dbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d01b      	beq.n	800dbf0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9303      	str	r3, [sp, #12]
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	9302      	str	r3, [sp, #8]
 800dbd2:	f107 0314 	add.w	r3, r7, #20
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	68b9      	ldr	r1, [r7, #8]
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f000 f850 	bl	800dc88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbea:	f000 f8dd 	bl	800dda8 <prvAddNewTaskToReadyList>
 800dbee:	e001      	b.n	800dbf4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dbf4:	697b      	ldr	r3, [r7, #20]
	}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3728      	adds	r7, #40	; 0x28
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b08c      	sub	sp, #48	; 0x30
 800dc02:	af04      	add	r7, sp, #16
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	60b9      	str	r1, [r7, #8]
 800dc08:	603b      	str	r3, [r7, #0]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc0e:	88fb      	ldrh	r3, [r7, #6]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4618      	mov	r0, r3
 800dc14:	f001 fdc8 	bl	800f7a8 <pvPortMalloc>
 800dc18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00e      	beq.n	800dc3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc20:	205c      	movs	r0, #92	; 0x5c
 800dc22:	f001 fdc1 	bl	800f7a8 <pvPortMalloc>
 800dc26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d003      	beq.n	800dc36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	631a      	str	r2, [r3, #48]	; 0x30
 800dc34:	e005      	b.n	800dc42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc36:	6978      	ldr	r0, [r7, #20]
 800dc38:	f001 fe82 	bl	800f940 <vPortFree>
 800dc3c:	e001      	b.n	800dc42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d017      	beq.n	800dc78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc50:	88fa      	ldrh	r2, [r7, #6]
 800dc52:	2300      	movs	r3, #0
 800dc54:	9303      	str	r3, [sp, #12]
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	9302      	str	r3, [sp, #8]
 800dc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	68b9      	ldr	r1, [r7, #8]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f000 f80e 	bl	800dc88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc6c:	69f8      	ldr	r0, [r7, #28]
 800dc6e:	f000 f89b 	bl	800dda8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc72:	2301      	movs	r3, #1
 800dc74:	61bb      	str	r3, [r7, #24]
 800dc76:	e002      	b.n	800dc7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc78:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc7e:	69bb      	ldr	r3, [r7, #24]
	}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3720      	adds	r7, #32
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	461a      	mov	r2, r3
 800dca0:	21a5      	movs	r1, #165	; 0xa5
 800dca2:	f002 fcc3 	bl	801062c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	f023 0307 	bic.w	r3, r3, #7
 800dcbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	617b      	str	r3, [r7, #20]
}
 800dcdc:	bf00      	nop
 800dcde:	e7fe      	b.n	800dcde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d01f      	beq.n	800dd26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dce6:	2300      	movs	r3, #0
 800dce8:	61fb      	str	r3, [r7, #28]
 800dcea:	e012      	b.n	800dd12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	7819      	ldrb	r1, [r3, #0]
 800dcf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	3334      	adds	r3, #52	; 0x34
 800dcfc:	460a      	mov	r2, r1
 800dcfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	4413      	add	r3, r2
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d006      	beq.n	800dd1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	61fb      	str	r3, [r7, #28]
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	2b0f      	cmp	r3, #15
 800dd16:	d9e9      	bls.n	800dcec <prvInitialiseNewTask+0x64>
 800dd18:	e000      	b.n	800dd1c <prvInitialiseNewTask+0x94>
			{
				break;
 800dd1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd24:	e003      	b.n	800dd2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	2b37      	cmp	r3, #55	; 0x37
 800dd32:	d901      	bls.n	800dd38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd34:	2337      	movs	r3, #55	; 0x37
 800dd36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd46:	2200      	movs	r2, #0
 800dd48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff f8b0 	bl	800ceb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	3318      	adds	r3, #24
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff f8ab 	bl	800ceb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	2200      	movs	r2, #0
 800dd78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	68f9      	ldr	r1, [r7, #12]
 800dd86:	69b8      	ldr	r0, [r7, #24]
 800dd88:	f001 fabe 	bl	800f308 <pxPortInitialiseStack>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd9e:	bf00      	nop
 800dda0:	3720      	adds	r7, #32
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
	...

0800dda8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ddb0:	f001 fbd8 	bl	800f564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ddb4:	4b2d      	ldr	r3, [pc, #180]	; (800de6c <prvAddNewTaskToReadyList+0xc4>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	4a2c      	ldr	r2, [pc, #176]	; (800de6c <prvAddNewTaskToReadyList+0xc4>)
 800ddbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ddbe:	4b2c      	ldr	r3, [pc, #176]	; (800de70 <prvAddNewTaskToReadyList+0xc8>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d109      	bne.n	800ddda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ddc6:	4a2a      	ldr	r2, [pc, #168]	; (800de70 <prvAddNewTaskToReadyList+0xc8>)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ddcc:	4b27      	ldr	r3, [pc, #156]	; (800de6c <prvAddNewTaskToReadyList+0xc4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d110      	bne.n	800ddf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ddd4:	f000 fc18 	bl	800e608 <prvInitialiseTaskLists>
 800ddd8:	e00d      	b.n	800ddf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ddda:	4b26      	ldr	r3, [pc, #152]	; (800de74 <prvAddNewTaskToReadyList+0xcc>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d109      	bne.n	800ddf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dde2:	4b23      	ldr	r3, [pc, #140]	; (800de70 <prvAddNewTaskToReadyList+0xc8>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d802      	bhi.n	800ddf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddf0:	4a1f      	ldr	r2, [pc, #124]	; (800de70 <prvAddNewTaskToReadyList+0xc8>)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddf6:	4b20      	ldr	r3, [pc, #128]	; (800de78 <prvAddNewTaskToReadyList+0xd0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	4a1e      	ldr	r2, [pc, #120]	; (800de78 <prvAddNewTaskToReadyList+0xd0>)
 800ddfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800de00:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <prvAddNewTaskToReadyList+0xd0>)
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de0c:	4b1b      	ldr	r3, [pc, #108]	; (800de7c <prvAddNewTaskToReadyList+0xd4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d903      	bls.n	800de1c <prvAddNewTaskToReadyList+0x74>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de18:	4a18      	ldr	r2, [pc, #96]	; (800de7c <prvAddNewTaskToReadyList+0xd4>)
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de20:	4613      	mov	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4413      	add	r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	4a15      	ldr	r2, [pc, #84]	; (800de80 <prvAddNewTaskToReadyList+0xd8>)
 800de2a:	441a      	add	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	3304      	adds	r3, #4
 800de30:	4619      	mov	r1, r3
 800de32:	4610      	mov	r0, r2
 800de34:	f7ff f84b 	bl	800cece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de38:	f001 fbc4 	bl	800f5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de3c:	4b0d      	ldr	r3, [pc, #52]	; (800de74 <prvAddNewTaskToReadyList+0xcc>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00e      	beq.n	800de62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de44:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <prvAddNewTaskToReadyList+0xc8>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4e:	429a      	cmp	r2, r3
 800de50:	d207      	bcs.n	800de62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de52:	4b0c      	ldr	r3, [pc, #48]	; (800de84 <prvAddNewTaskToReadyList+0xdc>)
 800de54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de62:	bf00      	nop
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	20013d90 	.word	0x20013d90
 800de70:	200138bc 	.word	0x200138bc
 800de74:	20013d9c 	.word	0x20013d9c
 800de78:	20013dac 	.word	0x20013dac
 800de7c:	20013d98 	.word	0x20013d98
 800de80:	200138c0 	.word	0x200138c0
 800de84:	e000ed04 	.word	0xe000ed04

0800de88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de90:	2300      	movs	r3, #0
 800de92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d017      	beq.n	800deca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de9a:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <vTaskDelay+0x60>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00a      	beq.n	800deb8 <vTaskDelay+0x30>
	__asm volatile
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	60bb      	str	r3, [r7, #8]
}
 800deb4:	bf00      	nop
 800deb6:	e7fe      	b.n	800deb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800deb8:	f000 f880 	bl	800dfbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800debc:	2100      	movs	r1, #0
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fe80 	bl	800ebc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dec4:	f000 f888 	bl	800dfd8 <xTaskResumeAll>
 800dec8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d107      	bne.n	800dee0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ded0:	4b06      	ldr	r3, [pc, #24]	; (800deec <vTaskDelay+0x64>)
 800ded2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded6:	601a      	str	r2, [r3, #0]
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dee0:	bf00      	nop
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20013db8 	.word	0x20013db8
 800deec:	e000ed04 	.word	0xe000ed04

0800def0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08a      	sub	sp, #40	; 0x28
 800def4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800defe:	463a      	mov	r2, r7
 800df00:	1d39      	adds	r1, r7, #4
 800df02:	f107 0308 	add.w	r3, r7, #8
 800df06:	4618      	mov	r0, r3
 800df08:	f7fe ff80 	bl	800ce0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df0c:	6839      	ldr	r1, [r7, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	9202      	str	r2, [sp, #8]
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	2300      	movs	r3, #0
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	2300      	movs	r3, #0
 800df1c:	460a      	mov	r2, r1
 800df1e:	4921      	ldr	r1, [pc, #132]	; (800dfa4 <vTaskStartScheduler+0xb4>)
 800df20:	4821      	ldr	r0, [pc, #132]	; (800dfa8 <vTaskStartScheduler+0xb8>)
 800df22:	f7ff fe0f 	bl	800db44 <xTaskCreateStatic>
 800df26:	4603      	mov	r3, r0
 800df28:	4a20      	ldr	r2, [pc, #128]	; (800dfac <vTaskStartScheduler+0xbc>)
 800df2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df2c:	4b1f      	ldr	r3, [pc, #124]	; (800dfac <vTaskStartScheduler+0xbc>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df34:	2301      	movs	r3, #1
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e001      	b.n	800df3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d102      	bne.n	800df4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df44:	f000 fe92 	bl	800ec6c <xTimerCreateTimerTask>
 800df48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d116      	bne.n	800df7e <vTaskStartScheduler+0x8e>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	613b      	str	r3, [r7, #16]
}
 800df62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df64:	4b12      	ldr	r3, [pc, #72]	; (800dfb0 <vTaskStartScheduler+0xc0>)
 800df66:	f04f 32ff 	mov.w	r2, #4294967295
 800df6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df6c:	4b11      	ldr	r3, [pc, #68]	; (800dfb4 <vTaskStartScheduler+0xc4>)
 800df6e:	2201      	movs	r2, #1
 800df70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df72:	4b11      	ldr	r3, [pc, #68]	; (800dfb8 <vTaskStartScheduler+0xc8>)
 800df74:	2200      	movs	r2, #0
 800df76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df78:	f001 fa52 	bl	800f420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df7c:	e00e      	b.n	800df9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df84:	d10a      	bne.n	800df9c <vTaskStartScheduler+0xac>
	__asm volatile
 800df86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8a:	f383 8811 	msr	BASEPRI, r3
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	60fb      	str	r3, [r7, #12]
}
 800df98:	bf00      	nop
 800df9a:	e7fe      	b.n	800df9a <vTaskStartScheduler+0xaa>
}
 800df9c:	bf00      	nop
 800df9e:	3718      	adds	r7, #24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	0801109c 	.word	0x0801109c
 800dfa8:	0800e5d5 	.word	0x0800e5d5
 800dfac:	20013db4 	.word	0x20013db4
 800dfb0:	20013db0 	.word	0x20013db0
 800dfb4:	20013d9c 	.word	0x20013d9c
 800dfb8:	20013d94 	.word	0x20013d94

0800dfbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dfc0:	4b04      	ldr	r3, [pc, #16]	; (800dfd4 <vTaskSuspendAll+0x18>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	4a03      	ldr	r2, [pc, #12]	; (800dfd4 <vTaskSuspendAll+0x18>)
 800dfc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dfca:	bf00      	nop
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	20013db8 	.word	0x20013db8

0800dfd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfe6:	4b42      	ldr	r3, [pc, #264]	; (800e0f0 <xTaskResumeAll+0x118>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <xTaskResumeAll+0x2c>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	603b      	str	r3, [r7, #0]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e004:	f001 faae 	bl	800f564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e008:	4b39      	ldr	r3, [pc, #228]	; (800e0f0 <xTaskResumeAll+0x118>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	4a38      	ldr	r2, [pc, #224]	; (800e0f0 <xTaskResumeAll+0x118>)
 800e010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e012:	4b37      	ldr	r3, [pc, #220]	; (800e0f0 <xTaskResumeAll+0x118>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d162      	bne.n	800e0e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e01a:	4b36      	ldr	r3, [pc, #216]	; (800e0f4 <xTaskResumeAll+0x11c>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d05e      	beq.n	800e0e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e022:	e02f      	b.n	800e084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e024:	4b34      	ldr	r3, [pc, #208]	; (800e0f8 <xTaskResumeAll+0x120>)
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	3318      	adds	r3, #24
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe ffa9 	bl	800cf88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	3304      	adds	r3, #4
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe ffa4 	bl	800cf88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e044:	4b2d      	ldr	r3, [pc, #180]	; (800e0fc <xTaskResumeAll+0x124>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d903      	bls.n	800e054 <xTaskResumeAll+0x7c>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e050:	4a2a      	ldr	r2, [pc, #168]	; (800e0fc <xTaskResumeAll+0x124>)
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4a27      	ldr	r2, [pc, #156]	; (800e100 <xTaskResumeAll+0x128>)
 800e062:	441a      	add	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3304      	adds	r3, #4
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f7fe ff2f 	bl	800cece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e074:	4b23      	ldr	r3, [pc, #140]	; (800e104 <xTaskResumeAll+0x12c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d302      	bcc.n	800e084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e07e:	4b22      	ldr	r3, [pc, #136]	; (800e108 <xTaskResumeAll+0x130>)
 800e080:	2201      	movs	r2, #1
 800e082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e084:	4b1c      	ldr	r3, [pc, #112]	; (800e0f8 <xTaskResumeAll+0x120>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1cb      	bne.n	800e024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e092:	f000 fb57 	bl	800e744 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e096:	4b1d      	ldr	r3, [pc, #116]	; (800e10c <xTaskResumeAll+0x134>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d010      	beq.n	800e0c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0a2:	f000 f847 	bl	800e134 <xTaskIncrementTick>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e0ac:	4b16      	ldr	r3, [pc, #88]	; (800e108 <xTaskResumeAll+0x130>)
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1f1      	bne.n	800e0a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e0be:	4b13      	ldr	r3, [pc, #76]	; (800e10c <xTaskResumeAll+0x134>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0c4:	4b10      	ldr	r3, [pc, #64]	; (800e108 <xTaskResumeAll+0x130>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d009      	beq.n	800e0e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0d0:	4b0f      	ldr	r3, [pc, #60]	; (800e110 <xTaskResumeAll+0x138>)
 800e0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d6:	601a      	str	r2, [r3, #0]
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0e0:	f001 fa70 	bl	800f5c4 <vPortExitCritical>

	return xAlreadyYielded;
 800e0e4:	68bb      	ldr	r3, [r7, #8]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	20013db8 	.word	0x20013db8
 800e0f4:	20013d90 	.word	0x20013d90
 800e0f8:	20013d50 	.word	0x20013d50
 800e0fc:	20013d98 	.word	0x20013d98
 800e100:	200138c0 	.word	0x200138c0
 800e104:	200138bc 	.word	0x200138bc
 800e108:	20013da4 	.word	0x20013da4
 800e10c:	20013da0 	.word	0x20013da0
 800e110:	e000ed04 	.word	0xe000ed04

0800e114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e11a:	4b05      	ldr	r3, [pc, #20]	; (800e130 <xTaskGetTickCount+0x1c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e120:	687b      	ldr	r3, [r7, #4]
}
 800e122:	4618      	mov	r0, r3
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	20013d94 	.word	0x20013d94

0800e134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e13a:	2300      	movs	r3, #0
 800e13c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e13e:	4b4f      	ldr	r3, [pc, #316]	; (800e27c <xTaskIncrementTick+0x148>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	f040 808f 	bne.w	800e266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e148:	4b4d      	ldr	r3, [pc, #308]	; (800e280 <xTaskIncrementTick+0x14c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3301      	adds	r3, #1
 800e14e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e150:	4a4b      	ldr	r2, [pc, #300]	; (800e280 <xTaskIncrementTick+0x14c>)
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d120      	bne.n	800e19e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e15c:	4b49      	ldr	r3, [pc, #292]	; (800e284 <xTaskIncrementTick+0x150>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00a      	beq.n	800e17c <xTaskIncrementTick+0x48>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	603b      	str	r3, [r7, #0]
}
 800e178:	bf00      	nop
 800e17a:	e7fe      	b.n	800e17a <xTaskIncrementTick+0x46>
 800e17c:	4b41      	ldr	r3, [pc, #260]	; (800e284 <xTaskIncrementTick+0x150>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	60fb      	str	r3, [r7, #12]
 800e182:	4b41      	ldr	r3, [pc, #260]	; (800e288 <xTaskIncrementTick+0x154>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a3f      	ldr	r2, [pc, #252]	; (800e284 <xTaskIncrementTick+0x150>)
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	4a3f      	ldr	r2, [pc, #252]	; (800e288 <xTaskIncrementTick+0x154>)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	4b3e      	ldr	r3, [pc, #248]	; (800e28c <xTaskIncrementTick+0x158>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3301      	adds	r3, #1
 800e196:	4a3d      	ldr	r2, [pc, #244]	; (800e28c <xTaskIncrementTick+0x158>)
 800e198:	6013      	str	r3, [r2, #0]
 800e19a:	f000 fad3 	bl	800e744 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e19e:	4b3c      	ldr	r3, [pc, #240]	; (800e290 <xTaskIncrementTick+0x15c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d349      	bcc.n	800e23c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1a8:	4b36      	ldr	r3, [pc, #216]	; (800e284 <xTaskIncrementTick+0x150>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d104      	bne.n	800e1bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1b2:	4b37      	ldr	r3, [pc, #220]	; (800e290 <xTaskIncrementTick+0x15c>)
 800e1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b8:	601a      	str	r2, [r3, #0]
					break;
 800e1ba:	e03f      	b.n	800e23c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1bc:	4b31      	ldr	r3, [pc, #196]	; (800e284 <xTaskIncrementTick+0x150>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d203      	bcs.n	800e1dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1d4:	4a2e      	ldr	r2, [pc, #184]	; (800e290 <xTaskIncrementTick+0x15c>)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1da:	e02f      	b.n	800e23c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	3304      	adds	r3, #4
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe fed1 	bl	800cf88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d004      	beq.n	800e1f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fec8 	bl	800cf88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fc:	4b25      	ldr	r3, [pc, #148]	; (800e294 <xTaskIncrementTick+0x160>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	429a      	cmp	r2, r3
 800e202:	d903      	bls.n	800e20c <xTaskIncrementTick+0xd8>
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e208:	4a22      	ldr	r2, [pc, #136]	; (800e294 <xTaskIncrementTick+0x160>)
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4a1f      	ldr	r2, [pc, #124]	; (800e298 <xTaskIncrementTick+0x164>)
 800e21a:	441a      	add	r2, r3
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	3304      	adds	r3, #4
 800e220:	4619      	mov	r1, r3
 800e222:	4610      	mov	r0, r2
 800e224:	f7fe fe53 	bl	800cece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e22c:	4b1b      	ldr	r3, [pc, #108]	; (800e29c <xTaskIncrementTick+0x168>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	429a      	cmp	r2, r3
 800e234:	d3b8      	bcc.n	800e1a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e236:	2301      	movs	r3, #1
 800e238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e23a:	e7b5      	b.n	800e1a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e23c:	4b17      	ldr	r3, [pc, #92]	; (800e29c <xTaskIncrementTick+0x168>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e242:	4915      	ldr	r1, [pc, #84]	; (800e298 <xTaskIncrementTick+0x164>)
 800e244:	4613      	mov	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4413      	add	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	440b      	add	r3, r1
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d901      	bls.n	800e258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e254:	2301      	movs	r3, #1
 800e256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e258:	4b11      	ldr	r3, [pc, #68]	; (800e2a0 <xTaskIncrementTick+0x16c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d007      	beq.n	800e270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e260:	2301      	movs	r3, #1
 800e262:	617b      	str	r3, [r7, #20]
 800e264:	e004      	b.n	800e270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e266:	4b0f      	ldr	r3, [pc, #60]	; (800e2a4 <xTaskIncrementTick+0x170>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3301      	adds	r3, #1
 800e26c:	4a0d      	ldr	r2, [pc, #52]	; (800e2a4 <xTaskIncrementTick+0x170>)
 800e26e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e270:	697b      	ldr	r3, [r7, #20]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3718      	adds	r7, #24
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	20013db8 	.word	0x20013db8
 800e280:	20013d94 	.word	0x20013d94
 800e284:	20013d48 	.word	0x20013d48
 800e288:	20013d4c 	.word	0x20013d4c
 800e28c:	20013da8 	.word	0x20013da8
 800e290:	20013db0 	.word	0x20013db0
 800e294:	20013d98 	.word	0x20013d98
 800e298:	200138c0 	.word	0x200138c0
 800e29c:	200138bc 	.word	0x200138bc
 800e2a0:	20013da4 	.word	0x20013da4
 800e2a4:	20013da0 	.word	0x20013da0

0800e2a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2ae:	4b28      	ldr	r3, [pc, #160]	; (800e350 <vTaskSwitchContext+0xa8>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2b6:	4b27      	ldr	r3, [pc, #156]	; (800e354 <vTaskSwitchContext+0xac>)
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e2bc:	e041      	b.n	800e342 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e2be:	4b25      	ldr	r3, [pc, #148]	; (800e354 <vTaskSwitchContext+0xac>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2c4:	4b24      	ldr	r3, [pc, #144]	; (800e358 <vTaskSwitchContext+0xb0>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	e010      	b.n	800e2ee <vTaskSwitchContext+0x46>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10a      	bne.n	800e2e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	607b      	str	r3, [r7, #4]
}
 800e2e4:	bf00      	nop
 800e2e6:	e7fe      	b.n	800e2e6 <vTaskSwitchContext+0x3e>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	491b      	ldr	r1, [pc, #108]	; (800e35c <vTaskSwitchContext+0xb4>)
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	440b      	add	r3, r1
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0e4      	beq.n	800e2cc <vTaskSwitchContext+0x24>
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	4613      	mov	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	4a13      	ldr	r2, [pc, #76]	; (800e35c <vTaskSwitchContext+0xb4>)
 800e30e:	4413      	add	r3, r2
 800e310:	60bb      	str	r3, [r7, #8]
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	605a      	str	r2, [r3, #4]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	3308      	adds	r3, #8
 800e324:	429a      	cmp	r2, r3
 800e326:	d104      	bne.n	800e332 <vTaskSwitchContext+0x8a>
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	605a      	str	r2, [r3, #4]
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	4a09      	ldr	r2, [pc, #36]	; (800e360 <vTaskSwitchContext+0xb8>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	4a06      	ldr	r2, [pc, #24]	; (800e358 <vTaskSwitchContext+0xb0>)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6013      	str	r3, [r2, #0]
}
 800e342:	bf00      	nop
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	20013db8 	.word	0x20013db8
 800e354:	20013da4 	.word	0x20013da4
 800e358:	20013d98 	.word	0x20013d98
 800e35c:	200138c0 	.word	0x200138c0
 800e360:	200138bc 	.word	0x200138bc

0800e364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10a      	bne.n	800e38a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	60fb      	str	r3, [r7, #12]
}
 800e386:	bf00      	nop
 800e388:	e7fe      	b.n	800e388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e38a:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <vTaskPlaceOnEventList+0x44>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3318      	adds	r3, #24
 800e390:	4619      	mov	r1, r3
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f7fe fdbf 	bl	800cf16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e398:	2101      	movs	r1, #1
 800e39a:	6838      	ldr	r0, [r7, #0]
 800e39c:	f000 fc12 	bl	800ebc4 <prvAddCurrentTaskToDelayedList>
}
 800e3a0:	bf00      	nop
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	200138bc 	.word	0x200138bc

0800e3ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10a      	bne.n	800e3d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	617b      	str	r3, [r7, #20]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3d4:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <vTaskPlaceOnEventListRestricted+0x54>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	3318      	adds	r3, #24
 800e3da:	4619      	mov	r1, r3
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7fe fd76 	bl	800cece <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e3ee:	6879      	ldr	r1, [r7, #4]
 800e3f0:	68b8      	ldr	r0, [r7, #8]
 800e3f2:	f000 fbe7 	bl	800ebc4 <prvAddCurrentTaskToDelayedList>
	}
 800e3f6:	bf00      	nop
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	200138bc 	.word	0x200138bc

0800e404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10a      	bne.n	800e430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	60fb      	str	r3, [r7, #12]
}
 800e42c:	bf00      	nop
 800e42e:	e7fe      	b.n	800e42e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	3318      	adds	r3, #24
 800e434:	4618      	mov	r0, r3
 800e436:	f7fe fda7 	bl	800cf88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e43a:	4b1e      	ldr	r3, [pc, #120]	; (800e4b4 <xTaskRemoveFromEventList+0xb0>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d11d      	bne.n	800e47e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	3304      	adds	r3, #4
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fd9e 	bl	800cf88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e450:	4b19      	ldr	r3, [pc, #100]	; (800e4b8 <xTaskRemoveFromEventList+0xb4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	429a      	cmp	r2, r3
 800e456:	d903      	bls.n	800e460 <xTaskRemoveFromEventList+0x5c>
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45c:	4a16      	ldr	r2, [pc, #88]	; (800e4b8 <xTaskRemoveFromEventList+0xb4>)
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e464:	4613      	mov	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4a13      	ldr	r2, [pc, #76]	; (800e4bc <xTaskRemoveFromEventList+0xb8>)
 800e46e:	441a      	add	r2, r3
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	3304      	adds	r3, #4
 800e474:	4619      	mov	r1, r3
 800e476:	4610      	mov	r0, r2
 800e478:	f7fe fd29 	bl	800cece <vListInsertEnd>
 800e47c:	e005      	b.n	800e48a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	3318      	adds	r3, #24
 800e482:	4619      	mov	r1, r3
 800e484:	480e      	ldr	r0, [pc, #56]	; (800e4c0 <xTaskRemoveFromEventList+0xbc>)
 800e486:	f7fe fd22 	bl	800cece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48e:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <xTaskRemoveFromEventList+0xc0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e494:	429a      	cmp	r2, r3
 800e496:	d905      	bls.n	800e4a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e498:	2301      	movs	r3, #1
 800e49a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <xTaskRemoveFromEventList+0xc4>)
 800e49e:	2201      	movs	r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	e001      	b.n	800e4a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e4a8:	697b      	ldr	r3, [r7, #20]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	20013db8 	.word	0x20013db8
 800e4b8:	20013d98 	.word	0x20013d98
 800e4bc:	200138c0 	.word	0x200138c0
 800e4c0:	20013d50 	.word	0x20013d50
 800e4c4:	200138bc 	.word	0x200138bc
 800e4c8:	20013da4 	.word	0x20013da4

0800e4cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4d4:	4b06      	ldr	r3, [pc, #24]	; (800e4f0 <vTaskInternalSetTimeOutState+0x24>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4dc:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <vTaskInternalSetTimeOutState+0x28>)
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	605a      	str	r2, [r3, #4]
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr
 800e4f0:	20013da8 	.word	0x20013da8
 800e4f4:	20013d94 	.word	0x20013d94

0800e4f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10a      	bne.n	800e51e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	613b      	str	r3, [r7, #16]
}
 800e51a:	bf00      	nop
 800e51c:	e7fe      	b.n	800e51c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10a      	bne.n	800e53a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	60fb      	str	r3, [r7, #12]
}
 800e536:	bf00      	nop
 800e538:	e7fe      	b.n	800e538 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e53a:	f001 f813 	bl	800f564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e53e:	4b1d      	ldr	r3, [pc, #116]	; (800e5b4 <xTaskCheckForTimeOut+0xbc>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	69ba      	ldr	r2, [r7, #24]
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d102      	bne.n	800e55e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e558:	2300      	movs	r3, #0
 800e55a:	61fb      	str	r3, [r7, #28]
 800e55c:	e023      	b.n	800e5a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	4b15      	ldr	r3, [pc, #84]	; (800e5b8 <xTaskCheckForTimeOut+0xc0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	429a      	cmp	r2, r3
 800e568:	d007      	beq.n	800e57a <xTaskCheckForTimeOut+0x82>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	69ba      	ldr	r2, [r7, #24]
 800e570:	429a      	cmp	r2, r3
 800e572:	d302      	bcc.n	800e57a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e574:	2301      	movs	r3, #1
 800e576:	61fb      	str	r3, [r7, #28]
 800e578:	e015      	b.n	800e5a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	429a      	cmp	r2, r3
 800e582:	d20b      	bcs.n	800e59c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	1ad2      	subs	r2, r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff ff9b 	bl	800e4cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e596:	2300      	movs	r3, #0
 800e598:	61fb      	str	r3, [r7, #28]
 800e59a:	e004      	b.n	800e5a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e5a6:	f001 f80d 	bl	800f5c4 <vPortExitCritical>

	return xReturn;
 800e5aa:	69fb      	ldr	r3, [r7, #28]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3720      	adds	r7, #32
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20013d94 	.word	0x20013d94
 800e5b8:	20013da8 	.word	0x20013da8

0800e5bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5bc:	b480      	push	{r7}
 800e5be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5c0:	4b03      	ldr	r3, [pc, #12]	; (800e5d0 <vTaskMissedYield+0x14>)
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	601a      	str	r2, [r3, #0]
}
 800e5c6:	bf00      	nop
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	20013da4 	.word	0x20013da4

0800e5d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5dc:	f000 f854 	bl	800e688 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5e0:	4b07      	ldr	r3, [pc, #28]	; (800e600 <prvIdleTask+0x2c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d907      	bls.n	800e5f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e5e8:	4b06      	ldr	r3, [pc, #24]	; (800e604 <prvIdleTask+0x30>)
 800e5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e5f8:	f7f3 f8da 	bl	80017b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e5fc:	e7ee      	b.n	800e5dc <prvIdleTask+0x8>
 800e5fe:	bf00      	nop
 800e600:	200138c0 	.word	0x200138c0
 800e604:	e000ed04 	.word	0xe000ed04

0800e608 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e60e:	2300      	movs	r3, #0
 800e610:	607b      	str	r3, [r7, #4]
 800e612:	e00c      	b.n	800e62e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	4613      	mov	r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4413      	add	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4a12      	ldr	r2, [pc, #72]	; (800e668 <prvInitialiseTaskLists+0x60>)
 800e620:	4413      	add	r3, r2
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe fc26 	bl	800ce74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3301      	adds	r3, #1
 800e62c:	607b      	str	r3, [r7, #4]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2b37      	cmp	r3, #55	; 0x37
 800e632:	d9ef      	bls.n	800e614 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e634:	480d      	ldr	r0, [pc, #52]	; (800e66c <prvInitialiseTaskLists+0x64>)
 800e636:	f7fe fc1d 	bl	800ce74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e63a:	480d      	ldr	r0, [pc, #52]	; (800e670 <prvInitialiseTaskLists+0x68>)
 800e63c:	f7fe fc1a 	bl	800ce74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e640:	480c      	ldr	r0, [pc, #48]	; (800e674 <prvInitialiseTaskLists+0x6c>)
 800e642:	f7fe fc17 	bl	800ce74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e646:	480c      	ldr	r0, [pc, #48]	; (800e678 <prvInitialiseTaskLists+0x70>)
 800e648:	f7fe fc14 	bl	800ce74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e64c:	480b      	ldr	r0, [pc, #44]	; (800e67c <prvInitialiseTaskLists+0x74>)
 800e64e:	f7fe fc11 	bl	800ce74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e652:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <prvInitialiseTaskLists+0x78>)
 800e654:	4a05      	ldr	r2, [pc, #20]	; (800e66c <prvInitialiseTaskLists+0x64>)
 800e656:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e658:	4b0a      	ldr	r3, [pc, #40]	; (800e684 <prvInitialiseTaskLists+0x7c>)
 800e65a:	4a05      	ldr	r2, [pc, #20]	; (800e670 <prvInitialiseTaskLists+0x68>)
 800e65c:	601a      	str	r2, [r3, #0]
}
 800e65e:	bf00      	nop
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	200138c0 	.word	0x200138c0
 800e66c:	20013d20 	.word	0x20013d20
 800e670:	20013d34 	.word	0x20013d34
 800e674:	20013d50 	.word	0x20013d50
 800e678:	20013d64 	.word	0x20013d64
 800e67c:	20013d7c 	.word	0x20013d7c
 800e680:	20013d48 	.word	0x20013d48
 800e684:	20013d4c 	.word	0x20013d4c

0800e688 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e68e:	e019      	b.n	800e6c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e690:	f000 ff68 	bl	800f564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e694:	4b10      	ldr	r3, [pc, #64]	; (800e6d8 <prvCheckTasksWaitingTermination+0x50>)
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fe fc71 	bl	800cf88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e6a6:	4b0d      	ldr	r3, [pc, #52]	; (800e6dc <prvCheckTasksWaitingTermination+0x54>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	4a0b      	ldr	r2, [pc, #44]	; (800e6dc <prvCheckTasksWaitingTermination+0x54>)
 800e6ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e6b0:	4b0b      	ldr	r3, [pc, #44]	; (800e6e0 <prvCheckTasksWaitingTermination+0x58>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	4a0a      	ldr	r2, [pc, #40]	; (800e6e0 <prvCheckTasksWaitingTermination+0x58>)
 800e6b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e6ba:	f000 ff83 	bl	800f5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f810 	bl	800e6e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6c4:	4b06      	ldr	r3, [pc, #24]	; (800e6e0 <prvCheckTasksWaitingTermination+0x58>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1e1      	bne.n	800e690 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6cc:	bf00      	nop
 800e6ce:	bf00      	nop
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	20013d64 	.word	0x20013d64
 800e6dc:	20013d90 	.word	0x20013d90
 800e6e0:	20013d78 	.word	0x20013d78

0800e6e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d108      	bne.n	800e708 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f001 f920 	bl	800f940 <vPortFree>
				vPortFree( pxTCB );
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f001 f91d 	bl	800f940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e706:	e018      	b.n	800e73a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d103      	bne.n	800e71a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f001 f914 	bl	800f940 <vPortFree>
	}
 800e718:	e00f      	b.n	800e73a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e720:	2b02      	cmp	r3, #2
 800e722:	d00a      	beq.n	800e73a <prvDeleteTCB+0x56>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	60fb      	str	r3, [r7, #12]
}
 800e736:	bf00      	nop
 800e738:	e7fe      	b.n	800e738 <prvDeleteTCB+0x54>
	}
 800e73a:	bf00      	nop
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
	...

0800e744 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e74a:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <prvResetNextTaskUnblockTime+0x38>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d104      	bne.n	800e75e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e754:	4b0a      	ldr	r3, [pc, #40]	; (800e780 <prvResetNextTaskUnblockTime+0x3c>)
 800e756:	f04f 32ff 	mov.w	r2, #4294967295
 800e75a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e75c:	e008      	b.n	800e770 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e75e:	4b07      	ldr	r3, [pc, #28]	; (800e77c <prvResetNextTaskUnblockTime+0x38>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	4a04      	ldr	r2, [pc, #16]	; (800e780 <prvResetNextTaskUnblockTime+0x3c>)
 800e76e:	6013      	str	r3, [r2, #0]
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	20013d48 	.word	0x20013d48
 800e780:	20013db0 	.word	0x20013db0

0800e784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e78a:	4b0b      	ldr	r3, [pc, #44]	; (800e7b8 <xTaskGetSchedulerState+0x34>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d102      	bne.n	800e798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e792:	2301      	movs	r3, #1
 800e794:	607b      	str	r3, [r7, #4]
 800e796:	e008      	b.n	800e7aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e798:	4b08      	ldr	r3, [pc, #32]	; (800e7bc <xTaskGetSchedulerState+0x38>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	607b      	str	r3, [r7, #4]
 800e7a4:	e001      	b.n	800e7aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e7aa:	687b      	ldr	r3, [r7, #4]
	}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	20013d9c 	.word	0x20013d9c
 800e7bc:	20013db8 	.word	0x20013db8

0800e7c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d056      	beq.n	800e884 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e7d6:	4b2e      	ldr	r3, [pc, #184]	; (800e890 <xTaskPriorityDisinherit+0xd0>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	693a      	ldr	r2, [r7, #16]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d00a      	beq.n	800e7f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	60fb      	str	r3, [r7, #12]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	60bb      	str	r3, [r7, #8]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e818:	1e5a      	subs	r2, r3, #1
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e826:	429a      	cmp	r2, r3
 800e828:	d02c      	beq.n	800e884 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d128      	bne.n	800e884 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	3304      	adds	r3, #4
 800e836:	4618      	mov	r0, r3
 800e838:	f7fe fba6 	bl	800cf88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4b0f      	ldr	r3, [pc, #60]	; (800e894 <xTaskPriorityDisinherit+0xd4>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d903      	bls.n	800e864 <xTaskPriorityDisinherit+0xa4>
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e860:	4a0c      	ldr	r2, [pc, #48]	; (800e894 <xTaskPriorityDisinherit+0xd4>)
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e868:	4613      	mov	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4a09      	ldr	r2, [pc, #36]	; (800e898 <xTaskPriorityDisinherit+0xd8>)
 800e872:	441a      	add	r2, r3
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	3304      	adds	r3, #4
 800e878:	4619      	mov	r1, r3
 800e87a:	4610      	mov	r0, r2
 800e87c:	f7fe fb27 	bl	800cece <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e880:	2301      	movs	r3, #1
 800e882:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e884:	697b      	ldr	r3, [r7, #20]
	}
 800e886:	4618      	mov	r0, r3
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	200138bc 	.word	0x200138bc
 800e894:	20013d98 	.word	0x20013d98
 800e898:	200138c0 	.word	0x200138c0

0800e89c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08a      	sub	sp, #40	; 0x28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	603b      	str	r3, [r7, #0]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10a      	bne.n	800e8cc <xTaskGenericNotify+0x30>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	61bb      	str	r3, [r7, #24]
}
 800e8c8:	bf00      	nop
 800e8ca:	e7fe      	b.n	800e8ca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e8d0:	f000 fe48 	bl	800f564 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d003      	beq.n	800e8e2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e8e8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e8ea:	6a3b      	ldr	r3, [r7, #32]
 800e8ec:	2202      	movs	r2, #2
 800e8ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e8f2:	79fb      	ldrb	r3, [r7, #7]
 800e8f4:	2b04      	cmp	r3, #4
 800e8f6:	d828      	bhi.n	800e94a <xTaskGenericNotify+0xae>
 800e8f8:	a201      	add	r2, pc, #4	; (adr r2, 800e900 <xTaskGenericNotify+0x64>)
 800e8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fe:	bf00      	nop
 800e900:	0800e96b 	.word	0x0800e96b
 800e904:	0800e915 	.word	0x0800e915
 800e908:	0800e923 	.word	0x0800e923
 800e90c:	0800e92f 	.word	0x0800e92f
 800e910:	0800e937 	.word	0x0800e937
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	431a      	orrs	r2, r3
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e920:	e026      	b.n	800e970 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e922:	6a3b      	ldr	r3, [r7, #32]
 800e924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e926:	1c5a      	adds	r2, r3, #1
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e92c:	e020      	b.n	800e970 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e934:	e01c      	b.n	800e970 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e936:	7ffb      	ldrb	r3, [r7, #31]
 800e938:	2b02      	cmp	r3, #2
 800e93a:	d003      	beq.n	800e944 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e942:	e015      	b.n	800e970 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800e944:	2300      	movs	r3, #0
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e948:	e012      	b.n	800e970 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e952:	d00c      	beq.n	800e96e <xTaskGenericNotify+0xd2>
	__asm volatile
 800e954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e958:	f383 8811 	msr	BASEPRI, r3
 800e95c:	f3bf 8f6f 	isb	sy
 800e960:	f3bf 8f4f 	dsb	sy
 800e964:	617b      	str	r3, [r7, #20]
}
 800e966:	bf00      	nop
 800e968:	e7fe      	b.n	800e968 <xTaskGenericNotify+0xcc>
					break;
 800e96a:	bf00      	nop
 800e96c:	e000      	b.n	800e970 <xTaskGenericNotify+0xd4>

					break;
 800e96e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e970:	7ffb      	ldrb	r3, [r7, #31]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d13a      	bne.n	800e9ec <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	3304      	adds	r3, #4
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe fb04 	bl	800cf88 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e980:	6a3b      	ldr	r3, [r7, #32]
 800e982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e984:	4b1d      	ldr	r3, [pc, #116]	; (800e9fc <xTaskGenericNotify+0x160>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d903      	bls.n	800e994 <xTaskGenericNotify+0xf8>
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e990:	4a1a      	ldr	r2, [pc, #104]	; (800e9fc <xTaskGenericNotify+0x160>)
 800e992:	6013      	str	r3, [r2, #0]
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e998:	4613      	mov	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4413      	add	r3, r2
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	4a17      	ldr	r2, [pc, #92]	; (800ea00 <xTaskGenericNotify+0x164>)
 800e9a2:	441a      	add	r2, r3
 800e9a4:	6a3b      	ldr	r3, [r7, #32]
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	f7fe fa8f 	bl	800cece <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <xTaskGenericNotify+0x132>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	613b      	str	r3, [r7, #16]
}
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ea04 <xTaskGenericNotify+0x168>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d907      	bls.n	800e9ec <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ea08 <xTaskGenericNotify+0x16c>)
 800e9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e9ec:	f000 fdea 	bl	800f5c4 <vPortExitCritical>

		return xReturn;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3728      	adds	r7, #40	; 0x28
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20013d98 	.word	0x20013d98
 800ea00:	200138c0 	.word	0x200138c0
 800ea04:	200138bc 	.word	0x200138bc
 800ea08:	e000ed04 	.word	0xe000ed04

0800ea0c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08e      	sub	sp, #56	; 0x38
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	603b      	str	r3, [r7, #0]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d10a      	bne.n	800ea3c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ea26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea38:	bf00      	nop
 800ea3a:	e7fe      	b.n	800ea3a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea3c:	f000 fe74 	bl	800f728 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ea44:	f3ef 8211 	mrs	r2, BASEPRI
 800ea48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	623a      	str	r2, [r7, #32]
 800ea5a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ea5c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d003      	beq.n	800ea6e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ea66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ea74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ea78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7a:	2202      	movs	r2, #2
 800ea7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ea80:	79fb      	ldrb	r3, [r7, #7]
 800ea82:	2b04      	cmp	r3, #4
 800ea84:	d828      	bhi.n	800ead8 <xTaskGenericNotifyFromISR+0xcc>
 800ea86:	a201      	add	r2, pc, #4	; (adr r2, 800ea8c <xTaskGenericNotifyFromISR+0x80>)
 800ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8c:	0800eaf9 	.word	0x0800eaf9
 800ea90:	0800eaa1 	.word	0x0800eaa1
 800ea94:	0800eaaf 	.word	0x0800eaaf
 800ea98:	0800eabb 	.word	0x0800eabb
 800ea9c:	0800eac3 	.word	0x0800eac3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	431a      	orrs	r2, r3
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800eaac:	e027      	b.n	800eafe <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab2:	1c5a      	adds	r2, r3, #1
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800eab8:	e021      	b.n	800eafe <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800eaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800eac0:	e01d      	b.n	800eafe <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d003      	beq.n	800ead2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ead0:	e015      	b.n	800eafe <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800ead2:	2300      	movs	r3, #0
 800ead4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ead6:	e012      	b.n	800eafe <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ead8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae0:	d00c      	beq.n	800eafc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	61bb      	str	r3, [r7, #24]
}
 800eaf4:	bf00      	nop
 800eaf6:	e7fe      	b.n	800eaf6 <xTaskGenericNotifyFromISR+0xea>
					break;
 800eaf8:	bf00      	nop
 800eafa:	e000      	b.n	800eafe <xTaskGenericNotifyFromISR+0xf2>
					break;
 800eafc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800eafe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d146      	bne.n	800eb94 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00a      	beq.n	800eb24 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	617b      	str	r3, [r7, #20]
}
 800eb20:	bf00      	nop
 800eb22:	e7fe      	b.n	800eb22 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb24:	4b21      	ldr	r3, [pc, #132]	; (800ebac <xTaskGenericNotifyFromISR+0x1a0>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d11d      	bne.n	800eb68 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe fa29 	bl	800cf88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb3a:	4b1d      	ldr	r3, [pc, #116]	; (800ebb0 <xTaskGenericNotifyFromISR+0x1a4>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d903      	bls.n	800eb4a <xTaskGenericNotifyFromISR+0x13e>
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb46:	4a1a      	ldr	r2, [pc, #104]	; (800ebb0 <xTaskGenericNotifyFromISR+0x1a4>)
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4a17      	ldr	r2, [pc, #92]	; (800ebb4 <xTaskGenericNotifyFromISR+0x1a8>)
 800eb58:	441a      	add	r2, r3
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4610      	mov	r0, r2
 800eb62:	f7fe f9b4 	bl	800cece <vListInsertEnd>
 800eb66:	e005      	b.n	800eb74 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	3318      	adds	r3, #24
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4812      	ldr	r0, [pc, #72]	; (800ebb8 <xTaskGenericNotifyFromISR+0x1ac>)
 800eb70:	f7fe f9ad 	bl	800cece <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb78:	4b10      	ldr	r3, [pc, #64]	; (800ebbc <xTaskGenericNotifyFromISR+0x1b0>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d908      	bls.n	800eb94 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800eb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800eb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800eb8e:	4b0c      	ldr	r3, [pc, #48]	; (800ebc0 <xTaskGenericNotifyFromISR+0x1b4>)
 800eb90:	2201      	movs	r2, #1
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	f383 8811 	msr	BASEPRI, r3
}
 800eb9e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800eba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3738      	adds	r7, #56	; 0x38
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	20013db8 	.word	0x20013db8
 800ebb0:	20013d98 	.word	0x20013d98
 800ebb4:	200138c0 	.word	0x200138c0
 800ebb8:	20013d50 	.word	0x20013d50
 800ebbc:	200138bc 	.word	0x200138bc
 800ebc0:	20013da4 	.word	0x20013da4

0800ebc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ebce:	4b21      	ldr	r3, [pc, #132]	; (800ec54 <prvAddCurrentTaskToDelayedList+0x90>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebd4:	4b20      	ldr	r3, [pc, #128]	; (800ec58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe f9d4 	bl	800cf88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d10a      	bne.n	800ebfe <prvAddCurrentTaskToDelayedList+0x3a>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d007      	beq.n	800ebfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebee:	4b1a      	ldr	r3, [pc, #104]	; (800ec58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	3304      	adds	r3, #4
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	4819      	ldr	r0, [pc, #100]	; (800ec5c <prvAddCurrentTaskToDelayedList+0x98>)
 800ebf8:	f7fe f969 	bl	800cece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ebfc:	e026      	b.n	800ec4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4413      	add	r3, r2
 800ec04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec06:	4b14      	ldr	r3, [pc, #80]	; (800ec58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d209      	bcs.n	800ec2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec16:	4b12      	ldr	r3, [pc, #72]	; (800ec60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	4b0f      	ldr	r3, [pc, #60]	; (800ec58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	3304      	adds	r3, #4
 800ec20:	4619      	mov	r1, r3
 800ec22:	4610      	mov	r0, r2
 800ec24:	f7fe f977 	bl	800cf16 <vListInsert>
}
 800ec28:	e010      	b.n	800ec4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec2a:	4b0e      	ldr	r3, [pc, #56]	; (800ec64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3304      	adds	r3, #4
 800ec34:	4619      	mov	r1, r3
 800ec36:	4610      	mov	r0, r2
 800ec38:	f7fe f96d 	bl	800cf16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec3c:	4b0a      	ldr	r3, [pc, #40]	; (800ec68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d202      	bcs.n	800ec4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec46:	4a08      	ldr	r2, [pc, #32]	; (800ec68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	6013      	str	r3, [r2, #0]
}
 800ec4c:	bf00      	nop
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20013d94 	.word	0x20013d94
 800ec58:	200138bc 	.word	0x200138bc
 800ec5c:	20013d7c 	.word	0x20013d7c
 800ec60:	20013d4c 	.word	0x20013d4c
 800ec64:	20013d48 	.word	0x20013d48
 800ec68:	20013db0 	.word	0x20013db0

0800ec6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b08a      	sub	sp, #40	; 0x28
 800ec70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ec76:	f000 fb07 	bl	800f288 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ec7a:	4b1c      	ldr	r3, [pc, #112]	; (800ecec <xTimerCreateTimerTask+0x80>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d021      	beq.n	800ecc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ec86:	2300      	movs	r3, #0
 800ec88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ec8a:	1d3a      	adds	r2, r7, #4
 800ec8c:	f107 0108 	add.w	r1, r7, #8
 800ec90:	f107 030c 	add.w	r3, r7, #12
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fe f8d3 	bl	800ce40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ec9a:	6879      	ldr	r1, [r7, #4]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	9202      	str	r2, [sp, #8]
 800eca2:	9301      	str	r3, [sp, #4]
 800eca4:	2302      	movs	r3, #2
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	460a      	mov	r2, r1
 800ecac:	4910      	ldr	r1, [pc, #64]	; (800ecf0 <xTimerCreateTimerTask+0x84>)
 800ecae:	4811      	ldr	r0, [pc, #68]	; (800ecf4 <xTimerCreateTimerTask+0x88>)
 800ecb0:	f7fe ff48 	bl	800db44 <xTaskCreateStatic>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	4a10      	ldr	r2, [pc, #64]	; (800ecf8 <xTimerCreateTimerTask+0x8c>)
 800ecb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ecba:	4b0f      	ldr	r3, [pc, #60]	; (800ecf8 <xTimerCreateTimerTask+0x8c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d001      	beq.n	800ecc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	613b      	str	r3, [r7, #16]
}
 800ecde:	bf00      	nop
 800ece0:	e7fe      	b.n	800ece0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ece2:	697b      	ldr	r3, [r7, #20]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	20013dec 	.word	0x20013dec
 800ecf0:	080110a4 	.word	0x080110a4
 800ecf4:	0800ee31 	.word	0x0800ee31
 800ecf8:	20013df0 	.word	0x20013df0

0800ecfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08a      	sub	sp, #40	; 0x28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10a      	bne.n	800ed2a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	623b      	str	r3, [r7, #32]
}
 800ed26:	bf00      	nop
 800ed28:	e7fe      	b.n	800ed28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed2a:	4b1a      	ldr	r3, [pc, #104]	; (800ed94 <xTimerGenericCommand+0x98>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d02a      	beq.n	800ed88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b05      	cmp	r3, #5
 800ed42:	dc18      	bgt.n	800ed76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed44:	f7ff fd1e 	bl	800e784 <xTaskGetSchedulerState>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d109      	bne.n	800ed62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed4e:	4b11      	ldr	r3, [pc, #68]	; (800ed94 <xTimerGenericCommand+0x98>)
 800ed50:	6818      	ldr	r0, [r3, #0]
 800ed52:	f107 0110 	add.w	r1, r7, #16
 800ed56:	2300      	movs	r3, #0
 800ed58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed5a:	f7fe fa7d 	bl	800d258 <xQueueGenericSend>
 800ed5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ed60:	e012      	b.n	800ed88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed62:	4b0c      	ldr	r3, [pc, #48]	; (800ed94 <xTimerGenericCommand+0x98>)
 800ed64:	6818      	ldr	r0, [r3, #0]
 800ed66:	f107 0110 	add.w	r1, r7, #16
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f7fe fa73 	bl	800d258 <xQueueGenericSend>
 800ed72:	6278      	str	r0, [r7, #36]	; 0x24
 800ed74:	e008      	b.n	800ed88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed76:	4b07      	ldr	r3, [pc, #28]	; (800ed94 <xTimerGenericCommand+0x98>)
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f107 0110 	add.w	r1, r7, #16
 800ed7e:	2300      	movs	r3, #0
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	f7fe fb67 	bl	800d454 <xQueueGenericSendFromISR>
 800ed86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3728      	adds	r7, #40	; 0x28
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	20013dec 	.word	0x20013dec

0800ed98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b088      	sub	sp, #32
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eda2:	4b22      	ldr	r3, [pc, #136]	; (800ee2c <prvProcessExpiredTimer+0x94>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	3304      	adds	r3, #4
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe f8e9 	bl	800cf88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d022      	beq.n	800ee0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	699a      	ldr	r2, [r3, #24]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	18d1      	adds	r1, r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	6978      	ldr	r0, [r7, #20]
 800edd2:	f000 f8d1 	bl	800ef78 <prvInsertTimerInActiveList>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d01f      	beq.n	800ee1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eddc:	2300      	movs	r3, #0
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	2300      	movs	r3, #0
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	2100      	movs	r1, #0
 800ede6:	6978      	ldr	r0, [r7, #20]
 800ede8:	f7ff ff88 	bl	800ecfc <xTimerGenericCommand>
 800edec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d113      	bne.n	800ee1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	60fb      	str	r3, [r7, #12]
}
 800ee06:	bf00      	nop
 800ee08:	e7fe      	b.n	800ee08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee10:	f023 0301 	bic.w	r3, r3, #1
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	6a1b      	ldr	r3, [r3, #32]
 800ee20:	6978      	ldr	r0, [r7, #20]
 800ee22:	4798      	blx	r3
}
 800ee24:	bf00      	nop
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	20013de4 	.word	0x20013de4

0800ee30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee38:	f107 0308 	add.w	r3, r7, #8
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 f857 	bl	800eef0 <prvGetNextExpireTime>
 800ee42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	4619      	mov	r1, r3
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f000 f803 	bl	800ee54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee4e:	f000 f8d5 	bl	800effc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee52:	e7f1      	b.n	800ee38 <prvTimerTask+0x8>

0800ee54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee5e:	f7ff f8ad 	bl	800dfbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee62:	f107 0308 	add.w	r3, r7, #8
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 f866 	bl	800ef38 <prvSampleTimeNow>
 800ee6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d130      	bne.n	800eed6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10a      	bne.n	800ee90 <prvProcessTimerOrBlockTask+0x3c>
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d806      	bhi.n	800ee90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee82:	f7ff f8a9 	bl	800dfd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee86:	68f9      	ldr	r1, [r7, #12]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff ff85 	bl	800ed98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ee8e:	e024      	b.n	800eeda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d008      	beq.n	800eea8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee96:	4b13      	ldr	r3, [pc, #76]	; (800eee4 <prvProcessTimerOrBlockTask+0x90>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d101      	bne.n	800eea4 <prvProcessTimerOrBlockTask+0x50>
 800eea0:	2301      	movs	r3, #1
 800eea2:	e000      	b.n	800eea6 <prvProcessTimerOrBlockTask+0x52>
 800eea4:	2300      	movs	r3, #0
 800eea6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eea8:	4b0f      	ldr	r3, [pc, #60]	; (800eee8 <prvProcessTimerOrBlockTask+0x94>)
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	f7fe fd83 	bl	800d9c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eeba:	f7ff f88d 	bl	800dfd8 <xTaskResumeAll>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10a      	bne.n	800eeda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eec4:	4b09      	ldr	r3, [pc, #36]	; (800eeec <prvProcessTimerOrBlockTask+0x98>)
 800eec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeca:	601a      	str	r2, [r3, #0]
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	f3bf 8f6f 	isb	sy
}
 800eed4:	e001      	b.n	800eeda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eed6:	f7ff f87f 	bl	800dfd8 <xTaskResumeAll>
}
 800eeda:	bf00      	nop
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	20013de8 	.word	0x20013de8
 800eee8:	20013dec 	.word	0x20013dec
 800eeec:	e000ed04 	.word	0xe000ed04

0800eef0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eef0:	b480      	push	{r7}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eef8:	4b0e      	ldr	r3, [pc, #56]	; (800ef34 <prvGetNextExpireTime+0x44>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d101      	bne.n	800ef06 <prvGetNextExpireTime+0x16>
 800ef02:	2201      	movs	r2, #1
 800ef04:	e000      	b.n	800ef08 <prvGetNextExpireTime+0x18>
 800ef06:	2200      	movs	r2, #0
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d105      	bne.n	800ef20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef14:	4b07      	ldr	r3, [pc, #28]	; (800ef34 <prvGetNextExpireTime+0x44>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	60fb      	str	r3, [r7, #12]
 800ef1e:	e001      	b.n	800ef24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef20:	2300      	movs	r3, #0
 800ef22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef24:	68fb      	ldr	r3, [r7, #12]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	20013de4 	.word	0x20013de4

0800ef38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef40:	f7ff f8e8 	bl	800e114 <xTaskGetTickCount>
 800ef44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef46:	4b0b      	ldr	r3, [pc, #44]	; (800ef74 <prvSampleTimeNow+0x3c>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d205      	bcs.n	800ef5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef50:	f000 f936 	bl	800f1c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	e002      	b.n	800ef62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef62:	4a04      	ldr	r2, [pc, #16]	; (800ef74 <prvSampleTimeNow+0x3c>)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef68:	68fb      	ldr	r3, [r7, #12]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20013df4 	.word	0x20013df4

0800ef78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
 800ef84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef86:	2300      	movs	r3, #0
 800ef88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68ba      	ldr	r2, [r7, #8]
 800ef8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d812      	bhi.n	800efc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	1ad2      	subs	r2, r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d302      	bcc.n	800efb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800efac:	2301      	movs	r3, #1
 800efae:	617b      	str	r3, [r7, #20]
 800efb0:	e01b      	b.n	800efea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efb2:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <prvInsertTimerInActiveList+0x7c>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3304      	adds	r3, #4
 800efba:	4619      	mov	r1, r3
 800efbc:	4610      	mov	r0, r2
 800efbe:	f7fd ffaa 	bl	800cf16 <vListInsert>
 800efc2:	e012      	b.n	800efea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d206      	bcs.n	800efda <prvInsertTimerInActiveList+0x62>
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d302      	bcc.n	800efda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efd4:	2301      	movs	r3, #1
 800efd6:	617b      	str	r3, [r7, #20]
 800efd8:	e007      	b.n	800efea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efda:	4b07      	ldr	r3, [pc, #28]	; (800eff8 <prvInsertTimerInActiveList+0x80>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	3304      	adds	r3, #4
 800efe2:	4619      	mov	r1, r3
 800efe4:	4610      	mov	r0, r2
 800efe6:	f7fd ff96 	bl	800cf16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800efea:	697b      	ldr	r3, [r7, #20]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	20013de8 	.word	0x20013de8
 800eff8:	20013de4 	.word	0x20013de4

0800effc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b08e      	sub	sp, #56	; 0x38
 800f000:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f002:	e0ca      	b.n	800f19a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	da18      	bge.n	800f03c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f00a:	1d3b      	adds	r3, r7, #4
 800f00c:	3304      	adds	r3, #4
 800f00e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10a      	bne.n	800f02c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	61fb      	str	r3, [r7, #28]
}
 800f028:	bf00      	nop
 800f02a:	e7fe      	b.n	800f02a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f032:	6850      	ldr	r0, [r2, #4]
 800f034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f036:	6892      	ldr	r2, [r2, #8]
 800f038:	4611      	mov	r1, r2
 800f03a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f2c0 80aa 	blt.w	800f198 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04a:	695b      	ldr	r3, [r3, #20]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d004      	beq.n	800f05a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f052:	3304      	adds	r3, #4
 800f054:	4618      	mov	r0, r3
 800f056:	f7fd ff97 	bl	800cf88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f05a:	463b      	mov	r3, r7
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff ff6b 	bl	800ef38 <prvSampleTimeNow>
 800f062:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b09      	cmp	r3, #9
 800f068:	f200 8097 	bhi.w	800f19a <prvProcessReceivedCommands+0x19e>
 800f06c:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <prvProcessReceivedCommands+0x78>)
 800f06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f072:	bf00      	nop
 800f074:	0800f09d 	.word	0x0800f09d
 800f078:	0800f09d 	.word	0x0800f09d
 800f07c:	0800f09d 	.word	0x0800f09d
 800f080:	0800f111 	.word	0x0800f111
 800f084:	0800f125 	.word	0x0800f125
 800f088:	0800f16f 	.word	0x0800f16f
 800f08c:	0800f09d 	.word	0x0800f09d
 800f090:	0800f09d 	.word	0x0800f09d
 800f094:	0800f111 	.word	0x0800f111
 800f098:	0800f125 	.word	0x0800f125
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0a2:	f043 0301 	orr.w	r3, r3, #1
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	18d1      	adds	r1, r2, r3
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0bc:	f7ff ff5c 	bl	800ef78 <prvInsertTimerInActiveList>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d069      	beq.n	800f19a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	6a1b      	ldr	r3, [r3, #32]
 800f0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0d4:	f003 0304 	and.w	r3, r3, #4
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d05e      	beq.n	800f19a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	699b      	ldr	r3, [r3, #24]
 800f0e2:	441a      	add	r2, r3
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0ee:	f7ff fe05 	bl	800ecfc <xTimerGenericCommand>
 800f0f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f0f4:	6a3b      	ldr	r3, [r7, #32]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d14f      	bne.n	800f19a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	61bb      	str	r3, [r7, #24]
}
 800f10c:	bf00      	nop
 800f10e:	e7fe      	b.n	800f10e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f116:	f023 0301 	bic.w	r3, r3, #1
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f122:	e03a      	b.n	800f19a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f12a:	f043 0301 	orr.w	r3, r3, #1
 800f12e:	b2da      	uxtb	r2, r3
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f136:	68ba      	ldr	r2, [r7, #8]
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	699b      	ldr	r3, [r3, #24]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10a      	bne.n	800f15a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f148:	f383 8811 	msr	BASEPRI, r3
 800f14c:	f3bf 8f6f 	isb	sy
 800f150:	f3bf 8f4f 	dsb	sy
 800f154:	617b      	str	r3, [r7, #20]
}
 800f156:	bf00      	nop
 800f158:	e7fe      	b.n	800f158 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	699a      	ldr	r2, [r3, #24]
 800f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f160:	18d1      	adds	r1, r2, r3
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f168:	f7ff ff06 	bl	800ef78 <prvInsertTimerInActiveList>
					break;
 800f16c:	e015      	b.n	800f19a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f174:	f003 0302 	and.w	r3, r3, #2
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d103      	bne.n	800f184 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f17e:	f000 fbdf 	bl	800f940 <vPortFree>
 800f182:	e00a      	b.n	800f19a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f18a:	f023 0301 	bic.w	r3, r3, #1
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f196:	e000      	b.n	800f19a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f198:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f19a:	4b08      	ldr	r3, [pc, #32]	; (800f1bc <prvProcessReceivedCommands+0x1c0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	1d39      	adds	r1, r7, #4
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fe f9f2 	bl	800d58c <xQueueReceive>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f47f af2a 	bne.w	800f004 <prvProcessReceivedCommands+0x8>
	}
}
 800f1b0:	bf00      	nop
 800f1b2:	bf00      	nop
 800f1b4:	3730      	adds	r7, #48	; 0x30
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20013dec 	.word	0x20013dec

0800f1c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1c6:	e048      	b.n	800f25a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1c8:	4b2d      	ldr	r3, [pc, #180]	; (800f280 <prvSwitchTimerLists+0xc0>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1d2:	4b2b      	ldr	r3, [pc, #172]	; (800f280 <prvSwitchTimerLists+0xc0>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	3304      	adds	r3, #4
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd fed1 	bl	800cf88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6a1b      	ldr	r3, [r3, #32]
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d02e      	beq.n	800f25a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	699b      	ldr	r3, [r3, #24]
 800f200:	693a      	ldr	r2, [r7, #16]
 800f202:	4413      	add	r3, r2
 800f204:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d90e      	bls.n	800f22c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f21a:	4b19      	ldr	r3, [pc, #100]	; (800f280 <prvSwitchTimerLists+0xc0>)
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	3304      	adds	r3, #4
 800f222:	4619      	mov	r1, r3
 800f224:	4610      	mov	r0, r2
 800f226:	f7fd fe76 	bl	800cf16 <vListInsert>
 800f22a:	e016      	b.n	800f25a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f22c:	2300      	movs	r3, #0
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	2300      	movs	r3, #0
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	2100      	movs	r1, #0
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f7ff fd60 	bl	800ecfc <xTimerGenericCommand>
 800f23c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10a      	bne.n	800f25a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	603b      	str	r3, [r7, #0]
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f25a:	4b09      	ldr	r3, [pc, #36]	; (800f280 <prvSwitchTimerLists+0xc0>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1b1      	bne.n	800f1c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f264:	4b06      	ldr	r3, [pc, #24]	; (800f280 <prvSwitchTimerLists+0xc0>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f26a:	4b06      	ldr	r3, [pc, #24]	; (800f284 <prvSwitchTimerLists+0xc4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a04      	ldr	r2, [pc, #16]	; (800f280 <prvSwitchTimerLists+0xc0>)
 800f270:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f272:	4a04      	ldr	r2, [pc, #16]	; (800f284 <prvSwitchTimerLists+0xc4>)
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	6013      	str	r3, [r2, #0]
}
 800f278:	bf00      	nop
 800f27a:	3718      	adds	r7, #24
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20013de4 	.word	0x20013de4
 800f284:	20013de8 	.word	0x20013de8

0800f288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f28e:	f000 f969 	bl	800f564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f292:	4b15      	ldr	r3, [pc, #84]	; (800f2e8 <prvCheckForValidListAndQueue+0x60>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d120      	bne.n	800f2dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f29a:	4814      	ldr	r0, [pc, #80]	; (800f2ec <prvCheckForValidListAndQueue+0x64>)
 800f29c:	f7fd fdea 	bl	800ce74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2a0:	4813      	ldr	r0, [pc, #76]	; (800f2f0 <prvCheckForValidListAndQueue+0x68>)
 800f2a2:	f7fd fde7 	bl	800ce74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2a6:	4b13      	ldr	r3, [pc, #76]	; (800f2f4 <prvCheckForValidListAndQueue+0x6c>)
 800f2a8:	4a10      	ldr	r2, [pc, #64]	; (800f2ec <prvCheckForValidListAndQueue+0x64>)
 800f2aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2ac:	4b12      	ldr	r3, [pc, #72]	; (800f2f8 <prvCheckForValidListAndQueue+0x70>)
 800f2ae:	4a10      	ldr	r2, [pc, #64]	; (800f2f0 <prvCheckForValidListAndQueue+0x68>)
 800f2b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	4b11      	ldr	r3, [pc, #68]	; (800f2fc <prvCheckForValidListAndQueue+0x74>)
 800f2b8:	4a11      	ldr	r2, [pc, #68]	; (800f300 <prvCheckForValidListAndQueue+0x78>)
 800f2ba:	2110      	movs	r1, #16
 800f2bc:	200a      	movs	r0, #10
 800f2be:	f7fd fef5 	bl	800d0ac <xQueueGenericCreateStatic>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	4a08      	ldr	r2, [pc, #32]	; (800f2e8 <prvCheckForValidListAndQueue+0x60>)
 800f2c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2c8:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <prvCheckForValidListAndQueue+0x60>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d005      	beq.n	800f2dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2d0:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <prvCheckForValidListAndQueue+0x60>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	490b      	ldr	r1, [pc, #44]	; (800f304 <prvCheckForValidListAndQueue+0x7c>)
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fe fb48 	bl	800d96c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2dc:	f000 f972 	bl	800f5c4 <vPortExitCritical>
}
 800f2e0:	bf00      	nop
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20013dec 	.word	0x20013dec
 800f2ec:	20013dbc 	.word	0x20013dbc
 800f2f0:	20013dd0 	.word	0x20013dd0
 800f2f4:	20013de4 	.word	0x20013de4
 800f2f8:	20013de8 	.word	0x20013de8
 800f2fc:	20013e98 	.word	0x20013e98
 800f300:	20013df8 	.word	0x20013df8
 800f304:	080110ac 	.word	0x080110ac

0800f308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	3b04      	subs	r3, #4
 800f318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3b04      	subs	r3, #4
 800f326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	f023 0201 	bic.w	r2, r3, #1
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	3b04      	subs	r3, #4
 800f336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f338:	4a0c      	ldr	r2, [pc, #48]	; (800f36c <pxPortInitialiseStack+0x64>)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	3b14      	subs	r3, #20
 800f342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3b04      	subs	r3, #4
 800f34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f06f 0202 	mvn.w	r2, #2
 800f356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3b20      	subs	r3, #32
 800f35c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f35e:	68fb      	ldr	r3, [r7, #12]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	0800f371 	.word	0x0800f371

0800f370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f37a:	4b12      	ldr	r3, [pc, #72]	; (800f3c4 <prvTaskExitError+0x54>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f382:	d00a      	beq.n	800f39a <prvTaskExitError+0x2a>
	__asm volatile
 800f384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	60fb      	str	r3, [r7, #12]
}
 800f396:	bf00      	nop
 800f398:	e7fe      	b.n	800f398 <prvTaskExitError+0x28>
	__asm volatile
 800f39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	60bb      	str	r3, [r7, #8]
}
 800f3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f3ae:	bf00      	nop
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d0fc      	beq.n	800f3b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f3b6:	bf00      	nop
 800f3b8:	bf00      	nop
 800f3ba:	3714      	adds	r7, #20
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr
 800f3c4:	20000198 	.word	0x20000198
	...

0800f3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f3d0:	4b07      	ldr	r3, [pc, #28]	; (800f3f0 <pxCurrentTCBConst2>)
 800f3d2:	6819      	ldr	r1, [r3, #0]
 800f3d4:	6808      	ldr	r0, [r1, #0]
 800f3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3da:	f380 8809 	msr	PSP, r0
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f04f 0000 	mov.w	r0, #0
 800f3e6:	f380 8811 	msr	BASEPRI, r0
 800f3ea:	4770      	bx	lr
 800f3ec:	f3af 8000 	nop.w

0800f3f0 <pxCurrentTCBConst2>:
 800f3f0:	200138bc 	.word	0x200138bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f3f4:	bf00      	nop
 800f3f6:	bf00      	nop

0800f3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f3f8:	4808      	ldr	r0, [pc, #32]	; (800f41c <prvPortStartFirstTask+0x24>)
 800f3fa:	6800      	ldr	r0, [r0, #0]
 800f3fc:	6800      	ldr	r0, [r0, #0]
 800f3fe:	f380 8808 	msr	MSP, r0
 800f402:	f04f 0000 	mov.w	r0, #0
 800f406:	f380 8814 	msr	CONTROL, r0
 800f40a:	b662      	cpsie	i
 800f40c:	b661      	cpsie	f
 800f40e:	f3bf 8f4f 	dsb	sy
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	df00      	svc	0
 800f418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f41a:	bf00      	nop
 800f41c:	e000ed08 	.word	0xe000ed08

0800f420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f426:	4b46      	ldr	r3, [pc, #280]	; (800f540 <xPortStartScheduler+0x120>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a46      	ldr	r2, [pc, #280]	; (800f544 <xPortStartScheduler+0x124>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d10a      	bne.n	800f446 <xPortStartScheduler+0x26>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	613b      	str	r3, [r7, #16]
}
 800f442:	bf00      	nop
 800f444:	e7fe      	b.n	800f444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f446:	4b3e      	ldr	r3, [pc, #248]	; (800f540 <xPortStartScheduler+0x120>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4a3f      	ldr	r2, [pc, #252]	; (800f548 <xPortStartScheduler+0x128>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d10a      	bne.n	800f466 <xPortStartScheduler+0x46>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	60fb      	str	r3, [r7, #12]
}
 800f462:	bf00      	nop
 800f464:	e7fe      	b.n	800f464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f466:	4b39      	ldr	r3, [pc, #228]	; (800f54c <xPortStartScheduler+0x12c>)
 800f468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	22ff      	movs	r2, #255	; 0xff
 800f476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	b2db      	uxtb	r3, r3
 800f484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f488:	b2da      	uxtb	r2, r3
 800f48a:	4b31      	ldr	r3, [pc, #196]	; (800f550 <xPortStartScheduler+0x130>)
 800f48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f48e:	4b31      	ldr	r3, [pc, #196]	; (800f554 <xPortStartScheduler+0x134>)
 800f490:	2207      	movs	r2, #7
 800f492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f494:	e009      	b.n	800f4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f496:	4b2f      	ldr	r3, [pc, #188]	; (800f554 <xPortStartScheduler+0x134>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	4a2d      	ldr	r2, [pc, #180]	; (800f554 <xPortStartScheduler+0x134>)
 800f49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f4a0:	78fb      	ldrb	r3, [r7, #3]
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4aa:	78fb      	ldrb	r3, [r7, #3]
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b2:	2b80      	cmp	r3, #128	; 0x80
 800f4b4:	d0ef      	beq.n	800f496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f4b6:	4b27      	ldr	r3, [pc, #156]	; (800f554 <xPortStartScheduler+0x134>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f1c3 0307 	rsb	r3, r3, #7
 800f4be:	2b04      	cmp	r3, #4
 800f4c0:	d00a      	beq.n	800f4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	60bb      	str	r3, [r7, #8]
}
 800f4d4:	bf00      	nop
 800f4d6:	e7fe      	b.n	800f4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f4d8:	4b1e      	ldr	r3, [pc, #120]	; (800f554 <xPortStartScheduler+0x134>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	021b      	lsls	r3, r3, #8
 800f4de:	4a1d      	ldr	r2, [pc, #116]	; (800f554 <xPortStartScheduler+0x134>)
 800f4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f4e2:	4b1c      	ldr	r3, [pc, #112]	; (800f554 <xPortStartScheduler+0x134>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f4ea:	4a1a      	ldr	r2, [pc, #104]	; (800f554 <xPortStartScheduler+0x134>)
 800f4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f4f6:	4b18      	ldr	r3, [pc, #96]	; (800f558 <xPortStartScheduler+0x138>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a17      	ldr	r2, [pc, #92]	; (800f558 <xPortStartScheduler+0x138>)
 800f4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f502:	4b15      	ldr	r3, [pc, #84]	; (800f558 <xPortStartScheduler+0x138>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4a14      	ldr	r2, [pc, #80]	; (800f558 <xPortStartScheduler+0x138>)
 800f508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f50e:	f000 f8dd 	bl	800f6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f512:	4b12      	ldr	r3, [pc, #72]	; (800f55c <xPortStartScheduler+0x13c>)
 800f514:	2200      	movs	r2, #0
 800f516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f518:	f000 f8fc 	bl	800f714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f51c:	4b10      	ldr	r3, [pc, #64]	; (800f560 <xPortStartScheduler+0x140>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a0f      	ldr	r2, [pc, #60]	; (800f560 <xPortStartScheduler+0x140>)
 800f522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f528:	f7ff ff66 	bl	800f3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f52c:	f7fe febc 	bl	800e2a8 <vTaskSwitchContext>
	prvTaskExitError();
 800f530:	f7ff ff1e 	bl	800f370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	e000ed00 	.word	0xe000ed00
 800f544:	410fc271 	.word	0x410fc271
 800f548:	410fc270 	.word	0x410fc270
 800f54c:	e000e400 	.word	0xe000e400
 800f550:	20013ee8 	.word	0x20013ee8
 800f554:	20013eec 	.word	0x20013eec
 800f558:	e000ed20 	.word	0xe000ed20
 800f55c:	20000198 	.word	0x20000198
 800f560:	e000ef34 	.word	0xe000ef34

0800f564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
	__asm volatile
 800f56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56e:	f383 8811 	msr	BASEPRI, r3
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	607b      	str	r3, [r7, #4]
}
 800f57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f57e:	4b0f      	ldr	r3, [pc, #60]	; (800f5bc <vPortEnterCritical+0x58>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	4a0d      	ldr	r2, [pc, #52]	; (800f5bc <vPortEnterCritical+0x58>)
 800f586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f588:	4b0c      	ldr	r3, [pc, #48]	; (800f5bc <vPortEnterCritical+0x58>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d10f      	bne.n	800f5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f590:	4b0b      	ldr	r3, [pc, #44]	; (800f5c0 <vPortEnterCritical+0x5c>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	b2db      	uxtb	r3, r3
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59e:	f383 8811 	msr	BASEPRI, r3
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	603b      	str	r3, [r7, #0]
}
 800f5ac:	bf00      	nop
 800f5ae:	e7fe      	b.n	800f5ae <vPortEnterCritical+0x4a>
	}
}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	20000198 	.word	0x20000198
 800f5c0:	e000ed04 	.word	0xe000ed04

0800f5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f5ca:	4b12      	ldr	r3, [pc, #72]	; (800f614 <vPortExitCritical+0x50>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10a      	bne.n	800f5e8 <vPortExitCritical+0x24>
	__asm volatile
 800f5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d6:	f383 8811 	msr	BASEPRI, r3
 800f5da:	f3bf 8f6f 	isb	sy
 800f5de:	f3bf 8f4f 	dsb	sy
 800f5e2:	607b      	str	r3, [r7, #4]
}
 800f5e4:	bf00      	nop
 800f5e6:	e7fe      	b.n	800f5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <vPortExitCritical+0x50>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	4a09      	ldr	r2, [pc, #36]	; (800f614 <vPortExitCritical+0x50>)
 800f5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f5f2:	4b08      	ldr	r3, [pc, #32]	; (800f614 <vPortExitCritical+0x50>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <vPortExitCritical+0x42>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	f383 8811 	msr	BASEPRI, r3
}
 800f604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f606:	bf00      	nop
 800f608:	370c      	adds	r7, #12
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	20000198 	.word	0x20000198
	...

0800f620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f620:	f3ef 8009 	mrs	r0, PSP
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	4b15      	ldr	r3, [pc, #84]	; (800f680 <pxCurrentTCBConst>)
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	f01e 0f10 	tst.w	lr, #16
 800f630:	bf08      	it	eq
 800f632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63a:	6010      	str	r0, [r2, #0]
 800f63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f644:	f380 8811 	msr	BASEPRI, r0
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f7fe fe2a 	bl	800e2a8 <vTaskSwitchContext>
 800f654:	f04f 0000 	mov.w	r0, #0
 800f658:	f380 8811 	msr	BASEPRI, r0
 800f65c:	bc09      	pop	{r0, r3}
 800f65e:	6819      	ldr	r1, [r3, #0]
 800f660:	6808      	ldr	r0, [r1, #0]
 800f662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f666:	f01e 0f10 	tst.w	lr, #16
 800f66a:	bf08      	it	eq
 800f66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f670:	f380 8809 	msr	PSP, r0
 800f674:	f3bf 8f6f 	isb	sy
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	f3af 8000 	nop.w

0800f680 <pxCurrentTCBConst>:
 800f680:	200138bc 	.word	0x200138bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f684:	bf00      	nop
 800f686:	bf00      	nop

0800f688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
	__asm volatile
 800f68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f692:	f383 8811 	msr	BASEPRI, r3
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	607b      	str	r3, [r7, #4]
}
 800f6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f6a2:	f7fe fd47 	bl	800e134 <xTaskIncrementTick>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d003      	beq.n	800f6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f6ac:	4b06      	ldr	r3, [pc, #24]	; (800f6c8 <xPortSysTickHandler+0x40>)
 800f6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6b2:	601a      	str	r2, [r3, #0]
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	f383 8811 	msr	BASEPRI, r3
}
 800f6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f6c0:	bf00      	nop
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	e000ed04 	.word	0xe000ed04

0800f6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f6d0:	4b0b      	ldr	r3, [pc, #44]	; (800f700 <vPortSetupTimerInterrupt+0x34>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f6d6:	4b0b      	ldr	r3, [pc, #44]	; (800f704 <vPortSetupTimerInterrupt+0x38>)
 800f6d8:	2200      	movs	r2, #0
 800f6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f6dc:	4b0a      	ldr	r3, [pc, #40]	; (800f708 <vPortSetupTimerInterrupt+0x3c>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a0a      	ldr	r2, [pc, #40]	; (800f70c <vPortSetupTimerInterrupt+0x40>)
 800f6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6e6:	099b      	lsrs	r3, r3, #6
 800f6e8:	4a09      	ldr	r2, [pc, #36]	; (800f710 <vPortSetupTimerInterrupt+0x44>)
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f6ee:	4b04      	ldr	r3, [pc, #16]	; (800f700 <vPortSetupTimerInterrupt+0x34>)
 800f6f0:	2207      	movs	r2, #7
 800f6f2:	601a      	str	r2, [r3, #0]
}
 800f6f4:	bf00      	nop
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	e000e010 	.word	0xe000e010
 800f704:	e000e018 	.word	0xe000e018
 800f708:	2000007c 	.word	0x2000007c
 800f70c:	10624dd3 	.word	0x10624dd3
 800f710:	e000e014 	.word	0xe000e014

0800f714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f724 <vPortEnableVFP+0x10>
 800f718:	6801      	ldr	r1, [r0, #0]
 800f71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f71e:	6001      	str	r1, [r0, #0]
 800f720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f722:	bf00      	nop
 800f724:	e000ed88 	.word	0xe000ed88

0800f728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f72e:	f3ef 8305 	mrs	r3, IPSR
 800f732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2b0f      	cmp	r3, #15
 800f738:	d914      	bls.n	800f764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f73a:	4a17      	ldr	r2, [pc, #92]	; (800f798 <vPortValidateInterruptPriority+0x70>)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	4413      	add	r3, r2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f744:	4b15      	ldr	r3, [pc, #84]	; (800f79c <vPortValidateInterruptPriority+0x74>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	7afa      	ldrb	r2, [r7, #11]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d20a      	bcs.n	800f764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	607b      	str	r3, [r7, #4]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f764:	4b0e      	ldr	r3, [pc, #56]	; (800f7a0 <vPortValidateInterruptPriority+0x78>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f76c:	4b0d      	ldr	r3, [pc, #52]	; (800f7a4 <vPortValidateInterruptPriority+0x7c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	429a      	cmp	r2, r3
 800f772:	d90a      	bls.n	800f78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f778:	f383 8811 	msr	BASEPRI, r3
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f3bf 8f4f 	dsb	sy
 800f784:	603b      	str	r3, [r7, #0]
}
 800f786:	bf00      	nop
 800f788:	e7fe      	b.n	800f788 <vPortValidateInterruptPriority+0x60>
	}
 800f78a:	bf00      	nop
 800f78c:	3714      	adds	r7, #20
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr
 800f796:	bf00      	nop
 800f798:	e000e3f0 	.word	0xe000e3f0
 800f79c:	20013ee8 	.word	0x20013ee8
 800f7a0:	e000ed0c 	.word	0xe000ed0c
 800f7a4:	20013eec 	.word	0x20013eec

0800f7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	; 0x28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f7b4:	f7fe fc02 	bl	800dfbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f7b8:	4b5b      	ldr	r3, [pc, #364]	; (800f928 <pvPortMalloc+0x180>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d101      	bne.n	800f7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f7c0:	f000 f920 	bl	800fa04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f7c4:	4b59      	ldr	r3, [pc, #356]	; (800f92c <pvPortMalloc+0x184>)
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4013      	ands	r3, r2
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f040 8093 	bne.w	800f8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d01d      	beq.n	800f814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f7d8:	2208      	movs	r2, #8
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4413      	add	r3, r2
 800f7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f003 0307 	and.w	r3, r3, #7
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d014      	beq.n	800f814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f023 0307 	bic.w	r3, r3, #7
 800f7f0:	3308      	adds	r3, #8
 800f7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f003 0307 	and.w	r3, r3, #7
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00a      	beq.n	800f814 <pvPortMalloc+0x6c>
	__asm volatile
 800f7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f802:	f383 8811 	msr	BASEPRI, r3
 800f806:	f3bf 8f6f 	isb	sy
 800f80a:	f3bf 8f4f 	dsb	sy
 800f80e:	617b      	str	r3, [r7, #20]
}
 800f810:	bf00      	nop
 800f812:	e7fe      	b.n	800f812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d06e      	beq.n	800f8f8 <pvPortMalloc+0x150>
 800f81a:	4b45      	ldr	r3, [pc, #276]	; (800f930 <pvPortMalloc+0x188>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d869      	bhi.n	800f8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f824:	4b43      	ldr	r3, [pc, #268]	; (800f934 <pvPortMalloc+0x18c>)
 800f826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f828:	4b42      	ldr	r3, [pc, #264]	; (800f934 <pvPortMalloc+0x18c>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f82e:	e004      	b.n	800f83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	429a      	cmp	r2, r3
 800f842:	d903      	bls.n	800f84c <pvPortMalloc+0xa4>
 800f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d1f1      	bne.n	800f830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f84c:	4b36      	ldr	r3, [pc, #216]	; (800f928 <pvPortMalloc+0x180>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f852:	429a      	cmp	r2, r3
 800f854:	d050      	beq.n	800f8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f856:	6a3b      	ldr	r3, [r7, #32]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2208      	movs	r2, #8
 800f85c:	4413      	add	r3, r2
 800f85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	6a3b      	ldr	r3, [r7, #32]
 800f866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86a:	685a      	ldr	r2, [r3, #4]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	1ad2      	subs	r2, r2, r3
 800f870:	2308      	movs	r3, #8
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	429a      	cmp	r2, r3
 800f876:	d91f      	bls.n	800f8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4413      	add	r3, r2
 800f87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	f003 0307 	and.w	r3, r3, #7
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00a      	beq.n	800f8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800f88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88e:	f383 8811 	msr	BASEPRI, r3
 800f892:	f3bf 8f6f 	isb	sy
 800f896:	f3bf 8f4f 	dsb	sy
 800f89a:	613b      	str	r3, [r7, #16]
}
 800f89c:	bf00      	nop
 800f89e:	e7fe      	b.n	800f89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a2:	685a      	ldr	r2, [r3, #4]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	1ad2      	subs	r2, r2, r3
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f8b2:	69b8      	ldr	r0, [r7, #24]
 800f8b4:	f000 f908 	bl	800fac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f8b8:	4b1d      	ldr	r3, [pc, #116]	; (800f930 <pvPortMalloc+0x188>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	4a1b      	ldr	r2, [pc, #108]	; (800f930 <pvPortMalloc+0x188>)
 800f8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f8c6:	4b1a      	ldr	r3, [pc, #104]	; (800f930 <pvPortMalloc+0x188>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	4b1b      	ldr	r3, [pc, #108]	; (800f938 <pvPortMalloc+0x190>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d203      	bcs.n	800f8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f8d2:	4b17      	ldr	r3, [pc, #92]	; (800f930 <pvPortMalloc+0x188>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a18      	ldr	r2, [pc, #96]	; (800f938 <pvPortMalloc+0x190>)
 800f8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	685a      	ldr	r2, [r3, #4]
 800f8de:	4b13      	ldr	r3, [pc, #76]	; (800f92c <pvPortMalloc+0x184>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	431a      	orrs	r2, r3
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f8ee:	4b13      	ldr	r3, [pc, #76]	; (800f93c <pvPortMalloc+0x194>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	4a11      	ldr	r2, [pc, #68]	; (800f93c <pvPortMalloc+0x194>)
 800f8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f8f8:	f7fe fb6e 	bl	800dfd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	f003 0307 	and.w	r3, r3, #7
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00a      	beq.n	800f91c <pvPortMalloc+0x174>
	__asm volatile
 800f906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	60fb      	str	r3, [r7, #12]
}
 800f918:	bf00      	nop
 800f91a:	e7fe      	b.n	800f91a <pvPortMalloc+0x172>
	return pvReturn;
 800f91c:	69fb      	ldr	r3, [r7, #28]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3728      	adds	r7, #40	; 0x28
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	20017af8 	.word	0x20017af8
 800f92c:	20017b0c 	.word	0x20017b0c
 800f930:	20017afc 	.word	0x20017afc
 800f934:	20017af0 	.word	0x20017af0
 800f938:	20017b00 	.word	0x20017b00
 800f93c:	20017b04 	.word	0x20017b04

0800f940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d04d      	beq.n	800f9ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f952:	2308      	movs	r3, #8
 800f954:	425b      	negs	r3, r3
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	4413      	add	r3, r2
 800f95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	685a      	ldr	r2, [r3, #4]
 800f964:	4b24      	ldr	r3, [pc, #144]	; (800f9f8 <vPortFree+0xb8>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4013      	ands	r3, r2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10a      	bne.n	800f984 <vPortFree+0x44>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	60fb      	str	r3, [r7, #12]
}
 800f980:	bf00      	nop
 800f982:	e7fe      	b.n	800f982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00a      	beq.n	800f9a2 <vPortFree+0x62>
	__asm volatile
 800f98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f990:	f383 8811 	msr	BASEPRI, r3
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	f3bf 8f4f 	dsb	sy
 800f99c:	60bb      	str	r3, [r7, #8]
}
 800f99e:	bf00      	nop
 800f9a0:	e7fe      	b.n	800f9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	685a      	ldr	r2, [r3, #4]
 800f9a6:	4b14      	ldr	r3, [pc, #80]	; (800f9f8 <vPortFree+0xb8>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4013      	ands	r3, r2
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d01e      	beq.n	800f9ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d11a      	bne.n	800f9ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	685a      	ldr	r2, [r3, #4]
 800f9bc:	4b0e      	ldr	r3, [pc, #56]	; (800f9f8 <vPortFree+0xb8>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	43db      	mvns	r3, r3
 800f9c2:	401a      	ands	r2, r3
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f9c8:	f7fe faf8 	bl	800dfbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	685a      	ldr	r2, [r3, #4]
 800f9d0:	4b0a      	ldr	r3, [pc, #40]	; (800f9fc <vPortFree+0xbc>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	4a09      	ldr	r2, [pc, #36]	; (800f9fc <vPortFree+0xbc>)
 800f9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f9da:	6938      	ldr	r0, [r7, #16]
 800f9dc:	f000 f874 	bl	800fac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <vPortFree+0xc0>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	4a06      	ldr	r2, [pc, #24]	; (800fa00 <vPortFree+0xc0>)
 800f9e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f9ea:	f7fe faf5 	bl	800dfd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f9ee:	bf00      	nop
 800f9f0:	3718      	adds	r7, #24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	20017b0c 	.word	0x20017b0c
 800f9fc:	20017afc 	.word	0x20017afc
 800fa00:	20017b08 	.word	0x20017b08

0800fa04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa04:	b480      	push	{r7}
 800fa06:	b085      	sub	sp, #20
 800fa08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fa0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa10:	4b27      	ldr	r3, [pc, #156]	; (800fab0 <prvHeapInit+0xac>)
 800fa12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f003 0307 	and.w	r3, r3, #7
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00c      	beq.n	800fa38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3307      	adds	r3, #7
 800fa22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f023 0307 	bic.w	r3, r3, #7
 800fa2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	4a1f      	ldr	r2, [pc, #124]	; (800fab0 <prvHeapInit+0xac>)
 800fa34:	4413      	add	r3, r2
 800fa36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fa3c:	4a1d      	ldr	r2, [pc, #116]	; (800fab4 <prvHeapInit+0xb0>)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fa42:	4b1c      	ldr	r3, [pc, #112]	; (800fab4 <prvHeapInit+0xb0>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fa50:	2208      	movs	r2, #8
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	1a9b      	subs	r3, r3, r2
 800fa56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f023 0307 	bic.w	r3, r3, #7
 800fa5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	4a15      	ldr	r2, [pc, #84]	; (800fab8 <prvHeapInit+0xb4>)
 800fa64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fa66:	4b14      	ldr	r3, [pc, #80]	; (800fab8 <prvHeapInit+0xb4>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fa6e:	4b12      	ldr	r3, [pc, #72]	; (800fab8 <prvHeapInit+0xb4>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2200      	movs	r2, #0
 800fa74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	1ad2      	subs	r2, r2, r3
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fa84:	4b0c      	ldr	r3, [pc, #48]	; (800fab8 <prvHeapInit+0xb4>)
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	4a0a      	ldr	r2, [pc, #40]	; (800fabc <prvHeapInit+0xb8>)
 800fa92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	4a09      	ldr	r2, [pc, #36]	; (800fac0 <prvHeapInit+0xbc>)
 800fa9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa9c:	4b09      	ldr	r3, [pc, #36]	; (800fac4 <prvHeapInit+0xc0>)
 800fa9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800faa2:	601a      	str	r2, [r3, #0]
}
 800faa4:	bf00      	nop
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	20013ef0 	.word	0x20013ef0
 800fab4:	20017af0 	.word	0x20017af0
 800fab8:	20017af8 	.word	0x20017af8
 800fabc:	20017b00 	.word	0x20017b00
 800fac0:	20017afc 	.word	0x20017afc
 800fac4:	20017b0c 	.word	0x20017b0c

0800fac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fad0:	4b28      	ldr	r3, [pc, #160]	; (800fb74 <prvInsertBlockIntoFreeList+0xac>)
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	e002      	b.n	800fadc <prvInsertBlockIntoFreeList+0x14>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	60fb      	str	r3, [r7, #12]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d8f7      	bhi.n	800fad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	4413      	add	r3, r2
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d108      	bne.n	800fb0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	685a      	ldr	r2, [r3, #4]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	441a      	add	r2, r3
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	441a      	add	r2, r3
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d118      	bne.n	800fb50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	4b15      	ldr	r3, [pc, #84]	; (800fb78 <prvInsertBlockIntoFreeList+0xb0>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d00d      	beq.n	800fb46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	441a      	add	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	601a      	str	r2, [r3, #0]
 800fb44:	e008      	b.n	800fb58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fb46:	4b0c      	ldr	r3, [pc, #48]	; (800fb78 <prvInsertBlockIntoFreeList+0xb0>)
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	601a      	str	r2, [r3, #0]
 800fb4e:	e003      	b.n	800fb58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d002      	beq.n	800fb66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb66:	bf00      	nop
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	20017af0 	.word	0x20017af0
 800fb78:	20017af8 	.word	0x20017af8

0800fb7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb80:	2200      	movs	r2, #0
 800fb82:	4912      	ldr	r1, [pc, #72]	; (800fbcc <MX_USB_DEVICE_Init+0x50>)
 800fb84:	4812      	ldr	r0, [pc, #72]	; (800fbd0 <MX_USB_DEVICE_Init+0x54>)
 800fb86:	f7fb fddb 	bl	800b740 <USBD_Init>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d001      	beq.n	800fb94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fb90:	f7f2 fb94 	bl	80022bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fb94:	490f      	ldr	r1, [pc, #60]	; (800fbd4 <MX_USB_DEVICE_Init+0x58>)
 800fb96:	480e      	ldr	r0, [pc, #56]	; (800fbd0 <MX_USB_DEVICE_Init+0x54>)
 800fb98:	f7fb fe02 	bl	800b7a0 <USBD_RegisterClass>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fba2:	f7f2 fb8b 	bl	80022bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fba6:	490c      	ldr	r1, [pc, #48]	; (800fbd8 <MX_USB_DEVICE_Init+0x5c>)
 800fba8:	4809      	ldr	r0, [pc, #36]	; (800fbd0 <MX_USB_DEVICE_Init+0x54>)
 800fbaa:	f7fb fd23 	bl	800b5f4 <USBD_CDC_RegisterInterface>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fbb4:	f7f2 fb82 	bl	80022bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fbb8:	4805      	ldr	r0, [pc, #20]	; (800fbd0 <MX_USB_DEVICE_Init+0x54>)
 800fbba:	f7fb fe18 	bl	800b7ee <USBD_Start>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d001      	beq.n	800fbc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fbc4:	f7f2 fb7a 	bl	80022bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fbc8:	bf00      	nop
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	200001b0 	.word	0x200001b0
 800fbd0:	2001807c 	.word	0x2001807c
 800fbd4:	20000094 	.word	0x20000094
 800fbd8:	2000019c 	.word	0x2000019c

0800fbdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	4905      	ldr	r1, [pc, #20]	; (800fbf8 <CDC_Init_FS+0x1c>)
 800fbe4:	4805      	ldr	r0, [pc, #20]	; (800fbfc <CDC_Init_FS+0x20>)
 800fbe6:	f7fb fd1a 	bl	800b61e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fbea:	4905      	ldr	r1, [pc, #20]	; (800fc00 <CDC_Init_FS+0x24>)
 800fbec:	4803      	ldr	r0, [pc, #12]	; (800fbfc <CDC_Init_FS+0x20>)
 800fbee:	f7fb fd34 	bl	800b65a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fbf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	20018b4c 	.word	0x20018b4c
 800fbfc:	2001807c 	.word	0x2001807c
 800fc00:	2001834c 	.word	0x2001834c

0800fc04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc04:	b480      	push	{r7}
 800fc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	6039      	str	r1, [r7, #0]
 800fc1e:	71fb      	strb	r3, [r7, #7]
 800fc20:	4613      	mov	r3, r2
 800fc22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	2b23      	cmp	r3, #35	; 0x23
 800fc28:	d84a      	bhi.n	800fcc0 <CDC_Control_FS+0xac>
 800fc2a:	a201      	add	r2, pc, #4	; (adr r2, 800fc30 <CDC_Control_FS+0x1c>)
 800fc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc30:	0800fcc1 	.word	0x0800fcc1
 800fc34:	0800fcc1 	.word	0x0800fcc1
 800fc38:	0800fcc1 	.word	0x0800fcc1
 800fc3c:	0800fcc1 	.word	0x0800fcc1
 800fc40:	0800fcc1 	.word	0x0800fcc1
 800fc44:	0800fcc1 	.word	0x0800fcc1
 800fc48:	0800fcc1 	.word	0x0800fcc1
 800fc4c:	0800fcc1 	.word	0x0800fcc1
 800fc50:	0800fcc1 	.word	0x0800fcc1
 800fc54:	0800fcc1 	.word	0x0800fcc1
 800fc58:	0800fcc1 	.word	0x0800fcc1
 800fc5c:	0800fcc1 	.word	0x0800fcc1
 800fc60:	0800fcc1 	.word	0x0800fcc1
 800fc64:	0800fcc1 	.word	0x0800fcc1
 800fc68:	0800fcc1 	.word	0x0800fcc1
 800fc6c:	0800fcc1 	.word	0x0800fcc1
 800fc70:	0800fcc1 	.word	0x0800fcc1
 800fc74:	0800fcc1 	.word	0x0800fcc1
 800fc78:	0800fcc1 	.word	0x0800fcc1
 800fc7c:	0800fcc1 	.word	0x0800fcc1
 800fc80:	0800fcc1 	.word	0x0800fcc1
 800fc84:	0800fcc1 	.word	0x0800fcc1
 800fc88:	0800fcc1 	.word	0x0800fcc1
 800fc8c:	0800fcc1 	.word	0x0800fcc1
 800fc90:	0800fcc1 	.word	0x0800fcc1
 800fc94:	0800fcc1 	.word	0x0800fcc1
 800fc98:	0800fcc1 	.word	0x0800fcc1
 800fc9c:	0800fcc1 	.word	0x0800fcc1
 800fca0:	0800fcc1 	.word	0x0800fcc1
 800fca4:	0800fcc1 	.word	0x0800fcc1
 800fca8:	0800fcc1 	.word	0x0800fcc1
 800fcac:	0800fcc1 	.word	0x0800fcc1
 800fcb0:	0800fcc1 	.word	0x0800fcc1
 800fcb4:	0800fcc1 	.word	0x0800fcc1
 800fcb8:	0800fcc1 	.word	0x0800fcc1
 800fcbc:	0800fcc1 	.word	0x0800fcc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fcc0:	bf00      	nop
  }

  return (USBD_OK);
 800fcc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fcda:	6879      	ldr	r1, [r7, #4]
 800fcdc:	4808      	ldr	r0, [pc, #32]	; (800fd00 <CDC_Receive_FS+0x30>)
 800fcde:	f7fb fcbc 	bl	800b65a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fce2:	4807      	ldr	r0, [pc, #28]	; (800fd00 <CDC_Receive_FS+0x30>)
 800fce4:	f7fb fd02 	bl	800b6ec <USBD_CDC_ReceivePacket>
  CDC_Recive_Callback(Buf, Len[0]);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7f2 fa0e 	bl	8002110 <CDC_Recive_Callback>
  return (USBD_OK);
 800fcf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3708      	adds	r7, #8
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	2001807c 	.word	0x2001807c

0800fd04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fd14:	4b0d      	ldr	r3, [pc, #52]	; (800fd4c <CDC_Transmit_FS+0x48>)
 800fd16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e00b      	b.n	800fd42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fd2a:	887b      	ldrh	r3, [r7, #2]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	6879      	ldr	r1, [r7, #4]
 800fd30:	4806      	ldr	r0, [pc, #24]	; (800fd4c <CDC_Transmit_FS+0x48>)
 800fd32:	f7fb fc74 	bl	800b61e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fd36:	4805      	ldr	r0, [pc, #20]	; (800fd4c <CDC_Transmit_FS+0x48>)
 800fd38:	f7fb fca8 	bl	800b68c <USBD_CDC_TransmitPacket>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	2001807c 	.word	0x2001807c

0800fd50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b087      	sub	sp, #28
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	371c      	adds	r7, #28
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
	...

0800fd74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	6039      	str	r1, [r7, #0]
 800fd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2212      	movs	r2, #18
 800fd84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd86:	4b03      	ldr	r3, [pc, #12]	; (800fd94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	200001cc 	.word	0x200001cc

0800fd98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	4603      	mov	r3, r0
 800fda0:	6039      	str	r1, [r7, #0]
 800fda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	2204      	movs	r2, #4
 800fda8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fdaa:	4b03      	ldr	r3, [pc, #12]	; (800fdb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	200001e0 	.word	0x200001e0

0800fdbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	6039      	str	r1, [r7, #0]
 800fdc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fdc8:	79fb      	ldrb	r3, [r7, #7]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d105      	bne.n	800fdda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdce:	683a      	ldr	r2, [r7, #0]
 800fdd0:	4907      	ldr	r1, [pc, #28]	; (800fdf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdd2:	4808      	ldr	r0, [pc, #32]	; (800fdf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800fdd4:	f7fc fd3d 	bl	800c852 <USBD_GetString>
 800fdd8:	e004      	b.n	800fde4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdda:	683a      	ldr	r2, [r7, #0]
 800fddc:	4904      	ldr	r1, [pc, #16]	; (800fdf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdde:	4805      	ldr	r0, [pc, #20]	; (800fdf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800fde0:	f7fc fd37 	bl	800c852 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fde4:	4b02      	ldr	r3, [pc, #8]	; (800fdf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	2001934c 	.word	0x2001934c
 800fdf4:	080110b4 	.word	0x080110b4

0800fdf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	4603      	mov	r3, r0
 800fe00:	6039      	str	r1, [r7, #0]
 800fe02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe04:	683a      	ldr	r2, [r7, #0]
 800fe06:	4904      	ldr	r1, [pc, #16]	; (800fe18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe08:	4804      	ldr	r0, [pc, #16]	; (800fe1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe0a:	f7fc fd22 	bl	800c852 <USBD_GetString>
  return USBD_StrDesc;
 800fe0e:	4b02      	ldr	r3, [pc, #8]	; (800fe18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	2001934c 	.word	0x2001934c
 800fe1c:	080110cc 	.word	0x080110cc

0800fe20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	4603      	mov	r3, r0
 800fe28:	6039      	str	r1, [r7, #0]
 800fe2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	221a      	movs	r2, #26
 800fe30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe32:	f000 f843 	bl	800febc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe36:	4b02      	ldr	r3, [pc, #8]	; (800fe40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	200001e4 	.word	0x200001e4

0800fe44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	6039      	str	r1, [r7, #0]
 800fe4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d105      	bne.n	800fe62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	4907      	ldr	r1, [pc, #28]	; (800fe78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe5a:	4808      	ldr	r0, [pc, #32]	; (800fe7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe5c:	f7fc fcf9 	bl	800c852 <USBD_GetString>
 800fe60:	e004      	b.n	800fe6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe62:	683a      	ldr	r2, [r7, #0]
 800fe64:	4904      	ldr	r1, [pc, #16]	; (800fe78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe66:	4805      	ldr	r0, [pc, #20]	; (800fe7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe68:	f7fc fcf3 	bl	800c852 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe6c:	4b02      	ldr	r3, [pc, #8]	; (800fe78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	2001934c 	.word	0x2001934c
 800fe7c:	080110e0 	.word	0x080110e0

0800fe80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	4603      	mov	r3, r0
 800fe88:	6039      	str	r1, [r7, #0]
 800fe8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe8c:	79fb      	ldrb	r3, [r7, #7]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d105      	bne.n	800fe9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe92:	683a      	ldr	r2, [r7, #0]
 800fe94:	4907      	ldr	r1, [pc, #28]	; (800feb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe96:	4808      	ldr	r0, [pc, #32]	; (800feb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe98:	f7fc fcdb 	bl	800c852 <USBD_GetString>
 800fe9c:	e004      	b.n	800fea8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe9e:	683a      	ldr	r2, [r7, #0]
 800fea0:	4904      	ldr	r1, [pc, #16]	; (800feb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fea2:	4805      	ldr	r0, [pc, #20]	; (800feb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fea4:	f7fc fcd5 	bl	800c852 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fea8:	4b02      	ldr	r3, [pc, #8]	; (800feb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	2001934c 	.word	0x2001934c
 800feb8:	080110ec 	.word	0x080110ec

0800febc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fec2:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <Get_SerialNum+0x44>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fec8:	4b0e      	ldr	r3, [pc, #56]	; (800ff04 <Get_SerialNum+0x48>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fece:	4b0e      	ldr	r3, [pc, #56]	; (800ff08 <Get_SerialNum+0x4c>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fed4:	68fa      	ldr	r2, [r7, #12]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4413      	add	r3, r2
 800feda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d009      	beq.n	800fef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fee2:	2208      	movs	r2, #8
 800fee4:	4909      	ldr	r1, [pc, #36]	; (800ff0c <Get_SerialNum+0x50>)
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f000 f814 	bl	800ff14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800feec:	2204      	movs	r2, #4
 800feee:	4908      	ldr	r1, [pc, #32]	; (800ff10 <Get_SerialNum+0x54>)
 800fef0:	68b8      	ldr	r0, [r7, #8]
 800fef2:	f000 f80f 	bl	800ff14 <IntToUnicode>
  }
}
 800fef6:	bf00      	nop
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	1fff7a10 	.word	0x1fff7a10
 800ff04:	1fff7a14 	.word	0x1fff7a14
 800ff08:	1fff7a18 	.word	0x1fff7a18
 800ff0c:	200001e6 	.word	0x200001e6
 800ff10:	200001f6 	.word	0x200001f6

0800ff14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b087      	sub	sp, #28
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff22:	2300      	movs	r3, #0
 800ff24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff26:	2300      	movs	r3, #0
 800ff28:	75fb      	strb	r3, [r7, #23]
 800ff2a:	e027      	b.n	800ff7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	0f1b      	lsrs	r3, r3, #28
 800ff30:	2b09      	cmp	r3, #9
 800ff32:	d80b      	bhi.n	800ff4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	0f1b      	lsrs	r3, r3, #28
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	7dfb      	ldrb	r3, [r7, #23]
 800ff3c:	005b      	lsls	r3, r3, #1
 800ff3e:	4619      	mov	r1, r3
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	440b      	add	r3, r1
 800ff44:	3230      	adds	r2, #48	; 0x30
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	701a      	strb	r2, [r3, #0]
 800ff4a:	e00a      	b.n	800ff62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	0f1b      	lsrs	r3, r3, #28
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	7dfb      	ldrb	r3, [r7, #23]
 800ff54:	005b      	lsls	r3, r3, #1
 800ff56:	4619      	mov	r1, r3
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	440b      	add	r3, r1
 800ff5c:	3237      	adds	r2, #55	; 0x37
 800ff5e:	b2d2      	uxtb	r2, r2
 800ff60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	011b      	lsls	r3, r3, #4
 800ff66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ff68:	7dfb      	ldrb	r3, [r7, #23]
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	4413      	add	r3, r2
 800ff72:	2200      	movs	r2, #0
 800ff74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	75fb      	strb	r3, [r7, #23]
 800ff7c:	7dfa      	ldrb	r2, [r7, #23]
 800ff7e:	79fb      	ldrb	r3, [r7, #7]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d3d3      	bcc.n	800ff2c <IntToUnicode+0x18>
  }
}
 800ff84:	bf00      	nop
 800ff86:	bf00      	nop
 800ff88:	371c      	adds	r7, #28
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
	...

0800ff94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b08a      	sub	sp, #40	; 0x28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff9c:	f107 0314 	add.w	r3, r7, #20
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	605a      	str	r2, [r3, #4]
 800ffa6:	609a      	str	r2, [r3, #8]
 800ffa8:	60da      	str	r2, [r3, #12]
 800ffaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffb4:	d13a      	bne.n	801002c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	613b      	str	r3, [r7, #16]
 800ffba:	4b1e      	ldr	r3, [pc, #120]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 800ffbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffbe:	4a1d      	ldr	r2, [pc, #116]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 800ffc0:	f043 0301 	orr.w	r3, r3, #1
 800ffc4:	6313      	str	r3, [r2, #48]	; 0x30
 800ffc6:	4b1b      	ldr	r3, [pc, #108]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 800ffc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	613b      	str	r3, [r7, #16]
 800ffd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ffd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ffd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ffd8:	2302      	movs	r3, #2
 800ffda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffe0:	2303      	movs	r3, #3
 800ffe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ffe4:	230a      	movs	r3, #10
 800ffe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ffe8:	f107 0314 	add.w	r3, r7, #20
 800ffec:	4619      	mov	r1, r3
 800ffee:	4812      	ldr	r0, [pc, #72]	; (8010038 <HAL_PCD_MspInit+0xa4>)
 800fff0:	f7f5 f85a 	bl	80050a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fff4:	4b0f      	ldr	r3, [pc, #60]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 800fff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fff8:	4a0e      	ldr	r2, [pc, #56]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 800fffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fffe:	6353      	str	r3, [r2, #52]	; 0x34
 8010000:	2300      	movs	r3, #0
 8010002:	60fb      	str	r3, [r7, #12]
 8010004:	4b0b      	ldr	r3, [pc, #44]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 8010006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010008:	4a0a      	ldr	r2, [pc, #40]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 801000a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801000e:	6453      	str	r3, [r2, #68]	; 0x44
 8010010:	4b08      	ldr	r3, [pc, #32]	; (8010034 <HAL_PCD_MspInit+0xa0>)
 8010012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010018:	60fb      	str	r3, [r7, #12]
 801001a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801001c:	2200      	movs	r2, #0
 801001e:	2105      	movs	r1, #5
 8010020:	2043      	movs	r0, #67	; 0x43
 8010022:	f7f3 f8a7 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010026:	2043      	movs	r0, #67	; 0x43
 8010028:	f7f3 f8c0 	bl	80031ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801002c:	bf00      	nop
 801002e:	3728      	adds	r7, #40	; 0x28
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	40023800 	.word	0x40023800
 8010038:	40020000 	.word	0x40020000

0801003c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f7fb fc16 	bl	800b884 <USBD_LL_SetupStage>
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	460b      	mov	r3, r1
 801006a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010072:	78fa      	ldrb	r2, [r7, #3]
 8010074:	6879      	ldr	r1, [r7, #4]
 8010076:	4613      	mov	r3, r2
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	1a9b      	subs	r3, r3, r2
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	440b      	add	r3, r1
 8010080:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	78fb      	ldrb	r3, [r7, #3]
 8010088:	4619      	mov	r1, r3
 801008a:	f7fb fc50 	bl	800b92e <USBD_LL_DataOutStage>
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}

08010096 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010096:	b580      	push	{r7, lr}
 8010098:	b082      	sub	sp, #8
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	460b      	mov	r3, r1
 80100a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80100a8:	78fa      	ldrb	r2, [r7, #3]
 80100aa:	6879      	ldr	r1, [r7, #4]
 80100ac:	4613      	mov	r3, r2
 80100ae:	00db      	lsls	r3, r3, #3
 80100b0:	1a9b      	subs	r3, r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	440b      	add	r3, r1
 80100b6:	3348      	adds	r3, #72	; 0x48
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	78fb      	ldrb	r3, [r7, #3]
 80100bc:	4619      	mov	r1, r3
 80100be:	f7fb fc99 	bl	800b9f4 <USBD_LL_DataInStage>
}
 80100c2:	bf00      	nop
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b082      	sub	sp, #8
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fb fdad 	bl	800bc38 <USBD_LL_SOF>
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b084      	sub	sp, #16
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80100ee:	2301      	movs	r3, #1
 80100f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d102      	bne.n	8010100 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80100fa:	2300      	movs	r3, #0
 80100fc:	73fb      	strb	r3, [r7, #15]
 80100fe:	e008      	b.n	8010112 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	2b02      	cmp	r3, #2
 8010106:	d102      	bne.n	801010e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010108:	2301      	movs	r3, #1
 801010a:	73fb      	strb	r3, [r7, #15]
 801010c:	e001      	b.n	8010112 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801010e:	f7f2 f8d5 	bl	80022bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010118:	7bfa      	ldrb	r2, [r7, #15]
 801011a:	4611      	mov	r1, r2
 801011c:	4618      	mov	r0, r3
 801011e:	f7fb fd4d 	bl	800bbbc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010128:	4618      	mov	r0, r3
 801012a:	f7fb fcf9 	bl	800bb20 <USBD_LL_Reset>
}
 801012e:	bf00      	nop
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010146:	4618      	mov	r0, r3
 8010148:	f7fb fd48 	bl	800bbdc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	6812      	ldr	r2, [r2, #0]
 801015a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801015e:	f043 0301 	orr.w	r3, r3, #1
 8010162:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a1b      	ldr	r3, [r3, #32]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d005      	beq.n	8010178 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801016c:	4b04      	ldr	r3, [pc, #16]	; (8010180 <HAL_PCD_SuspendCallback+0x48>)
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	4a03      	ldr	r2, [pc, #12]	; (8010180 <HAL_PCD_SuspendCallback+0x48>)
 8010172:	f043 0306 	orr.w	r3, r3, #6
 8010176:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010178:	bf00      	nop
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	e000ed00 	.word	0xe000ed00

08010184 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010192:	4618      	mov	r0, r3
 8010194:	f7fb fd38 	bl	800bc08 <USBD_LL_Resume>
}
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	460b      	mov	r3, r1
 80101aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101b2:	78fa      	ldrb	r2, [r7, #3]
 80101b4:	4611      	mov	r1, r2
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fb fd86 	bl	800bcc8 <USBD_LL_IsoOUTIncomplete>
}
 80101bc:	bf00      	nop
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	460b      	mov	r3, r1
 80101ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101d6:	78fa      	ldrb	r2, [r7, #3]
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fb fd4e 	bl	800bc7c <USBD_LL_IsoINIncomplete>
}
 80101e0:	bf00      	nop
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fb fd8c 	bl	800bd14 <USBD_LL_DevConnected>
}
 80101fc:	bf00      	nop
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010212:	4618      	mov	r0, r3
 8010214:	f7fb fd89 	bl	800bd2a <USBD_LL_DevDisconnected>
}
 8010218:	bf00      	nop
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d13c      	bne.n	80102aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010230:	4a20      	ldr	r2, [pc, #128]	; (80102b4 <USBD_LL_Init+0x94>)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4a1e      	ldr	r2, [pc, #120]	; (80102b4 <USBD_LL_Init+0x94>)
 801023c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010240:	4b1c      	ldr	r3, [pc, #112]	; (80102b4 <USBD_LL_Init+0x94>)
 8010242:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010246:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010248:	4b1a      	ldr	r3, [pc, #104]	; (80102b4 <USBD_LL_Init+0x94>)
 801024a:	2204      	movs	r2, #4
 801024c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801024e:	4b19      	ldr	r3, [pc, #100]	; (80102b4 <USBD_LL_Init+0x94>)
 8010250:	2202      	movs	r2, #2
 8010252:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010254:	4b17      	ldr	r3, [pc, #92]	; (80102b4 <USBD_LL_Init+0x94>)
 8010256:	2200      	movs	r2, #0
 8010258:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801025a:	4b16      	ldr	r3, [pc, #88]	; (80102b4 <USBD_LL_Init+0x94>)
 801025c:	2202      	movs	r2, #2
 801025e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010260:	4b14      	ldr	r3, [pc, #80]	; (80102b4 <USBD_LL_Init+0x94>)
 8010262:	2200      	movs	r2, #0
 8010264:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010266:	4b13      	ldr	r3, [pc, #76]	; (80102b4 <USBD_LL_Init+0x94>)
 8010268:	2200      	movs	r2, #0
 801026a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801026c:	4b11      	ldr	r3, [pc, #68]	; (80102b4 <USBD_LL_Init+0x94>)
 801026e:	2200      	movs	r2, #0
 8010270:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010272:	4b10      	ldr	r3, [pc, #64]	; (80102b4 <USBD_LL_Init+0x94>)
 8010274:	2200      	movs	r2, #0
 8010276:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010278:	4b0e      	ldr	r3, [pc, #56]	; (80102b4 <USBD_LL_Init+0x94>)
 801027a:	2200      	movs	r2, #0
 801027c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801027e:	480d      	ldr	r0, [pc, #52]	; (80102b4 <USBD_LL_Init+0x94>)
 8010280:	f7f6 f85d 	bl	800633e <HAL_PCD_Init>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801028a:	f7f2 f817 	bl	80022bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801028e:	2180      	movs	r1, #128	; 0x80
 8010290:	4808      	ldr	r0, [pc, #32]	; (80102b4 <USBD_LL_Init+0x94>)
 8010292:	f7f7 f9ba 	bl	800760a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010296:	2240      	movs	r2, #64	; 0x40
 8010298:	2100      	movs	r1, #0
 801029a:	4806      	ldr	r0, [pc, #24]	; (80102b4 <USBD_LL_Init+0x94>)
 801029c:	f7f7 f96e 	bl	800757c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80102a0:	2280      	movs	r2, #128	; 0x80
 80102a2:	2101      	movs	r1, #1
 80102a4:	4803      	ldr	r0, [pc, #12]	; (80102b4 <USBD_LL_Init+0x94>)
 80102a6:	f7f7 f969 	bl	800757c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80102aa:	2300      	movs	r3, #0
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	2001954c 	.word	0x2001954c

080102b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102c0:	2300      	movs	r3, #0
 80102c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102c4:	2300      	movs	r3, #0
 80102c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7f6 f952 	bl	8006578 <HAL_PCD_Start>
 80102d4:	4603      	mov	r3, r0
 80102d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102d8:	7bfb      	ldrb	r3, [r7, #15]
 80102da:	4618      	mov	r0, r3
 80102dc:	f000 f942 	bl	8010564 <USBD_Get_USB_Status>
 80102e0:	4603      	mov	r3, r0
 80102e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b084      	sub	sp, #16
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	4608      	mov	r0, r1
 80102f8:	4611      	mov	r1, r2
 80102fa:	461a      	mov	r2, r3
 80102fc:	4603      	mov	r3, r0
 80102fe:	70fb      	strb	r3, [r7, #3]
 8010300:	460b      	mov	r3, r1
 8010302:	70bb      	strb	r3, [r7, #2]
 8010304:	4613      	mov	r3, r2
 8010306:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010316:	78bb      	ldrb	r3, [r7, #2]
 8010318:	883a      	ldrh	r2, [r7, #0]
 801031a:	78f9      	ldrb	r1, [r7, #3]
 801031c:	f7f6 fd36 	bl	8006d8c <HAL_PCD_EP_Open>
 8010320:	4603      	mov	r3, r0
 8010322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010324:	7bfb      	ldrb	r3, [r7, #15]
 8010326:	4618      	mov	r0, r3
 8010328:	f000 f91c 	bl	8010564 <USBD_Get_USB_Status>
 801032c:	4603      	mov	r3, r0
 801032e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010330:	7bbb      	ldrb	r3, [r7, #14]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b084      	sub	sp, #16
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
 8010342:	460b      	mov	r3, r1
 8010344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801034a:	2300      	movs	r3, #0
 801034c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010354:	78fa      	ldrb	r2, [r7, #3]
 8010356:	4611      	mov	r1, r2
 8010358:	4618      	mov	r0, r3
 801035a:	f7f6 fd7f 	bl	8006e5c <HAL_PCD_EP_Close>
 801035e:	4603      	mov	r3, r0
 8010360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010362:	7bfb      	ldrb	r3, [r7, #15]
 8010364:	4618      	mov	r0, r3
 8010366:	f000 f8fd 	bl	8010564 <USBD_Get_USB_Status>
 801036a:	4603      	mov	r3, r0
 801036c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801036e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010370:	4618      	mov	r0, r3
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	460b      	mov	r3, r1
 8010382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010388:	2300      	movs	r3, #0
 801038a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010392:	78fa      	ldrb	r2, [r7, #3]
 8010394:	4611      	mov	r1, r2
 8010396:	4618      	mov	r0, r3
 8010398:	f7f6 fe57 	bl	800704a <HAL_PCD_EP_SetStall>
 801039c:	4603      	mov	r3, r0
 801039e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
 80103a2:	4618      	mov	r0, r3
 80103a4:	f000 f8de 	bl	8010564 <USBD_Get_USB_Status>
 80103a8:	4603      	mov	r3, r0
 80103aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b084      	sub	sp, #16
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	460b      	mov	r3, r1
 80103c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103c6:	2300      	movs	r3, #0
 80103c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103d0:	78fa      	ldrb	r2, [r7, #3]
 80103d2:	4611      	mov	r1, r2
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7f6 fe9c 	bl	8007112 <HAL_PCD_EP_ClrStall>
 80103da:	4603      	mov	r3, r0
 80103dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103de:	7bfb      	ldrb	r3, [r7, #15]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 f8bf 	bl	8010564 <USBD_Get_USB_Status>
 80103e6:	4603      	mov	r3, r0
 80103e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	460b      	mov	r3, r1
 80103fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010406:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801040c:	2b00      	cmp	r3, #0
 801040e:	da0b      	bge.n	8010428 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010410:	78fb      	ldrb	r3, [r7, #3]
 8010412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010416:	68f9      	ldr	r1, [r7, #12]
 8010418:	4613      	mov	r3, r2
 801041a:	00db      	lsls	r3, r3, #3
 801041c:	1a9b      	subs	r3, r3, r2
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	440b      	add	r3, r1
 8010422:	333e      	adds	r3, #62	; 0x3e
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	e00b      	b.n	8010440 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010428:	78fb      	ldrb	r3, [r7, #3]
 801042a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801042e:	68f9      	ldr	r1, [r7, #12]
 8010430:	4613      	mov	r3, r2
 8010432:	00db      	lsls	r3, r3, #3
 8010434:	1a9b      	subs	r3, r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	440b      	add	r3, r1
 801043a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801043e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010440:	4618      	mov	r0, r3
 8010442:	3714      	adds	r7, #20
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010458:	2300      	movs	r3, #0
 801045a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801045c:	2300      	movs	r3, #0
 801045e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010466:	78fa      	ldrb	r2, [r7, #3]
 8010468:	4611      	mov	r1, r2
 801046a:	4618      	mov	r0, r3
 801046c:	f7f6 fc69 	bl	8006d42 <HAL_PCD_SetAddress>
 8010470:	4603      	mov	r3, r0
 8010472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010474:	7bfb      	ldrb	r3, [r7, #15]
 8010476:	4618      	mov	r0, r3
 8010478:	f000 f874 	bl	8010564 <USBD_Get_USB_Status>
 801047c:	4603      	mov	r3, r0
 801047e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010480:	7bbb      	ldrb	r3, [r7, #14]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b086      	sub	sp, #24
 801048e:	af00      	add	r7, sp, #0
 8010490:	60f8      	str	r0, [r7, #12]
 8010492:	607a      	str	r2, [r7, #4]
 8010494:	603b      	str	r3, [r7, #0]
 8010496:	460b      	mov	r3, r1
 8010498:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801049a:	2300      	movs	r3, #0
 801049c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801049e:	2300      	movs	r3, #0
 80104a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80104a8:	7af9      	ldrb	r1, [r7, #11]
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	f7f6 fd82 	bl	8006fb6 <HAL_PCD_EP_Transmit>
 80104b2:	4603      	mov	r3, r0
 80104b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b6:	7dfb      	ldrb	r3, [r7, #23]
 80104b8:	4618      	mov	r0, r3
 80104ba:	f000 f853 	bl	8010564 <USBD_Get_USB_Status>
 80104be:	4603      	mov	r3, r0
 80104c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3718      	adds	r7, #24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	607a      	str	r2, [r7, #4]
 80104d6:	603b      	str	r3, [r7, #0]
 80104d8:	460b      	mov	r3, r1
 80104da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104dc:	2300      	movs	r3, #0
 80104de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80104ea:	7af9      	ldrb	r1, [r7, #11]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	f7f6 fcfe 	bl	8006ef0 <HAL_PCD_EP_Receive>
 80104f4:	4603      	mov	r3, r0
 80104f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f8:	7dfb      	ldrb	r3, [r7, #23]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f000 f832 	bl	8010564 <USBD_Get_USB_Status>
 8010500:	4603      	mov	r3, r0
 8010502:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010504:	7dbb      	ldrb	r3, [r7, #22]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b082      	sub	sp, #8
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	460b      	mov	r3, r1
 8010518:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010520:	78fa      	ldrb	r2, [r7, #3]
 8010522:	4611      	mov	r1, r2
 8010524:	4618      	mov	r0, r3
 8010526:	f7f6 fd2e 	bl	8006f86 <HAL_PCD_EP_GetRxCount>
 801052a:	4603      	mov	r3, r0
}
 801052c:	4618      	mov	r0, r3
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801053c:	4b03      	ldr	r3, [pc, #12]	; (801054c <USBD_static_malloc+0x18>)
}
 801053e:	4618      	mov	r0, r3
 8010540:	370c      	adds	r7, #12
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	20017b10 	.word	0x20017b10

08010550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]

}
 8010558:	bf00      	nop
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010564:	b480      	push	{r7}
 8010566:	b085      	sub	sp, #20
 8010568:	af00      	add	r7, sp, #0
 801056a:	4603      	mov	r3, r0
 801056c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010572:	79fb      	ldrb	r3, [r7, #7]
 8010574:	2b03      	cmp	r3, #3
 8010576:	d817      	bhi.n	80105a8 <USBD_Get_USB_Status+0x44>
 8010578:	a201      	add	r2, pc, #4	; (adr r2, 8010580 <USBD_Get_USB_Status+0x1c>)
 801057a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801057e:	bf00      	nop
 8010580:	08010591 	.word	0x08010591
 8010584:	08010597 	.word	0x08010597
 8010588:	0801059d 	.word	0x0801059d
 801058c:	080105a3 	.word	0x080105a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010590:	2300      	movs	r3, #0
 8010592:	73fb      	strb	r3, [r7, #15]
    break;
 8010594:	e00b      	b.n	80105ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010596:	2303      	movs	r3, #3
 8010598:	73fb      	strb	r3, [r7, #15]
    break;
 801059a:	e008      	b.n	80105ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801059c:	2301      	movs	r3, #1
 801059e:	73fb      	strb	r3, [r7, #15]
    break;
 80105a0:	e005      	b.n	80105ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105a2:	2303      	movs	r3, #3
 80105a4:	73fb      	strb	r3, [r7, #15]
    break;
 80105a6:	e002      	b.n	80105ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80105a8:	2303      	movs	r3, #3
 80105aa:	73fb      	strb	r3, [r7, #15]
    break;
 80105ac:	bf00      	nop
  }
  return usb_status;
 80105ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3714      	adds	r7, #20
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <__errno>:
 80105bc:	4b01      	ldr	r3, [pc, #4]	; (80105c4 <__errno+0x8>)
 80105be:	6818      	ldr	r0, [r3, #0]
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	20000200 	.word	0x20000200

080105c8 <__libc_init_array>:
 80105c8:	b570      	push	{r4, r5, r6, lr}
 80105ca:	4d0d      	ldr	r5, [pc, #52]	; (8010600 <__libc_init_array+0x38>)
 80105cc:	4c0d      	ldr	r4, [pc, #52]	; (8010604 <__libc_init_array+0x3c>)
 80105ce:	1b64      	subs	r4, r4, r5
 80105d0:	10a4      	asrs	r4, r4, #2
 80105d2:	2600      	movs	r6, #0
 80105d4:	42a6      	cmp	r6, r4
 80105d6:	d109      	bne.n	80105ec <__libc_init_array+0x24>
 80105d8:	4d0b      	ldr	r5, [pc, #44]	; (8010608 <__libc_init_array+0x40>)
 80105da:	4c0c      	ldr	r4, [pc, #48]	; (801060c <__libc_init_array+0x44>)
 80105dc:	f000 fcf4 	bl	8010fc8 <_init>
 80105e0:	1b64      	subs	r4, r4, r5
 80105e2:	10a4      	asrs	r4, r4, #2
 80105e4:	2600      	movs	r6, #0
 80105e6:	42a6      	cmp	r6, r4
 80105e8:	d105      	bne.n	80105f6 <__libc_init_array+0x2e>
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
 80105ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80105f0:	4798      	blx	r3
 80105f2:	3601      	adds	r6, #1
 80105f4:	e7ee      	b.n	80105d4 <__libc_init_array+0xc>
 80105f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80105fa:	4798      	blx	r3
 80105fc:	3601      	adds	r6, #1
 80105fe:	e7f2      	b.n	80105e6 <__libc_init_array+0x1e>
 8010600:	08011c20 	.word	0x08011c20
 8010604:	08011c20 	.word	0x08011c20
 8010608:	08011c20 	.word	0x08011c20
 801060c:	08011c24 	.word	0x08011c24

08010610 <memcpy>:
 8010610:	440a      	add	r2, r1
 8010612:	4291      	cmp	r1, r2
 8010614:	f100 33ff 	add.w	r3, r0, #4294967295
 8010618:	d100      	bne.n	801061c <memcpy+0xc>
 801061a:	4770      	bx	lr
 801061c:	b510      	push	{r4, lr}
 801061e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010626:	4291      	cmp	r1, r2
 8010628:	d1f9      	bne.n	801061e <memcpy+0xe>
 801062a:	bd10      	pop	{r4, pc}

0801062c <memset>:
 801062c:	4402      	add	r2, r0
 801062e:	4603      	mov	r3, r0
 8010630:	4293      	cmp	r3, r2
 8010632:	d100      	bne.n	8010636 <memset+0xa>
 8010634:	4770      	bx	lr
 8010636:	f803 1b01 	strb.w	r1, [r3], #1
 801063a:	e7f9      	b.n	8010630 <memset+0x4>

0801063c <_puts_r>:
 801063c:	b570      	push	{r4, r5, r6, lr}
 801063e:	460e      	mov	r6, r1
 8010640:	4605      	mov	r5, r0
 8010642:	b118      	cbz	r0, 801064c <_puts_r+0x10>
 8010644:	6983      	ldr	r3, [r0, #24]
 8010646:	b90b      	cbnz	r3, 801064c <_puts_r+0x10>
 8010648:	f000 fa48 	bl	8010adc <__sinit>
 801064c:	69ab      	ldr	r3, [r5, #24]
 801064e:	68ac      	ldr	r4, [r5, #8]
 8010650:	b913      	cbnz	r3, 8010658 <_puts_r+0x1c>
 8010652:	4628      	mov	r0, r5
 8010654:	f000 fa42 	bl	8010adc <__sinit>
 8010658:	4b2c      	ldr	r3, [pc, #176]	; (801070c <_puts_r+0xd0>)
 801065a:	429c      	cmp	r4, r3
 801065c:	d120      	bne.n	80106a0 <_puts_r+0x64>
 801065e:	686c      	ldr	r4, [r5, #4]
 8010660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010662:	07db      	lsls	r3, r3, #31
 8010664:	d405      	bmi.n	8010672 <_puts_r+0x36>
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	0598      	lsls	r0, r3, #22
 801066a:	d402      	bmi.n	8010672 <_puts_r+0x36>
 801066c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801066e:	f000 fad3 	bl	8010c18 <__retarget_lock_acquire_recursive>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	0719      	lsls	r1, r3, #28
 8010676:	d51d      	bpl.n	80106b4 <_puts_r+0x78>
 8010678:	6923      	ldr	r3, [r4, #16]
 801067a:	b1db      	cbz	r3, 80106b4 <_puts_r+0x78>
 801067c:	3e01      	subs	r6, #1
 801067e:	68a3      	ldr	r3, [r4, #8]
 8010680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010684:	3b01      	subs	r3, #1
 8010686:	60a3      	str	r3, [r4, #8]
 8010688:	bb39      	cbnz	r1, 80106da <_puts_r+0x9e>
 801068a:	2b00      	cmp	r3, #0
 801068c:	da38      	bge.n	8010700 <_puts_r+0xc4>
 801068e:	4622      	mov	r2, r4
 8010690:	210a      	movs	r1, #10
 8010692:	4628      	mov	r0, r5
 8010694:	f000 f848 	bl	8010728 <__swbuf_r>
 8010698:	3001      	adds	r0, #1
 801069a:	d011      	beq.n	80106c0 <_puts_r+0x84>
 801069c:	250a      	movs	r5, #10
 801069e:	e011      	b.n	80106c4 <_puts_r+0x88>
 80106a0:	4b1b      	ldr	r3, [pc, #108]	; (8010710 <_puts_r+0xd4>)
 80106a2:	429c      	cmp	r4, r3
 80106a4:	d101      	bne.n	80106aa <_puts_r+0x6e>
 80106a6:	68ac      	ldr	r4, [r5, #8]
 80106a8:	e7da      	b.n	8010660 <_puts_r+0x24>
 80106aa:	4b1a      	ldr	r3, [pc, #104]	; (8010714 <_puts_r+0xd8>)
 80106ac:	429c      	cmp	r4, r3
 80106ae:	bf08      	it	eq
 80106b0:	68ec      	ldreq	r4, [r5, #12]
 80106b2:	e7d5      	b.n	8010660 <_puts_r+0x24>
 80106b4:	4621      	mov	r1, r4
 80106b6:	4628      	mov	r0, r5
 80106b8:	f000 f888 	bl	80107cc <__swsetup_r>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d0dd      	beq.n	801067c <_puts_r+0x40>
 80106c0:	f04f 35ff 	mov.w	r5, #4294967295
 80106c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106c6:	07da      	lsls	r2, r3, #31
 80106c8:	d405      	bmi.n	80106d6 <_puts_r+0x9a>
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	059b      	lsls	r3, r3, #22
 80106ce:	d402      	bmi.n	80106d6 <_puts_r+0x9a>
 80106d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106d2:	f000 faa2 	bl	8010c1a <__retarget_lock_release_recursive>
 80106d6:	4628      	mov	r0, r5
 80106d8:	bd70      	pop	{r4, r5, r6, pc}
 80106da:	2b00      	cmp	r3, #0
 80106dc:	da04      	bge.n	80106e8 <_puts_r+0xac>
 80106de:	69a2      	ldr	r2, [r4, #24]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	dc06      	bgt.n	80106f2 <_puts_r+0xb6>
 80106e4:	290a      	cmp	r1, #10
 80106e6:	d004      	beq.n	80106f2 <_puts_r+0xb6>
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	6022      	str	r2, [r4, #0]
 80106ee:	7019      	strb	r1, [r3, #0]
 80106f0:	e7c5      	b.n	801067e <_puts_r+0x42>
 80106f2:	4622      	mov	r2, r4
 80106f4:	4628      	mov	r0, r5
 80106f6:	f000 f817 	bl	8010728 <__swbuf_r>
 80106fa:	3001      	adds	r0, #1
 80106fc:	d1bf      	bne.n	801067e <_puts_r+0x42>
 80106fe:	e7df      	b.n	80106c0 <_puts_r+0x84>
 8010700:	6823      	ldr	r3, [r4, #0]
 8010702:	250a      	movs	r5, #10
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	6022      	str	r2, [r4, #0]
 8010708:	701d      	strb	r5, [r3, #0]
 801070a:	e7db      	b.n	80106c4 <_puts_r+0x88>
 801070c:	08011bd8 	.word	0x08011bd8
 8010710:	08011bf8 	.word	0x08011bf8
 8010714:	08011bb8 	.word	0x08011bb8

08010718 <puts>:
 8010718:	4b02      	ldr	r3, [pc, #8]	; (8010724 <puts+0xc>)
 801071a:	4601      	mov	r1, r0
 801071c:	6818      	ldr	r0, [r3, #0]
 801071e:	f7ff bf8d 	b.w	801063c <_puts_r>
 8010722:	bf00      	nop
 8010724:	20000200 	.word	0x20000200

08010728 <__swbuf_r>:
 8010728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072a:	460e      	mov	r6, r1
 801072c:	4614      	mov	r4, r2
 801072e:	4605      	mov	r5, r0
 8010730:	b118      	cbz	r0, 801073a <__swbuf_r+0x12>
 8010732:	6983      	ldr	r3, [r0, #24]
 8010734:	b90b      	cbnz	r3, 801073a <__swbuf_r+0x12>
 8010736:	f000 f9d1 	bl	8010adc <__sinit>
 801073a:	4b21      	ldr	r3, [pc, #132]	; (80107c0 <__swbuf_r+0x98>)
 801073c:	429c      	cmp	r4, r3
 801073e:	d12b      	bne.n	8010798 <__swbuf_r+0x70>
 8010740:	686c      	ldr	r4, [r5, #4]
 8010742:	69a3      	ldr	r3, [r4, #24]
 8010744:	60a3      	str	r3, [r4, #8]
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	071a      	lsls	r2, r3, #28
 801074a:	d52f      	bpl.n	80107ac <__swbuf_r+0x84>
 801074c:	6923      	ldr	r3, [r4, #16]
 801074e:	b36b      	cbz	r3, 80107ac <__swbuf_r+0x84>
 8010750:	6923      	ldr	r3, [r4, #16]
 8010752:	6820      	ldr	r0, [r4, #0]
 8010754:	1ac0      	subs	r0, r0, r3
 8010756:	6963      	ldr	r3, [r4, #20]
 8010758:	b2f6      	uxtb	r6, r6
 801075a:	4283      	cmp	r3, r0
 801075c:	4637      	mov	r7, r6
 801075e:	dc04      	bgt.n	801076a <__swbuf_r+0x42>
 8010760:	4621      	mov	r1, r4
 8010762:	4628      	mov	r0, r5
 8010764:	f000 f926 	bl	80109b4 <_fflush_r>
 8010768:	bb30      	cbnz	r0, 80107b8 <__swbuf_r+0x90>
 801076a:	68a3      	ldr	r3, [r4, #8]
 801076c:	3b01      	subs	r3, #1
 801076e:	60a3      	str	r3, [r4, #8]
 8010770:	6823      	ldr	r3, [r4, #0]
 8010772:	1c5a      	adds	r2, r3, #1
 8010774:	6022      	str	r2, [r4, #0]
 8010776:	701e      	strb	r6, [r3, #0]
 8010778:	6963      	ldr	r3, [r4, #20]
 801077a:	3001      	adds	r0, #1
 801077c:	4283      	cmp	r3, r0
 801077e:	d004      	beq.n	801078a <__swbuf_r+0x62>
 8010780:	89a3      	ldrh	r3, [r4, #12]
 8010782:	07db      	lsls	r3, r3, #31
 8010784:	d506      	bpl.n	8010794 <__swbuf_r+0x6c>
 8010786:	2e0a      	cmp	r6, #10
 8010788:	d104      	bne.n	8010794 <__swbuf_r+0x6c>
 801078a:	4621      	mov	r1, r4
 801078c:	4628      	mov	r0, r5
 801078e:	f000 f911 	bl	80109b4 <_fflush_r>
 8010792:	b988      	cbnz	r0, 80107b8 <__swbuf_r+0x90>
 8010794:	4638      	mov	r0, r7
 8010796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010798:	4b0a      	ldr	r3, [pc, #40]	; (80107c4 <__swbuf_r+0x9c>)
 801079a:	429c      	cmp	r4, r3
 801079c:	d101      	bne.n	80107a2 <__swbuf_r+0x7a>
 801079e:	68ac      	ldr	r4, [r5, #8]
 80107a0:	e7cf      	b.n	8010742 <__swbuf_r+0x1a>
 80107a2:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <__swbuf_r+0xa0>)
 80107a4:	429c      	cmp	r4, r3
 80107a6:	bf08      	it	eq
 80107a8:	68ec      	ldreq	r4, [r5, #12]
 80107aa:	e7ca      	b.n	8010742 <__swbuf_r+0x1a>
 80107ac:	4621      	mov	r1, r4
 80107ae:	4628      	mov	r0, r5
 80107b0:	f000 f80c 	bl	80107cc <__swsetup_r>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d0cb      	beq.n	8010750 <__swbuf_r+0x28>
 80107b8:	f04f 37ff 	mov.w	r7, #4294967295
 80107bc:	e7ea      	b.n	8010794 <__swbuf_r+0x6c>
 80107be:	bf00      	nop
 80107c0:	08011bd8 	.word	0x08011bd8
 80107c4:	08011bf8 	.word	0x08011bf8
 80107c8:	08011bb8 	.word	0x08011bb8

080107cc <__swsetup_r>:
 80107cc:	4b32      	ldr	r3, [pc, #200]	; (8010898 <__swsetup_r+0xcc>)
 80107ce:	b570      	push	{r4, r5, r6, lr}
 80107d0:	681d      	ldr	r5, [r3, #0]
 80107d2:	4606      	mov	r6, r0
 80107d4:	460c      	mov	r4, r1
 80107d6:	b125      	cbz	r5, 80107e2 <__swsetup_r+0x16>
 80107d8:	69ab      	ldr	r3, [r5, #24]
 80107da:	b913      	cbnz	r3, 80107e2 <__swsetup_r+0x16>
 80107dc:	4628      	mov	r0, r5
 80107de:	f000 f97d 	bl	8010adc <__sinit>
 80107e2:	4b2e      	ldr	r3, [pc, #184]	; (801089c <__swsetup_r+0xd0>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d10f      	bne.n	8010808 <__swsetup_r+0x3c>
 80107e8:	686c      	ldr	r4, [r5, #4]
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107f0:	0719      	lsls	r1, r3, #28
 80107f2:	d42c      	bmi.n	801084e <__swsetup_r+0x82>
 80107f4:	06dd      	lsls	r5, r3, #27
 80107f6:	d411      	bmi.n	801081c <__swsetup_r+0x50>
 80107f8:	2309      	movs	r3, #9
 80107fa:	6033      	str	r3, [r6, #0]
 80107fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010800:	81a3      	strh	r3, [r4, #12]
 8010802:	f04f 30ff 	mov.w	r0, #4294967295
 8010806:	e03e      	b.n	8010886 <__swsetup_r+0xba>
 8010808:	4b25      	ldr	r3, [pc, #148]	; (80108a0 <__swsetup_r+0xd4>)
 801080a:	429c      	cmp	r4, r3
 801080c:	d101      	bne.n	8010812 <__swsetup_r+0x46>
 801080e:	68ac      	ldr	r4, [r5, #8]
 8010810:	e7eb      	b.n	80107ea <__swsetup_r+0x1e>
 8010812:	4b24      	ldr	r3, [pc, #144]	; (80108a4 <__swsetup_r+0xd8>)
 8010814:	429c      	cmp	r4, r3
 8010816:	bf08      	it	eq
 8010818:	68ec      	ldreq	r4, [r5, #12]
 801081a:	e7e6      	b.n	80107ea <__swsetup_r+0x1e>
 801081c:	0758      	lsls	r0, r3, #29
 801081e:	d512      	bpl.n	8010846 <__swsetup_r+0x7a>
 8010820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010822:	b141      	cbz	r1, 8010836 <__swsetup_r+0x6a>
 8010824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010828:	4299      	cmp	r1, r3
 801082a:	d002      	beq.n	8010832 <__swsetup_r+0x66>
 801082c:	4630      	mov	r0, r6
 801082e:	f000 fa59 	bl	8010ce4 <_free_r>
 8010832:	2300      	movs	r3, #0
 8010834:	6363      	str	r3, [r4, #52]	; 0x34
 8010836:	89a3      	ldrh	r3, [r4, #12]
 8010838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801083c:	81a3      	strh	r3, [r4, #12]
 801083e:	2300      	movs	r3, #0
 8010840:	6063      	str	r3, [r4, #4]
 8010842:	6923      	ldr	r3, [r4, #16]
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	89a3      	ldrh	r3, [r4, #12]
 8010848:	f043 0308 	orr.w	r3, r3, #8
 801084c:	81a3      	strh	r3, [r4, #12]
 801084e:	6923      	ldr	r3, [r4, #16]
 8010850:	b94b      	cbnz	r3, 8010866 <__swsetup_r+0x9a>
 8010852:	89a3      	ldrh	r3, [r4, #12]
 8010854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801085c:	d003      	beq.n	8010866 <__swsetup_r+0x9a>
 801085e:	4621      	mov	r1, r4
 8010860:	4630      	mov	r0, r6
 8010862:	f000 f9ff 	bl	8010c64 <__smakebuf_r>
 8010866:	89a0      	ldrh	r0, [r4, #12]
 8010868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801086c:	f010 0301 	ands.w	r3, r0, #1
 8010870:	d00a      	beq.n	8010888 <__swsetup_r+0xbc>
 8010872:	2300      	movs	r3, #0
 8010874:	60a3      	str	r3, [r4, #8]
 8010876:	6963      	ldr	r3, [r4, #20]
 8010878:	425b      	negs	r3, r3
 801087a:	61a3      	str	r3, [r4, #24]
 801087c:	6923      	ldr	r3, [r4, #16]
 801087e:	b943      	cbnz	r3, 8010892 <__swsetup_r+0xc6>
 8010880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010884:	d1ba      	bne.n	80107fc <__swsetup_r+0x30>
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	0781      	lsls	r1, r0, #30
 801088a:	bf58      	it	pl
 801088c:	6963      	ldrpl	r3, [r4, #20]
 801088e:	60a3      	str	r3, [r4, #8]
 8010890:	e7f4      	b.n	801087c <__swsetup_r+0xb0>
 8010892:	2000      	movs	r0, #0
 8010894:	e7f7      	b.n	8010886 <__swsetup_r+0xba>
 8010896:	bf00      	nop
 8010898:	20000200 	.word	0x20000200
 801089c:	08011bd8 	.word	0x08011bd8
 80108a0:	08011bf8 	.word	0x08011bf8
 80108a4:	08011bb8 	.word	0x08011bb8

080108a8 <__sflush_r>:
 80108a8:	898a      	ldrh	r2, [r1, #12]
 80108aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	4605      	mov	r5, r0
 80108b0:	0710      	lsls	r0, r2, #28
 80108b2:	460c      	mov	r4, r1
 80108b4:	d458      	bmi.n	8010968 <__sflush_r+0xc0>
 80108b6:	684b      	ldr	r3, [r1, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	dc05      	bgt.n	80108c8 <__sflush_r+0x20>
 80108bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dc02      	bgt.n	80108c8 <__sflush_r+0x20>
 80108c2:	2000      	movs	r0, #0
 80108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108ca:	2e00      	cmp	r6, #0
 80108cc:	d0f9      	beq.n	80108c2 <__sflush_r+0x1a>
 80108ce:	2300      	movs	r3, #0
 80108d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d4:	682f      	ldr	r7, [r5, #0]
 80108d6:	602b      	str	r3, [r5, #0]
 80108d8:	d032      	beq.n	8010940 <__sflush_r+0x98>
 80108da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	075a      	lsls	r2, r3, #29
 80108e0:	d505      	bpl.n	80108ee <__sflush_r+0x46>
 80108e2:	6863      	ldr	r3, [r4, #4]
 80108e4:	1ac0      	subs	r0, r0, r3
 80108e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e8:	b10b      	cbz	r3, 80108ee <__sflush_r+0x46>
 80108ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108ec:	1ac0      	subs	r0, r0, r3
 80108ee:	2300      	movs	r3, #0
 80108f0:	4602      	mov	r2, r0
 80108f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f4:	6a21      	ldr	r1, [r4, #32]
 80108f6:	4628      	mov	r0, r5
 80108f8:	47b0      	blx	r6
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	d106      	bne.n	801090e <__sflush_r+0x66>
 8010900:	6829      	ldr	r1, [r5, #0]
 8010902:	291d      	cmp	r1, #29
 8010904:	d82c      	bhi.n	8010960 <__sflush_r+0xb8>
 8010906:	4a2a      	ldr	r2, [pc, #168]	; (80109b0 <__sflush_r+0x108>)
 8010908:	40ca      	lsrs	r2, r1
 801090a:	07d6      	lsls	r6, r2, #31
 801090c:	d528      	bpl.n	8010960 <__sflush_r+0xb8>
 801090e:	2200      	movs	r2, #0
 8010910:	6062      	str	r2, [r4, #4]
 8010912:	04d9      	lsls	r1, r3, #19
 8010914:	6922      	ldr	r2, [r4, #16]
 8010916:	6022      	str	r2, [r4, #0]
 8010918:	d504      	bpl.n	8010924 <__sflush_r+0x7c>
 801091a:	1c42      	adds	r2, r0, #1
 801091c:	d101      	bne.n	8010922 <__sflush_r+0x7a>
 801091e:	682b      	ldr	r3, [r5, #0]
 8010920:	b903      	cbnz	r3, 8010924 <__sflush_r+0x7c>
 8010922:	6560      	str	r0, [r4, #84]	; 0x54
 8010924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010926:	602f      	str	r7, [r5, #0]
 8010928:	2900      	cmp	r1, #0
 801092a:	d0ca      	beq.n	80108c2 <__sflush_r+0x1a>
 801092c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010930:	4299      	cmp	r1, r3
 8010932:	d002      	beq.n	801093a <__sflush_r+0x92>
 8010934:	4628      	mov	r0, r5
 8010936:	f000 f9d5 	bl	8010ce4 <_free_r>
 801093a:	2000      	movs	r0, #0
 801093c:	6360      	str	r0, [r4, #52]	; 0x34
 801093e:	e7c1      	b.n	80108c4 <__sflush_r+0x1c>
 8010940:	6a21      	ldr	r1, [r4, #32]
 8010942:	2301      	movs	r3, #1
 8010944:	4628      	mov	r0, r5
 8010946:	47b0      	blx	r6
 8010948:	1c41      	adds	r1, r0, #1
 801094a:	d1c7      	bne.n	80108dc <__sflush_r+0x34>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0c4      	beq.n	80108dc <__sflush_r+0x34>
 8010952:	2b1d      	cmp	r3, #29
 8010954:	d001      	beq.n	801095a <__sflush_r+0xb2>
 8010956:	2b16      	cmp	r3, #22
 8010958:	d101      	bne.n	801095e <__sflush_r+0xb6>
 801095a:	602f      	str	r7, [r5, #0]
 801095c:	e7b1      	b.n	80108c2 <__sflush_r+0x1a>
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	e7ad      	b.n	80108c4 <__sflush_r+0x1c>
 8010968:	690f      	ldr	r7, [r1, #16]
 801096a:	2f00      	cmp	r7, #0
 801096c:	d0a9      	beq.n	80108c2 <__sflush_r+0x1a>
 801096e:	0793      	lsls	r3, r2, #30
 8010970:	680e      	ldr	r6, [r1, #0]
 8010972:	bf08      	it	eq
 8010974:	694b      	ldreq	r3, [r1, #20]
 8010976:	600f      	str	r7, [r1, #0]
 8010978:	bf18      	it	ne
 801097a:	2300      	movne	r3, #0
 801097c:	eba6 0807 	sub.w	r8, r6, r7
 8010980:	608b      	str	r3, [r1, #8]
 8010982:	f1b8 0f00 	cmp.w	r8, #0
 8010986:	dd9c      	ble.n	80108c2 <__sflush_r+0x1a>
 8010988:	6a21      	ldr	r1, [r4, #32]
 801098a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801098c:	4643      	mov	r3, r8
 801098e:	463a      	mov	r2, r7
 8010990:	4628      	mov	r0, r5
 8010992:	47b0      	blx	r6
 8010994:	2800      	cmp	r0, #0
 8010996:	dc06      	bgt.n	80109a6 <__sflush_r+0xfe>
 8010998:	89a3      	ldrh	r3, [r4, #12]
 801099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801099e:	81a3      	strh	r3, [r4, #12]
 80109a0:	f04f 30ff 	mov.w	r0, #4294967295
 80109a4:	e78e      	b.n	80108c4 <__sflush_r+0x1c>
 80109a6:	4407      	add	r7, r0
 80109a8:	eba8 0800 	sub.w	r8, r8, r0
 80109ac:	e7e9      	b.n	8010982 <__sflush_r+0xda>
 80109ae:	bf00      	nop
 80109b0:	20400001 	.word	0x20400001

080109b4 <_fflush_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	690b      	ldr	r3, [r1, #16]
 80109b8:	4605      	mov	r5, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	b913      	cbnz	r3, 80109c4 <_fflush_r+0x10>
 80109be:	2500      	movs	r5, #0
 80109c0:	4628      	mov	r0, r5
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	b118      	cbz	r0, 80109ce <_fflush_r+0x1a>
 80109c6:	6983      	ldr	r3, [r0, #24]
 80109c8:	b90b      	cbnz	r3, 80109ce <_fflush_r+0x1a>
 80109ca:	f000 f887 	bl	8010adc <__sinit>
 80109ce:	4b14      	ldr	r3, [pc, #80]	; (8010a20 <_fflush_r+0x6c>)
 80109d0:	429c      	cmp	r4, r3
 80109d2:	d11b      	bne.n	8010a0c <_fflush_r+0x58>
 80109d4:	686c      	ldr	r4, [r5, #4]
 80109d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0ef      	beq.n	80109be <_fflush_r+0xa>
 80109de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e0:	07d0      	lsls	r0, r2, #31
 80109e2:	d404      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e4:	0599      	lsls	r1, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ea:	f000 f915 	bl	8010c18 <__retarget_lock_acquire_recursive>
 80109ee:	4628      	mov	r0, r5
 80109f0:	4621      	mov	r1, r4
 80109f2:	f7ff ff59 	bl	80108a8 <__sflush_r>
 80109f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109f8:	07da      	lsls	r2, r3, #31
 80109fa:	4605      	mov	r5, r0
 80109fc:	d4e0      	bmi.n	80109c0 <_fflush_r+0xc>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	059b      	lsls	r3, r3, #22
 8010a02:	d4dd      	bmi.n	80109c0 <_fflush_r+0xc>
 8010a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a06:	f000 f908 	bl	8010c1a <__retarget_lock_release_recursive>
 8010a0a:	e7d9      	b.n	80109c0 <_fflush_r+0xc>
 8010a0c:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <_fflush_r+0x70>)
 8010a0e:	429c      	cmp	r4, r3
 8010a10:	d101      	bne.n	8010a16 <_fflush_r+0x62>
 8010a12:	68ac      	ldr	r4, [r5, #8]
 8010a14:	e7df      	b.n	80109d6 <_fflush_r+0x22>
 8010a16:	4b04      	ldr	r3, [pc, #16]	; (8010a28 <_fflush_r+0x74>)
 8010a18:	429c      	cmp	r4, r3
 8010a1a:	bf08      	it	eq
 8010a1c:	68ec      	ldreq	r4, [r5, #12]
 8010a1e:	e7da      	b.n	80109d6 <_fflush_r+0x22>
 8010a20:	08011bd8 	.word	0x08011bd8
 8010a24:	08011bf8 	.word	0x08011bf8
 8010a28:	08011bb8 	.word	0x08011bb8

08010a2c <std>:
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	b510      	push	{r4, lr}
 8010a30:	4604      	mov	r4, r0
 8010a32:	e9c0 3300 	strd	r3, r3, [r0]
 8010a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a3a:	6083      	str	r3, [r0, #8]
 8010a3c:	8181      	strh	r1, [r0, #12]
 8010a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a40:	81c2      	strh	r2, [r0, #14]
 8010a42:	6183      	str	r3, [r0, #24]
 8010a44:	4619      	mov	r1, r3
 8010a46:	2208      	movs	r2, #8
 8010a48:	305c      	adds	r0, #92	; 0x5c
 8010a4a:	f7ff fdef 	bl	801062c <memset>
 8010a4e:	4b05      	ldr	r3, [pc, #20]	; (8010a64 <std+0x38>)
 8010a50:	6263      	str	r3, [r4, #36]	; 0x24
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <std+0x3c>)
 8010a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <std+0x40>)
 8010a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <std+0x44>)
 8010a5c:	6224      	str	r4, [r4, #32]
 8010a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a60:	bd10      	pop	{r4, pc}
 8010a62:	bf00      	nop
 8010a64:	08010e59 	.word	0x08010e59
 8010a68:	08010e7b 	.word	0x08010e7b
 8010a6c:	08010eb3 	.word	0x08010eb3
 8010a70:	08010ed7 	.word	0x08010ed7

08010a74 <_cleanup_r>:
 8010a74:	4901      	ldr	r1, [pc, #4]	; (8010a7c <_cleanup_r+0x8>)
 8010a76:	f000 b8af 	b.w	8010bd8 <_fwalk_reent>
 8010a7a:	bf00      	nop
 8010a7c:	080109b5 	.word	0x080109b5

08010a80 <__sfmoreglue>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	1e4a      	subs	r2, r1, #1
 8010a84:	2568      	movs	r5, #104	; 0x68
 8010a86:	4355      	muls	r5, r2
 8010a88:	460e      	mov	r6, r1
 8010a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a8e:	f000 f979 	bl	8010d84 <_malloc_r>
 8010a92:	4604      	mov	r4, r0
 8010a94:	b140      	cbz	r0, 8010aa8 <__sfmoreglue+0x28>
 8010a96:	2100      	movs	r1, #0
 8010a98:	e9c0 1600 	strd	r1, r6, [r0]
 8010a9c:	300c      	adds	r0, #12
 8010a9e:	60a0      	str	r0, [r4, #8]
 8010aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aa4:	f7ff fdc2 	bl	801062c <memset>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}

08010aac <__sfp_lock_acquire>:
 8010aac:	4801      	ldr	r0, [pc, #4]	; (8010ab4 <__sfp_lock_acquire+0x8>)
 8010aae:	f000 b8b3 	b.w	8010c18 <__retarget_lock_acquire_recursive>
 8010ab2:	bf00      	nop
 8010ab4:	2001995c 	.word	0x2001995c

08010ab8 <__sfp_lock_release>:
 8010ab8:	4801      	ldr	r0, [pc, #4]	; (8010ac0 <__sfp_lock_release+0x8>)
 8010aba:	f000 b8ae 	b.w	8010c1a <__retarget_lock_release_recursive>
 8010abe:	bf00      	nop
 8010ac0:	2001995c 	.word	0x2001995c

08010ac4 <__sinit_lock_acquire>:
 8010ac4:	4801      	ldr	r0, [pc, #4]	; (8010acc <__sinit_lock_acquire+0x8>)
 8010ac6:	f000 b8a7 	b.w	8010c18 <__retarget_lock_acquire_recursive>
 8010aca:	bf00      	nop
 8010acc:	20019957 	.word	0x20019957

08010ad0 <__sinit_lock_release>:
 8010ad0:	4801      	ldr	r0, [pc, #4]	; (8010ad8 <__sinit_lock_release+0x8>)
 8010ad2:	f000 b8a2 	b.w	8010c1a <__retarget_lock_release_recursive>
 8010ad6:	bf00      	nop
 8010ad8:	20019957 	.word	0x20019957

08010adc <__sinit>:
 8010adc:	b510      	push	{r4, lr}
 8010ade:	4604      	mov	r4, r0
 8010ae0:	f7ff fff0 	bl	8010ac4 <__sinit_lock_acquire>
 8010ae4:	69a3      	ldr	r3, [r4, #24]
 8010ae6:	b11b      	cbz	r3, 8010af0 <__sinit+0x14>
 8010ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aec:	f7ff bff0 	b.w	8010ad0 <__sinit_lock_release>
 8010af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010af4:	6523      	str	r3, [r4, #80]	; 0x50
 8010af6:	4b13      	ldr	r3, [pc, #76]	; (8010b44 <__sinit+0x68>)
 8010af8:	4a13      	ldr	r2, [pc, #76]	; (8010b48 <__sinit+0x6c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010afe:	42a3      	cmp	r3, r4
 8010b00:	bf04      	itt	eq
 8010b02:	2301      	moveq	r3, #1
 8010b04:	61a3      	streq	r3, [r4, #24]
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 f820 	bl	8010b4c <__sfp>
 8010b0c:	6060      	str	r0, [r4, #4]
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 f81c 	bl	8010b4c <__sfp>
 8010b14:	60a0      	str	r0, [r4, #8]
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 f818 	bl	8010b4c <__sfp>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	60e0      	str	r0, [r4, #12]
 8010b20:	2104      	movs	r1, #4
 8010b22:	6860      	ldr	r0, [r4, #4]
 8010b24:	f7ff ff82 	bl	8010a2c <std>
 8010b28:	68a0      	ldr	r0, [r4, #8]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	2109      	movs	r1, #9
 8010b2e:	f7ff ff7d 	bl	8010a2c <std>
 8010b32:	68e0      	ldr	r0, [r4, #12]
 8010b34:	2202      	movs	r2, #2
 8010b36:	2112      	movs	r1, #18
 8010b38:	f7ff ff78 	bl	8010a2c <std>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	61a3      	str	r3, [r4, #24]
 8010b40:	e7d2      	b.n	8010ae8 <__sinit+0xc>
 8010b42:	bf00      	nop
 8010b44:	08011bb4 	.word	0x08011bb4
 8010b48:	08010a75 	.word	0x08010a75

08010b4c <__sfp>:
 8010b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f7ff ffac 	bl	8010aac <__sfp_lock_acquire>
 8010b54:	4b1e      	ldr	r3, [pc, #120]	; (8010bd0 <__sfp+0x84>)
 8010b56:	681e      	ldr	r6, [r3, #0]
 8010b58:	69b3      	ldr	r3, [r6, #24]
 8010b5a:	b913      	cbnz	r3, 8010b62 <__sfp+0x16>
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7ff ffbd 	bl	8010adc <__sinit>
 8010b62:	3648      	adds	r6, #72	; 0x48
 8010b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	d503      	bpl.n	8010b74 <__sfp+0x28>
 8010b6c:	6833      	ldr	r3, [r6, #0]
 8010b6e:	b30b      	cbz	r3, 8010bb4 <__sfp+0x68>
 8010b70:	6836      	ldr	r6, [r6, #0]
 8010b72:	e7f7      	b.n	8010b64 <__sfp+0x18>
 8010b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b78:	b9d5      	cbnz	r5, 8010bb0 <__sfp+0x64>
 8010b7a:	4b16      	ldr	r3, [pc, #88]	; (8010bd4 <__sfp+0x88>)
 8010b7c:	60e3      	str	r3, [r4, #12]
 8010b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b82:	6665      	str	r5, [r4, #100]	; 0x64
 8010b84:	f000 f847 	bl	8010c16 <__retarget_lock_init_recursive>
 8010b88:	f7ff ff96 	bl	8010ab8 <__sfp_lock_release>
 8010b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b94:	6025      	str	r5, [r4, #0]
 8010b96:	61a5      	str	r5, [r4, #24]
 8010b98:	2208      	movs	r2, #8
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ba0:	f7ff fd44 	bl	801062c <memset>
 8010ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bac:	4620      	mov	r0, r4
 8010bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb0:	3468      	adds	r4, #104	; 0x68
 8010bb2:	e7d9      	b.n	8010b68 <__sfp+0x1c>
 8010bb4:	2104      	movs	r1, #4
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ff ff62 	bl	8010a80 <__sfmoreglue>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	6030      	str	r0, [r6, #0]
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d1d5      	bne.n	8010b70 <__sfp+0x24>
 8010bc4:	f7ff ff78 	bl	8010ab8 <__sfp_lock_release>
 8010bc8:	230c      	movs	r3, #12
 8010bca:	603b      	str	r3, [r7, #0]
 8010bcc:	e7ee      	b.n	8010bac <__sfp+0x60>
 8010bce:	bf00      	nop
 8010bd0:	08011bb4 	.word	0x08011bb4
 8010bd4:	ffff0001 	.word	0xffff0001

08010bd8 <_fwalk_reent>:
 8010bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bdc:	4606      	mov	r6, r0
 8010bde:	4688      	mov	r8, r1
 8010be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010be4:	2700      	movs	r7, #0
 8010be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bea:	f1b9 0901 	subs.w	r9, r9, #1
 8010bee:	d505      	bpl.n	8010bfc <_fwalk_reent+0x24>
 8010bf0:	6824      	ldr	r4, [r4, #0]
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	d1f7      	bne.n	8010be6 <_fwalk_reent+0xe>
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bfc:	89ab      	ldrh	r3, [r5, #12]
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d907      	bls.n	8010c12 <_fwalk_reent+0x3a>
 8010c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c06:	3301      	adds	r3, #1
 8010c08:	d003      	beq.n	8010c12 <_fwalk_reent+0x3a>
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	47c0      	blx	r8
 8010c10:	4307      	orrs	r7, r0
 8010c12:	3568      	adds	r5, #104	; 0x68
 8010c14:	e7e9      	b.n	8010bea <_fwalk_reent+0x12>

08010c16 <__retarget_lock_init_recursive>:
 8010c16:	4770      	bx	lr

08010c18 <__retarget_lock_acquire_recursive>:
 8010c18:	4770      	bx	lr

08010c1a <__retarget_lock_release_recursive>:
 8010c1a:	4770      	bx	lr

08010c1c <__swhatbuf_r>:
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	460e      	mov	r6, r1
 8010c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c24:	2900      	cmp	r1, #0
 8010c26:	b096      	sub	sp, #88	; 0x58
 8010c28:	4614      	mov	r4, r2
 8010c2a:	461d      	mov	r5, r3
 8010c2c:	da07      	bge.n	8010c3e <__swhatbuf_r+0x22>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	602b      	str	r3, [r5, #0]
 8010c32:	89b3      	ldrh	r3, [r6, #12]
 8010c34:	061a      	lsls	r2, r3, #24
 8010c36:	d410      	bmi.n	8010c5a <__swhatbuf_r+0x3e>
 8010c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c3c:	e00e      	b.n	8010c5c <__swhatbuf_r+0x40>
 8010c3e:	466a      	mov	r2, sp
 8010c40:	f000 f970 	bl	8010f24 <_fstat_r>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	dbf2      	blt.n	8010c2e <__swhatbuf_r+0x12>
 8010c48:	9a01      	ldr	r2, [sp, #4]
 8010c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c52:	425a      	negs	r2, r3
 8010c54:	415a      	adcs	r2, r3
 8010c56:	602a      	str	r2, [r5, #0]
 8010c58:	e7ee      	b.n	8010c38 <__swhatbuf_r+0x1c>
 8010c5a:	2340      	movs	r3, #64	; 0x40
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	b016      	add	sp, #88	; 0x58
 8010c62:	bd70      	pop	{r4, r5, r6, pc}

08010c64 <__smakebuf_r>:
 8010c64:	898b      	ldrh	r3, [r1, #12]
 8010c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c68:	079d      	lsls	r5, r3, #30
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	460c      	mov	r4, r1
 8010c6e:	d507      	bpl.n	8010c80 <__smakebuf_r+0x1c>
 8010c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	6123      	str	r3, [r4, #16]
 8010c78:	2301      	movs	r3, #1
 8010c7a:	6163      	str	r3, [r4, #20]
 8010c7c:	b002      	add	sp, #8
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}
 8010c80:	ab01      	add	r3, sp, #4
 8010c82:	466a      	mov	r2, sp
 8010c84:	f7ff ffca 	bl	8010c1c <__swhatbuf_r>
 8010c88:	9900      	ldr	r1, [sp, #0]
 8010c8a:	4605      	mov	r5, r0
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	f000 f879 	bl	8010d84 <_malloc_r>
 8010c92:	b948      	cbnz	r0, 8010ca8 <__smakebuf_r+0x44>
 8010c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c98:	059a      	lsls	r2, r3, #22
 8010c9a:	d4ef      	bmi.n	8010c7c <__smakebuf_r+0x18>
 8010c9c:	f023 0303 	bic.w	r3, r3, #3
 8010ca0:	f043 0302 	orr.w	r3, r3, #2
 8010ca4:	81a3      	strh	r3, [r4, #12]
 8010ca6:	e7e3      	b.n	8010c70 <__smakebuf_r+0xc>
 8010ca8:	4b0d      	ldr	r3, [pc, #52]	; (8010ce0 <__smakebuf_r+0x7c>)
 8010caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cac:	89a3      	ldrh	r3, [r4, #12]
 8010cae:	6020      	str	r0, [r4, #0]
 8010cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cb4:	81a3      	strh	r3, [r4, #12]
 8010cb6:	9b00      	ldr	r3, [sp, #0]
 8010cb8:	6163      	str	r3, [r4, #20]
 8010cba:	9b01      	ldr	r3, [sp, #4]
 8010cbc:	6120      	str	r0, [r4, #16]
 8010cbe:	b15b      	cbz	r3, 8010cd8 <__smakebuf_r+0x74>
 8010cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f000 f93f 	bl	8010f48 <_isatty_r>
 8010cca:	b128      	cbz	r0, 8010cd8 <__smakebuf_r+0x74>
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	f023 0303 	bic.w	r3, r3, #3
 8010cd2:	f043 0301 	orr.w	r3, r3, #1
 8010cd6:	81a3      	strh	r3, [r4, #12]
 8010cd8:	89a0      	ldrh	r0, [r4, #12]
 8010cda:	4305      	orrs	r5, r0
 8010cdc:	81a5      	strh	r5, [r4, #12]
 8010cde:	e7cd      	b.n	8010c7c <__smakebuf_r+0x18>
 8010ce0:	08010a75 	.word	0x08010a75

08010ce4 <_free_r>:
 8010ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ce6:	2900      	cmp	r1, #0
 8010ce8:	d048      	beq.n	8010d7c <_free_r+0x98>
 8010cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cee:	9001      	str	r0, [sp, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8010cf6:	bfb8      	it	lt
 8010cf8:	18e4      	addlt	r4, r4, r3
 8010cfa:	f000 f947 	bl	8010f8c <__malloc_lock>
 8010cfe:	4a20      	ldr	r2, [pc, #128]	; (8010d80 <_free_r+0x9c>)
 8010d00:	9801      	ldr	r0, [sp, #4]
 8010d02:	6813      	ldr	r3, [r2, #0]
 8010d04:	4615      	mov	r5, r2
 8010d06:	b933      	cbnz	r3, 8010d16 <_free_r+0x32>
 8010d08:	6063      	str	r3, [r4, #4]
 8010d0a:	6014      	str	r4, [r2, #0]
 8010d0c:	b003      	add	sp, #12
 8010d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d12:	f000 b941 	b.w	8010f98 <__malloc_unlock>
 8010d16:	42a3      	cmp	r3, r4
 8010d18:	d90b      	bls.n	8010d32 <_free_r+0x4e>
 8010d1a:	6821      	ldr	r1, [r4, #0]
 8010d1c:	1862      	adds	r2, r4, r1
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	bf04      	itt	eq
 8010d22:	681a      	ldreq	r2, [r3, #0]
 8010d24:	685b      	ldreq	r3, [r3, #4]
 8010d26:	6063      	str	r3, [r4, #4]
 8010d28:	bf04      	itt	eq
 8010d2a:	1852      	addeq	r2, r2, r1
 8010d2c:	6022      	streq	r2, [r4, #0]
 8010d2e:	602c      	str	r4, [r5, #0]
 8010d30:	e7ec      	b.n	8010d0c <_free_r+0x28>
 8010d32:	461a      	mov	r2, r3
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	b10b      	cbz	r3, 8010d3c <_free_r+0x58>
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	d9fa      	bls.n	8010d32 <_free_r+0x4e>
 8010d3c:	6811      	ldr	r1, [r2, #0]
 8010d3e:	1855      	adds	r5, r2, r1
 8010d40:	42a5      	cmp	r5, r4
 8010d42:	d10b      	bne.n	8010d5c <_free_r+0x78>
 8010d44:	6824      	ldr	r4, [r4, #0]
 8010d46:	4421      	add	r1, r4
 8010d48:	1854      	adds	r4, r2, r1
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	6011      	str	r1, [r2, #0]
 8010d4e:	d1dd      	bne.n	8010d0c <_free_r+0x28>
 8010d50:	681c      	ldr	r4, [r3, #0]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	6053      	str	r3, [r2, #4]
 8010d56:	4421      	add	r1, r4
 8010d58:	6011      	str	r1, [r2, #0]
 8010d5a:	e7d7      	b.n	8010d0c <_free_r+0x28>
 8010d5c:	d902      	bls.n	8010d64 <_free_r+0x80>
 8010d5e:	230c      	movs	r3, #12
 8010d60:	6003      	str	r3, [r0, #0]
 8010d62:	e7d3      	b.n	8010d0c <_free_r+0x28>
 8010d64:	6825      	ldr	r5, [r4, #0]
 8010d66:	1961      	adds	r1, r4, r5
 8010d68:	428b      	cmp	r3, r1
 8010d6a:	bf04      	itt	eq
 8010d6c:	6819      	ldreq	r1, [r3, #0]
 8010d6e:	685b      	ldreq	r3, [r3, #4]
 8010d70:	6063      	str	r3, [r4, #4]
 8010d72:	bf04      	itt	eq
 8010d74:	1949      	addeq	r1, r1, r5
 8010d76:	6021      	streq	r1, [r4, #0]
 8010d78:	6054      	str	r4, [r2, #4]
 8010d7a:	e7c7      	b.n	8010d0c <_free_r+0x28>
 8010d7c:	b003      	add	sp, #12
 8010d7e:	bd30      	pop	{r4, r5, pc}
 8010d80:	20017d30 	.word	0x20017d30

08010d84 <_malloc_r>:
 8010d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d86:	1ccd      	adds	r5, r1, #3
 8010d88:	f025 0503 	bic.w	r5, r5, #3
 8010d8c:	3508      	adds	r5, #8
 8010d8e:	2d0c      	cmp	r5, #12
 8010d90:	bf38      	it	cc
 8010d92:	250c      	movcc	r5, #12
 8010d94:	2d00      	cmp	r5, #0
 8010d96:	4606      	mov	r6, r0
 8010d98:	db01      	blt.n	8010d9e <_malloc_r+0x1a>
 8010d9a:	42a9      	cmp	r1, r5
 8010d9c:	d903      	bls.n	8010da6 <_malloc_r+0x22>
 8010d9e:	230c      	movs	r3, #12
 8010da0:	6033      	str	r3, [r6, #0]
 8010da2:	2000      	movs	r0, #0
 8010da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010da6:	f000 f8f1 	bl	8010f8c <__malloc_lock>
 8010daa:	4921      	ldr	r1, [pc, #132]	; (8010e30 <_malloc_r+0xac>)
 8010dac:	680a      	ldr	r2, [r1, #0]
 8010dae:	4614      	mov	r4, r2
 8010db0:	b99c      	cbnz	r4, 8010dda <_malloc_r+0x56>
 8010db2:	4f20      	ldr	r7, [pc, #128]	; (8010e34 <_malloc_r+0xb0>)
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	b923      	cbnz	r3, 8010dc2 <_malloc_r+0x3e>
 8010db8:	4621      	mov	r1, r4
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f000 f83c 	bl	8010e38 <_sbrk_r>
 8010dc0:	6038      	str	r0, [r7, #0]
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	f000 f837 	bl	8010e38 <_sbrk_r>
 8010dca:	1c43      	adds	r3, r0, #1
 8010dcc:	d123      	bne.n	8010e16 <_malloc_r+0x92>
 8010dce:	230c      	movs	r3, #12
 8010dd0:	6033      	str	r3, [r6, #0]
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f000 f8e0 	bl	8010f98 <__malloc_unlock>
 8010dd8:	e7e3      	b.n	8010da2 <_malloc_r+0x1e>
 8010dda:	6823      	ldr	r3, [r4, #0]
 8010ddc:	1b5b      	subs	r3, r3, r5
 8010dde:	d417      	bmi.n	8010e10 <_malloc_r+0x8c>
 8010de0:	2b0b      	cmp	r3, #11
 8010de2:	d903      	bls.n	8010dec <_malloc_r+0x68>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	441c      	add	r4, r3
 8010de8:	6025      	str	r5, [r4, #0]
 8010dea:	e004      	b.n	8010df6 <_malloc_r+0x72>
 8010dec:	6863      	ldr	r3, [r4, #4]
 8010dee:	42a2      	cmp	r2, r4
 8010df0:	bf0c      	ite	eq
 8010df2:	600b      	streq	r3, [r1, #0]
 8010df4:	6053      	strne	r3, [r2, #4]
 8010df6:	4630      	mov	r0, r6
 8010df8:	f000 f8ce 	bl	8010f98 <__malloc_unlock>
 8010dfc:	f104 000b 	add.w	r0, r4, #11
 8010e00:	1d23      	adds	r3, r4, #4
 8010e02:	f020 0007 	bic.w	r0, r0, #7
 8010e06:	1ac2      	subs	r2, r0, r3
 8010e08:	d0cc      	beq.n	8010da4 <_malloc_r+0x20>
 8010e0a:	1a1b      	subs	r3, r3, r0
 8010e0c:	50a3      	str	r3, [r4, r2]
 8010e0e:	e7c9      	b.n	8010da4 <_malloc_r+0x20>
 8010e10:	4622      	mov	r2, r4
 8010e12:	6864      	ldr	r4, [r4, #4]
 8010e14:	e7cc      	b.n	8010db0 <_malloc_r+0x2c>
 8010e16:	1cc4      	adds	r4, r0, #3
 8010e18:	f024 0403 	bic.w	r4, r4, #3
 8010e1c:	42a0      	cmp	r0, r4
 8010e1e:	d0e3      	beq.n	8010de8 <_malloc_r+0x64>
 8010e20:	1a21      	subs	r1, r4, r0
 8010e22:	4630      	mov	r0, r6
 8010e24:	f000 f808 	bl	8010e38 <_sbrk_r>
 8010e28:	3001      	adds	r0, #1
 8010e2a:	d1dd      	bne.n	8010de8 <_malloc_r+0x64>
 8010e2c:	e7cf      	b.n	8010dce <_malloc_r+0x4a>
 8010e2e:	bf00      	nop
 8010e30:	20017d30 	.word	0x20017d30
 8010e34:	20017d34 	.word	0x20017d34

08010e38 <_sbrk_r>:
 8010e38:	b538      	push	{r3, r4, r5, lr}
 8010e3a:	4d06      	ldr	r5, [pc, #24]	; (8010e54 <_sbrk_r+0x1c>)
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	4604      	mov	r4, r0
 8010e40:	4608      	mov	r0, r1
 8010e42:	602b      	str	r3, [r5, #0]
 8010e44:	f7f1 fdfc 	bl	8002a40 <_sbrk>
 8010e48:	1c43      	adds	r3, r0, #1
 8010e4a:	d102      	bne.n	8010e52 <_sbrk_r+0x1a>
 8010e4c:	682b      	ldr	r3, [r5, #0]
 8010e4e:	b103      	cbz	r3, 8010e52 <_sbrk_r+0x1a>
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	bd38      	pop	{r3, r4, r5, pc}
 8010e54:	20019960 	.word	0x20019960

08010e58 <__sread>:
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	460c      	mov	r4, r1
 8010e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e60:	f000 f8a0 	bl	8010fa4 <_read_r>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	bfab      	itete	ge
 8010e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e6c:	181b      	addge	r3, r3, r0
 8010e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e72:	bfac      	ite	ge
 8010e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e76:	81a3      	strhlt	r3, [r4, #12]
 8010e78:	bd10      	pop	{r4, pc}

08010e7a <__swrite>:
 8010e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e7e:	461f      	mov	r7, r3
 8010e80:	898b      	ldrh	r3, [r1, #12]
 8010e82:	05db      	lsls	r3, r3, #23
 8010e84:	4605      	mov	r5, r0
 8010e86:	460c      	mov	r4, r1
 8010e88:	4616      	mov	r6, r2
 8010e8a:	d505      	bpl.n	8010e98 <__swrite+0x1e>
 8010e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e90:	2302      	movs	r3, #2
 8010e92:	2200      	movs	r2, #0
 8010e94:	f000 f868 	bl	8010f68 <_lseek_r>
 8010e98:	89a3      	ldrh	r3, [r4, #12]
 8010e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ea2:	81a3      	strh	r3, [r4, #12]
 8010ea4:	4632      	mov	r2, r6
 8010ea6:	463b      	mov	r3, r7
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eae:	f000 b817 	b.w	8010ee0 <_write_r>

08010eb2 <__sseek>:
 8010eb2:	b510      	push	{r4, lr}
 8010eb4:	460c      	mov	r4, r1
 8010eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eba:	f000 f855 	bl	8010f68 <_lseek_r>
 8010ebe:	1c43      	adds	r3, r0, #1
 8010ec0:	89a3      	ldrh	r3, [r4, #12]
 8010ec2:	bf15      	itete	ne
 8010ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ece:	81a3      	strheq	r3, [r4, #12]
 8010ed0:	bf18      	it	ne
 8010ed2:	81a3      	strhne	r3, [r4, #12]
 8010ed4:	bd10      	pop	{r4, pc}

08010ed6 <__sclose>:
 8010ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eda:	f000 b813 	b.w	8010f04 <_close_r>
	...

08010ee0 <_write_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	4d07      	ldr	r5, [pc, #28]	; (8010f00 <_write_r+0x20>)
 8010ee4:	4604      	mov	r4, r0
 8010ee6:	4608      	mov	r0, r1
 8010ee8:	4611      	mov	r1, r2
 8010eea:	2200      	movs	r2, #0
 8010eec:	602a      	str	r2, [r5, #0]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	f7f1 fd55 	bl	800299e <_write>
 8010ef4:	1c43      	adds	r3, r0, #1
 8010ef6:	d102      	bne.n	8010efe <_write_r+0x1e>
 8010ef8:	682b      	ldr	r3, [r5, #0]
 8010efa:	b103      	cbz	r3, 8010efe <_write_r+0x1e>
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	bd38      	pop	{r3, r4, r5, pc}
 8010f00:	20019960 	.word	0x20019960

08010f04 <_close_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	4d06      	ldr	r5, [pc, #24]	; (8010f20 <_close_r+0x1c>)
 8010f08:	2300      	movs	r3, #0
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4608      	mov	r0, r1
 8010f0e:	602b      	str	r3, [r5, #0]
 8010f10:	f7f1 fd61 	bl	80029d6 <_close>
 8010f14:	1c43      	adds	r3, r0, #1
 8010f16:	d102      	bne.n	8010f1e <_close_r+0x1a>
 8010f18:	682b      	ldr	r3, [r5, #0]
 8010f1a:	b103      	cbz	r3, 8010f1e <_close_r+0x1a>
 8010f1c:	6023      	str	r3, [r4, #0]
 8010f1e:	bd38      	pop	{r3, r4, r5, pc}
 8010f20:	20019960 	.word	0x20019960

08010f24 <_fstat_r>:
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	4d07      	ldr	r5, [pc, #28]	; (8010f44 <_fstat_r+0x20>)
 8010f28:	2300      	movs	r3, #0
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	4608      	mov	r0, r1
 8010f2e:	4611      	mov	r1, r2
 8010f30:	602b      	str	r3, [r5, #0]
 8010f32:	f7f1 fd5c 	bl	80029ee <_fstat>
 8010f36:	1c43      	adds	r3, r0, #1
 8010f38:	d102      	bne.n	8010f40 <_fstat_r+0x1c>
 8010f3a:	682b      	ldr	r3, [r5, #0]
 8010f3c:	b103      	cbz	r3, 8010f40 <_fstat_r+0x1c>
 8010f3e:	6023      	str	r3, [r4, #0]
 8010f40:	bd38      	pop	{r3, r4, r5, pc}
 8010f42:	bf00      	nop
 8010f44:	20019960 	.word	0x20019960

08010f48 <_isatty_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	4d06      	ldr	r5, [pc, #24]	; (8010f64 <_isatty_r+0x1c>)
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4608      	mov	r0, r1
 8010f52:	602b      	str	r3, [r5, #0]
 8010f54:	f7f1 fd5b 	bl	8002a0e <_isatty>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	d102      	bne.n	8010f62 <_isatty_r+0x1a>
 8010f5c:	682b      	ldr	r3, [r5, #0]
 8010f5e:	b103      	cbz	r3, 8010f62 <_isatty_r+0x1a>
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	bd38      	pop	{r3, r4, r5, pc}
 8010f64:	20019960 	.word	0x20019960

08010f68 <_lseek_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4d07      	ldr	r5, [pc, #28]	; (8010f88 <_lseek_r+0x20>)
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	4608      	mov	r0, r1
 8010f70:	4611      	mov	r1, r2
 8010f72:	2200      	movs	r2, #0
 8010f74:	602a      	str	r2, [r5, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	f7f1 fd54 	bl	8002a24 <_lseek>
 8010f7c:	1c43      	adds	r3, r0, #1
 8010f7e:	d102      	bne.n	8010f86 <_lseek_r+0x1e>
 8010f80:	682b      	ldr	r3, [r5, #0]
 8010f82:	b103      	cbz	r3, 8010f86 <_lseek_r+0x1e>
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	bd38      	pop	{r3, r4, r5, pc}
 8010f88:	20019960 	.word	0x20019960

08010f8c <__malloc_lock>:
 8010f8c:	4801      	ldr	r0, [pc, #4]	; (8010f94 <__malloc_lock+0x8>)
 8010f8e:	f7ff be43 	b.w	8010c18 <__retarget_lock_acquire_recursive>
 8010f92:	bf00      	nop
 8010f94:	20019958 	.word	0x20019958

08010f98 <__malloc_unlock>:
 8010f98:	4801      	ldr	r0, [pc, #4]	; (8010fa0 <__malloc_unlock+0x8>)
 8010f9a:	f7ff be3e 	b.w	8010c1a <__retarget_lock_release_recursive>
 8010f9e:	bf00      	nop
 8010fa0:	20019958 	.word	0x20019958

08010fa4 <_read_r>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	4d07      	ldr	r5, [pc, #28]	; (8010fc4 <_read_r+0x20>)
 8010fa8:	4604      	mov	r4, r0
 8010faa:	4608      	mov	r0, r1
 8010fac:	4611      	mov	r1, r2
 8010fae:	2200      	movs	r2, #0
 8010fb0:	602a      	str	r2, [r5, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	f7f1 fcd6 	bl	8002964 <_read>
 8010fb8:	1c43      	adds	r3, r0, #1
 8010fba:	d102      	bne.n	8010fc2 <_read_r+0x1e>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	b103      	cbz	r3, 8010fc2 <_read_r+0x1e>
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}
 8010fc4:	20019960 	.word	0x20019960

08010fc8 <_init>:
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	bf00      	nop
 8010fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fce:	bc08      	pop	{r3}
 8010fd0:	469e      	mov	lr, r3
 8010fd2:	4770      	bx	lr

08010fd4 <_fini>:
 8010fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd6:	bf00      	nop
 8010fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fda:	bc08      	pop	{r3}
 8010fdc:	469e      	mov	lr, r3
 8010fde:	4770      	bx	lr
